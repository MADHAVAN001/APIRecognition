Well	O
,	O
in	O
Java	B
an	O
int	O
is	O
a	O
primitive	O
while	O
an	O
Integer	B
is	O
an	O
Object	B
.	O
Meaning	O
,	O
if	O
you	O
made	O
a	O
new	O
Integer	B
:	O
Integer	B
i	O
=	O
new	B
Integer	I
(	I
6	I
)	I
;	O
You	O
could	O
call	O
some	O
method	O
on	O
i	O
:	O
String	B
s	O
=	O
i.toString	B
(	I
)	I
;	O
//sets	O
s	O
the	O
string	O
representation	O
of	O
i	O
Whereas	O
with	O
an	O
int	O
:	O
int	O
i	O
=	O
6	O
;	O
You	O
can	O
not	O
call	O
any	O
methods	O
on	O
it	O
,	O
because	O
it	O
is	O
simply	O
a	O
primitive	O
.	O
So	O
:	O
String	B
s	O
=	O
i.toString	B
(	I
)	I
;	O
//will	O
not	O
work	O
!	O
!	O
!	O
would	O
produce	O
an	O
error	O
,	O
because	O
int	O
is	O
not	O
an	O
object	O
.	O
int	O
is	O
one	O
of	O
the	O
few	O
primitives	O
in	O
Java	B
(	O
along	O
with	O
char	O
and	O
some	O
others	O
)	O
.	O
I	O
'm	O
not	O
100	O
%	O
sure	O
,	O
but	O
I	O
'm	O
thinking	O
that	O
the	O
Integer	B
object	O
more	O
or	O
less	O
just	O
has	O
an	O
int	O
property	O
and	O
a	O
whole	O
bunch	O
of	O
methods	O
to	O
interact	O
with	O
that	O
property	O
(	O
like	O
the	O
toString	B
(	I
)	I
method	O
for	O
example	O
)	O
.	O
So	O
Integer	B
is	O
a	O
fancy	O
way	O
to	O
work	O
with	O
an	O
int	O
(	O
Just	O
as	O
perhaps	O
String	B
is	O
a	O
fancy	O
way	O
to	O
work	O
with	O
a	O
group	O
of	O
chars	O
)	O
.	O
I	O
know	O
that	O
Java	B
is	O
n't	O
C	O
,	O
but	O
since	O
I	O
've	O
never	O
programmed	O
in	O
C	O
this	O
is	O
the	O
closest	O
I	O
could	O
come	O
to	O
the	O
answer	O
.	O
Hope	O
this	O
helps	O
!	O
Integer	B
object	O
javadoc	O
Integer	B
Ojbect	B
vs.	O
int	O
primitive	O
comparison	O
