I	O
tend	O
to	O
follow	O
the	O
design	O
of	O
JDK	O
libraries	O
,	O
especially	O
Collections	O
and	O
Concurrency	O
(	O
Joshua	O
Bloch	O
,	O
Doug	O
Lea	O
,	O
those	O
guys	O
know	O
how	O
to	O
design	O
solid	O
APIs	O
)	O
.	O
Anyway	O
,	O
many	O
APIs	O
in	O
the	O
JDK	O
pro-actively	O
throws	O
.	O
For	O
example	O
,	O
the	O
Javadoc	O
for	O
states	O
:	O
@	O
throws	O
NullPointerException	B
if	O
the	O
key	O
is	O
null	O
and	O
this	O
map	O
does	O
not	O
permit	O
null	O
keys	O
(	O
optional	O
)	O
.	O
It	O
's	O
perfectly	O
valid	O
to	O
throw	O
your	O
own	O
NPE	O
.	O
The	O
convention	O
is	O
to	O
include	O
the	O
parameter	O
name	O
which	O
was	O
null	O
in	O
the	O
message	O
of	O
the	O
exception	O
.	O
The	O
pattern	O
goes	O
:	O
public	O
void	O
someMethod	O
(	O
Object	O
mustNotBeNull	O
)	O
{	O
if	O
(	O
mustNotBeNull	O
==	O
null	O
)	O
{	O
throw	O
new	O
NullPointerException	B
(	O
``	O
mustNotBeNull	O
must	O
not	O
be	O
null	O
''	O
)	O
;	O
}	O
}	O
Whatever	O
you	O
do	O
,	O
do	O
n't	O
allow	O
a	O
bad	O
value	O
to	O
get	O
set	O
and	O
throw	O
an	O
exception	O
later	O
when	O
other	O
code	O
attempts	O
to	O
use	O
it	O
.	O
That	O
makes	O
debugging	O
a	O
nightmare	O
.	O
You	O
should	O
always	O
the	O
follow	O
the	O
``	O
fail-fast	O
''	O
principle	O
.	O
