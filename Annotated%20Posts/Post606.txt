I	O
'll	O
just	O
post	O
here	O
since	O
some	O
of	O
the	O
other	O
posts	O
are	O
slightly	O
inaccurate	O
in	O
relation	O
to	O
C	B
#	I
.	O
Correct	O
:	O
is	O
an	O
alias	O
for	O
.	O
Wrong	O
:	O
is	O
not	O
an	O
alias	O
for	O
,	O
but	O
for	O
Basically	O
,	O
int	O
is	O
a	O
reserved	O
keyword	O
in	O
the	O
C	B
#	I
programming	O
language	O
,	O
and	O
is	O
an	O
alias	O
for	O
the	O
value	O
type	O
.	O
and	O
Float	B
is	O
not	O
the	O
same	O
however	O
,	O
as	O
the	O
right	O
system	O
type	O
for	O
''float	O
''	O
is	O
System.Single	B
.	O
There	O
are	O
some	O
types	O
like	O
this	O
that	O
has	O
reserved	O
keywords	O
that	O
does	O
n't	O
seem	O
to	O
match	O
the	O
type	O
names	O
directly	O
.	O
In	O
C	B
#	I
there	O
is	O
no	O
difference	O
between	O
''	O
''	O
and	O
''	O
''	O
,	O
or	O
any	O
of	O
the	O
other	O
pa	O
rs	O
or	O
keywords/system	O
types	O
,	O
except	O
for	O
when	O
defining	O
enums	O
.	O
With	O
enums	O
you	O
can	O
specify	O
the	O
storage	O
size	O
to	O
use	O
and	O
in	O
this	O
case	O
you	O
can	O
only	O
use	O
the	O
reserved	O
keyword	O
,	O
and	O
not	O
the	O
system	O
runtime	O
type	O
name	O
.	O
Wether	O
the	O
value	O
in	O
the	O
int	O
will	O
be	O
stored	O
on	O
the	O
stack	O
,	O
in	O
memory	O
,	O
or	O
as	O
a	O
referenced	O
heap	O
object	O
depends	O
on	O
the	O
context	O
and	O
how	O
you	O
use	O
it	O
.	O
This	O
declaration	O
in	O
a	O
method	O
:	O
int	O
i	O
;	O
defines	O
a	O
variable	O
i	O
of	O
type	O
,	O
l	O
ving	O
in	O
a	O
register	O
or	O
on	O
the	O
stack	O
,	O
depending	O
on	O
optimizations	O
.	O
The	O
same	O
declaration	O
in	O
a	O
type	O
(	O
struct	O
or	O
class	O
)	O
defines	O
a	O
member	O
field	O
.	O
The	O
same	O
declaration	O
in	O
a	O
method	O
argument	O
list	O
defines	O
a	O
parameter	O
,	O
with	O
the	O
same	O
storage	O
options	O
as	O
for	O
a	O
local	O
variable	O
.	O
(	O
note	O
that	O
this	O
paragraph	O
is	O
not	O
valid	O
if	O
you	O
start	O
pulling	O
iterator	O
methods	O
into	O
the	O
mix	O
,	O
these	O
are	O
different	O
beasts	O
altogether	O
)	O
To	O
get	O
a	O
heap	O
object	O
,	O
you	O
can	O
use	O
boxing	O
:	O
object	O
o	O
=	O
i	O
;	O
this	O
will	O
create	O
a	O
boxed	O
copy	O
of	O
the	O
contents	O
of	O
i	O
on	O
the	O
heap	O
.	O
In	O
IL	O
you	O
can	O
access	O
methods	O
on	O
the	O
heap	O
object	O
directly	O
,	O
but	O
in	O
C	B
#	I
you	O
need	O
to	O
cast	O
it	O
back	O
to	O
an	O
int	O
,	O
which	O
will	O
create	O
another	O
copy	O
.	O
Thus	O
,	O
the	O
object	O
on	O
the	O
heap	O
can	O
not	O
easily	O
be	O
changed	O
in	O
C	B
#	I
without	O
creating	O
a	O
new	O
boxed	O
copy	O
of	O
a	O
new	O
int	O
value	O
.	O
(	O
Ugh	O
,	O
this	O
paragraph	O
does	O
n't	O
read	O
all	O
that	O
easily	O
.	O
)	O
