I	O
was	O
bored	O
so	O
i	O
modified	O
some	O
stuff	O
i	O
wrote	O
.	O
It	O
try	O
's	O
to	O
encapsulate	O
the	O
parsing	O
in	O
an	O
OO	O
manner	O
whle	O
cutting	O
down	O
on	O
the	O
amount	O
of	O
iterations	O
through	O
the	O
file	O
,	O
it	O
only	O
iterates	O
once	O
at	O
the	O
top	O
foreach	O
.	O
using	O
System	B
;	O
using	O
System.Collections.Generic	B
;	O
using	O
System.Linq	B
;	O
using	O
System.Text	B
;	O
using	O
System.IO	B
;	O
namespace	O
ConsoleApplication1	O
{	O
class	O
Program	O
{	O
static	O
void	O
Main	O
(	O
string	B
[	I
]	I
args	O
)	O
{	O
//	O
usage	O
:	O
//	O
note	O
this	O
wont	O
run	O
as	O
getting	O
streams	O
is	O
not	O
Implemented	O
//	O
but	O
will	O
get	O
you	O
started	O
CSVFileParser	B
fileParser	I
=	I
new	I
CSVFileParser	I
(	I
)	I
;	O
//	O
TO	O
Do	O
:	O
configure	O
fileparser	O
PersonParser	B
personParser	I
=	I
new	I
PersonParser	I
(	I
fileParser	I
)	I
;	O
ListPerson	O
persons	O
=	O
new	O
ListPerson	O
(	O
)	O
;	O
//	O
if	O
the	O
file	O
is	O
large	O
and	O
there	O
is	O
a	O
good	O
way	O
to	O
limit	O
//	O
without	O
having	O
to	O
reparse	O
the	O
whole	O
file	O
you	O
can	O
use	O
a	O
//	O
linq	O
query	O
if	O
you	O
desire	O
foreach	O
(	O
Person	O
person	O
in	O
personParser.GetPersons	O
(	O
)	O
)	O
{	O
persons.Add	O
(	O
person	O
)	O
;	O
}	O
//	O
now	O
we	O
have	O
a	O
list	O
of	O
Person	O
objects	O
}	O
}	O
public	O
abstract	O
class	O
CSVParser	O
{	O
protected	O
String	O
[	O
]	O
deliniators	O
=	O
{	O
``	O
,	O
''	O
}	O
;	O
protected	O
internal	O
IEnumerableString	B
[	I
]	I
GetRecords	I
(	I
)	I
{	O
Stream	B
stream	I
=	I
GetStream	I
(	I
)	I
;	O
StreamReader	B
reader	I
=	I
new	I
StreamReader	I
(	I
stream	I
)	I
;	O
String	B
[	I
]	I
aRecord	I
;	O
while	O
(	O
!	O
reader.EndOfStream	B
)	O
{	O
aRecord	O
=	O
reader.ReadLine	B
(	I
)	I
.Split	O
(	O
deliniators	O
,	O
StringSplitOptions.None	B
)	O
;	O
yield	O
return	O
aRecord	O
;	O
}	O
}	O
protected	O
abstract	O
Stream	B
GetStream	I
(	I
)	I
;	O
}	O
public	O
class	O
CSVFileParser	O
:	O
CSVParser	O
{	O
//	O
to	O
do	O
:	O
add	O
logic	O
to	O
get	O
a	O
stream	O
from	O
a	O
file	O
protected	O
override	O
Stream	B
GetStream	I
(	I
)	I
{	O
throw	O
new	O
NotImplementedException	B
(	I
)	I
;	O
}	O
}	O
public	O
class	O
CSVWebParser	O
:	O
CSVParser	O
{	O
//	O
to	O
do	O
:	O
add	O
logic	O
to	O
get	O
a	O
stream	O
from	O
a	O
web	O
request	O
protected	O
override	O
Stream	B
GetStream	I
(	I
)	I
{	O
throw	O
new	O
NotImplementedException	B
(	I
)	I
;	O
}	O
}	O
public	O
class	O
Person	O
{	O
public	O
String	B
Name	I
{	I
get	I
;	I
set	I
;	I
}	I
public	O
String	B
Address	I
{	I
get	I
;	I
set	I
;	I
}	I
public	O
DateTime	B
DOB	O
{	O
get	O
;	O
set	O
;	O
}	O
}	O
public	O
class	O
PersonParser	O
{	O
public	O
PersonParser	O
(	O
CSVParser	O
parser	O
)	O
{	O
this.Parser	O
=	O
parser	O
;	O
}	O
public	O
CSVParser	O
Parser	O
{	O
get	O
;	O
set	O
;	O
}	O
public	O
IEnumerablePerson	O
GetPersons	O
(	O
)	O
{	O
foreach	O
(	O
String	B
[	I
]	I
record	I
in	I
this.Parser.GetRecords	I
(	I
)	I
)	O
{	O
yield	O
return	O
new	O
Person	O
(	O
)	O
{	O
Name	O
=	O
record	O
[	O
0	O
]	O
,	O
Address	O
=	O
record	O
[	O
1	O
]	O
,	O
DOB	O
=	O
DateTime.Parse	B
(	I
record	I
[	I
2	I
]	I
)	I
,	O
}	O
;	O
}	O
}	O
}	O
}	O
