This	O
is	O
a	O
rather	O
broad	O
question	O
,	O
as	O
programming	O
GUI	O
applications	O
in	O
Windows	O
can	O
be	O
done	O
in	O
so	O
many	O
ways	O
.	O
There	O
are	O
two	O
main	O
parts	O
to	O
developing	O
any	O
GUI	O
app	O
:	O
the	O
language	O
and	O
the	O
API/framework	O
.	O
Considering	O
you	O
're	O
interested	O
in	O
learning	O
to	O
build	O
Windows	O
GUI	O
apps	O
,	O
the	O
language	O
is	O
n't	O
really	O
a	O
point	O
of	O
focus	O
for	O
you	O
.	O
Hence	O
,	O
you	O
should	O
pick	O
a	O
language	O
you	O
already	O
know	O
and	O
work	O
with	O
a	O
framework	O
or	O
API	O
that	O
can	O
be	O
harnessed	O
by	O
your	O
chosen	O
language	O
.	O
If	O
you	O
want	O
to	O
use	O
C	O
you	O
're	O
pretty	O
much	O
restricted	O
to	O
dealing	O
with	O
the	O
Win32	O
API	O
yourself	O
,	O
in	O
which	O
case	O
reading	O
Petzold	O
or	O
Richter	O
would	O
be	O
great	O
places	O
to	O
start	O
.	O
The	O
Win32	O
API	O
can	O
be	O
quite	O
daunting	O
,	O
but	O
it	O
's	O
well	O
worth	O
the	O
effort	O
to	O
learn	O
(	O
imho	O
)	O
.	O
There	O
are	O
plenty	O
of	O
tutorials	O
on	O
Win32	O
on	O
the	O
web	O
,	O
and	O
there	O
's	O
always	O
MSDN	O
,	O
with	O
a	O
complete	O
reference/guide	O
to	O
the	O
Win32	O
API	O
.	O
Make	O
sure	O
you	O
cover	O
not	O
just	O
the	O
API	O
,	O
but	O
other	O
areas	O
such	O
as	O
resources/dialogs	O
as	O
they	O
are	O
building	O
blocks	O
for	O
your	O
Win32	O
application	O
.	O
If	O
you	O
want	O
to	O
use	O
C++	O
you	O
have	O
all	O
of	O
the	O
options	O
that	O
you	O
have	O
when	O
using	O
C	O
plus	O
a	O
few	O
others	O
.	O
I	O
'd	O
recommend	O
going	O
with	O
the	O
Win32	O
API	O
directly	O
,	O
and	O
then	O
moving	O
on	O
to	O
a	O
known	O
framework	O
such	O
as	O
MFC	O
,	O
Qt	O
,	O
wxWindows	O
or	O
GTK	O
so	O
that	O
you	O
can	O
spend	O
less	O
time	O
working	O
with	O
boilerplate	O
code	O
and	O
instead	O
focus	O
on	O
writing	O
your	O
application	O
logic	O
.	O
The	O
last	O
3	O
options	O
I	O
just	O
listed	O
have	O
the	O
added	O
benefit	O
of	O
being	O
cross-platform	O
,	O
so	O
you	O
do	O
n't	O
have	O
to	O
worry	O
too	O
much	O
about	O
platform-specific	O
issues	O
.	O
Given	O
that	O
you	O
said	O
you	O
want	O
to	O
work	O
with	O
Windows	O
,	O
I	O
'll	O
assume	O
you	O
're	O
keen	O
to	O
focus	O
on	O
that	O
rather	O
than	O
cross-platform	O
--	O
so	O
go	O
with	O
MFC	O
,	O
but	O
spend	O
some	O
time	O
with	O
the	O
Win32	O
API	O
first	O
to	O
get	O
familiar	O
with	O
some	O
of	O
the	O
concepts	O
.	O
When	O
dealing	O
with	O
MFC	O
and	O
the	O
Win32	O
API	O
,	O
it	O
's	O
a	O
good	O
idea	O
to	O
try	O
and	O
get	O
a	O
solid	O
understanding	O
of	O
the	O
terminology	O
prior	O
to	O
writing	O
code	O
.	O
For	O
example	O
,	O
you	O
need	O
to	O
understand	O
what	O
the	O
message	O
pump	O
is	O
,	O
and	O
how	O
it	O
works	O
.	O
You	O
need	O
to	O
know	O
about	O
concepts	O
such	O
as	O
``	O
owner-drawn	O
controls	O
''	O
,	O
and	O
subclassing	O
.	O
When	O
you	O
understand	O
these	O
things	O
(	O
and	O
more	O
)	O
,	O
you	O
'll	O
find	O
it	O
easier	O
to	O
work	O
with	O
MFC	O
because	O
it	O
uses	O
similar	O
terminology	O
in	O
its	O
class	O
interfaces	O
(	O
eg	O
.	O
you	O
need	O
to	O
know	O
what	O
``	O
translate	O
messages	O
''	O
means	O
before	O
you	O
can	O
understand	O
how	O
and	O
when	O
to	O
use	O
PreTranslateMessage	O
)	O
.	O
You	O
could	O
also	O
use	O
Managed	O
C++	O
to	O
write	O
.NET	O
GUI	O
applications	O
,	O
but	O
I	O
've	O
read	O
in	O
a	O
few	O
places	O
that	O
Managed	O
C++	O
was	O
n't	O
really	O
intended	O
to	O
be	O
used	O
in	O
this	O
manner	O
.	O
Instead	O
it	O
should	O
be	O
used	O
as	O
a	O
gateway	O
between	O
native/unmanaged	O
code	O
and	O
managed	O
code	O
.	O
If	O
you	O
're	O
using	O
.NET	O
it	O
's	O
best	O
to	O
use	O
a	O
.NET	O
language	O
such	O
as	O
VB.NET	O
or	O
C	O
#	O
to	O
build	O
your	O
GUIs	O
.	O
So	O
if	O
you	O
are	O
going	O
to	O
use	O
.NET	O
,	O
you	O
currently	O
have	O
the	O
choice	O
of	O
the	O
WinForms	O
library	O
,	O
or	O
WPF	O
.	O
I	O
personally	O
feel	O
that	O
you	O
'd	O
be	O
wasting	O
time	O
learning	O
to	O
build	O
WinForms	O
applications	O
given	O
that	O
WPF	O
is	O
designed	O
to	O
replace	O
it	O
.	O
Over	O
time	O
WPF	O
will	O
become	O
more	O
prevelant	O
and	O
Winforms	O
will	O
most	O
likely	O
die	O
off	O
.	O
WPF	O
has	O
a	O
much	O
richer	O
API	O
set	O
,	O
and	O
does	O
n't	O
suffer	O
from	O
many	O
of	O
the	O
limitations	O
that	O
Winforms	O
does	O
.	O
If	O
you	O
do	O
choose	O
this	O
route	O
,	O
however	O
,	O
you	O
'll	O
no	O
doubt	O
have	O
to	O
learn	O
XAML	O
,	O
which	O
is	O
a	O
markup	O
language	O
that	O
drives	O
WPF	O
applications	O
.	O
This	O
technology	O
is	O
coming	O
of	O
age	O
,	O
and	O
there	O
are	O
many	O
great	O
places	O
to	O
learn	O
about	O
it	O
.	O
First	O
,	O
there	O
are	O
sites	O
such	O
as	O
LearnWPF	O
,	O
and	O
DrWPF	O
which	O
have	O
some	O
really	O
great	O
articles	O
.	O
Secondly	O
,	O
there	O
are	O
plenty	O
of	O
quality	O
books	O
on	O
the	O
topic	O
.	O
So	O
,	O
to	O
sum	O
up	O
,	O
once	O
you	O
've	O
picked	O
your	O
language	O
and	O
tech	O
,	O
the	O
path	O
is	O
actually	O
quite	O
easy	O
.	O
Just	O
pick	O
up	O
a	O
book	O
or	O
two	O
,	O
read	O
some	O
blogs	O
,	O
get	O
into	O
some	O
code	O
samples..	O
and	O
most	O
importantly	O
...	O
write	O
code	O
.	O
Keep	O
writing	O
,	O
keep	O
making	O
mistakes	O
,	O
and	O
keep	O
learning	O
from	O
them	O
.	O
As	O
a	O
final	O
note	O
...	O
In	O
other	O
words	O
,	O
Silverlight	O
.	O
If	O
you	O
do	O
n't	O
want	O
to	O
go	O
the	O
MS	O
route	O
you	O
might	O
give	O
Adobe	O
's	O
Flash/Flex	O
a	O
look	O
see	O
.	O
Both	O
Silverlight	O
and	O
Flash/Flex	O
build	O
RIA	O
's	O
.	O
Which	O
I	O
think	O
is	O
where	O
we	O
are	O
headed	O
.	O
They	O
days	O
of	O
Office	O
like	O
apps	O
are	O
numbered	O
I	O
do	O
n't	O
agree	O
at	O
all	O
.	O
Silverlight	O
is	O
not	O
the	O
same	O
as	O
WPF	O
.	O
Silverlight	O
is	O
web-specific	O
,	O
and	O
only	O
has	O
a	O
subset	O
of	O
WPF	O
's	O
features	O
.	O
Given	O
that	O
the	O
question	O
asks	O
for	O
Windows	O
GUI	O
apps	O
,	O
Flash/Flex	O
Rich	O
Internet	O
Apps	O
are	O
not	O
really	O
a	O
fitting	O
suggestion	O
.	O
I	O
also	O
do	O
n't	O
agree	O
that	O
the	O
days	O
of	O
Rich	O
Client	O
Applications	O
(	O
such	O
as	O
office	O
)	O
are	O
numbered	O
at	O
all	O
.	O
I	O
hope	O
that	O
helps	O
.	O
Good	O
luck	O
:	O
)	O
