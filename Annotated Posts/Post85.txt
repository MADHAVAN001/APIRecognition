So	O
,	O
in	O
Java	O
,	O
the	O
first	O
line	O
of	O
your	O
constructor	O
HAS	O
to	O
be	O
a	O
call	O
to	O
super	O
...	O
be	O
it	O
implicitly	O
calling	O
super	O
(	O
)	O
,	O
or	O
explicitly	O
calling	O
another	O
constructor	O
.	O
What	O
I	O
want	O
to	O
know	O
is	O
,	O
why	O
ca	O
n't	O
I	O
put	O
a	O
try	O
block	O
around	O
that	O
?	O
My	O
specific	O
case	O
is	O
that	O
I	O
have	O
a	O
mock	O
class	O
for	O
a	O
test	O
.	O
There	O
is	O
no	O
default	O
constructor	O
,	O
but	O
I	O
want	O
one	O
to	O
make	O
the	O
tests	O
simpler	O
to	O
read	O
.	O
I	O
also	O
want	O
to	O
wrap	O
the	O
exceptions	O
thrown	O
from	O
the	O
constructor	O
into	O
a	O
RuntimeException	O
.	O
So	O
,	O
what	O
I	O
want	O
to	O
do	O
is	O
effectively	O
this	O
:	O
public	O
class	O
MyClassMock	O
extends	O
MyClass	O
{	O
public	O
MyClassMock	O
(	O
)	O
{	O
try	O
{	O
super	O
(	O
0	O
)	O
;	O
}	O
catch	O
(	O
Exception	O
e	O
)	O
{	O
throw	O
new	O
RuntimeException	O
(	O
e	O
)	O
;	O
}	O
}	O
//	O
Mocked	O
methods	O
}	O
But	O
Java	O
complains	O
that	O
super	O
is	O
n't	O
the	O
first	O
statement	O
.	O
My	O
workaround	O
:	O
public	O
class	O
MyClassMock	O
extends	O
MyClass	O
{	O
public	O
static	O
MyClassMock	O
construct	O
(	O
)	O
{	O
try	O
{	O
return	O
new	O
MyClassMock	O
(	O
)	O
;	O
}	O
catch	O
(	O
Exception	O
e	O
)	O
{	O
throw	O
new	O
RuntimeException	O
(	O
e	O
)	O
;	O
}	O
}	O
public	O
MyClassMock	O
(	O
)	O
throws	O
Exception	O
{	O
super	O
(	O
0	O
)	O
;	O
}	O
//	O
Mocked	O
methods	O
}	O
Is	O
this	O
the	O
best	O
workaround	O
?	O
Why	O
does	O
n't	O
Java	O
let	O
me	O
do	O
the	O
former	O
?	O
My	O
best	O
guess	O
as	O
to	O
the	O
``	O
why	O
''	O
is	O
that	O
Java	O
does	O
n't	O
want	O
to	O
let	O
me	O
have	O
a	O
constructed	O
object	O
in	O
a	O
potentially	O
inconsistent	O
state	O
...	O
however	O
,	O
in	O
doing	O
a	O
mock	O
,	O
I	O
do	O
n't	O
care	O
about	O
that	O
.	O
It	O
seems	O
I	O
should	O
be	O
able	O
to	O
do	O
the	O
above	O
...	O
or	O
at	O
least	O
I	O
know	O
that	O
the	O
above	O
is	O
safe	O
for	O
my	O
case	O
...	O
or	O
seems	O
as	O
though	O
it	O
should	O
be	O
anyways	O
.	O
I	O
am	O
overriding	O
any	O
methods	O
I	O
use	O
from	O
the	O
tested	O
class	O
,	O
so	O
there	O
is	O
no	O
risk	O
that	O
I	O
am	O
using	O
uninitialized	O
variables	O
.	O
