The	O
typical	O
method	O
is	O
as	O
follows	O
.	O
You	O
've	O
said	O
you	O
want	O
to	O
do	O
this	O
in	O
C	O
#	O
so	O
here	O
goes	O
...	O
If	O
you	O
do	O
n't	O
know	O
which	O
process	O
has	O
the	O
file	O
locked	O
,	O
you	O
'll	O
need	O
to	O
examine	O
each	O
process	O
's	O
handle	O
list	O
,	O
and	O
query	O
each	O
handle	O
to	O
determine	O
if	O
it	O
identifies	O
the	O
locked	O
file	O
.	O
Doing	O
this	O
in	O
C	O
#	O
will	O
likely	O
require	O
P/Invoke	O
or	O
an	O
intermediary	O
C++/CLI	O
to	O
call	O
the	O
native	O
APIs	O
you	O
'll	O
need	O
.	O
Once	O
you	O
've	O
figured	O
out	O
which	O
process	O
(	O
es	O
)	O
have	O
the	O
file	O
locked	O
,	O
you	O
'll	O
need	O
to	O
safely	O
inject	O
a	O
small	O
native	O
DLL	O
into	O
the	O
process	O
(	O
you	O
can	O
also	O
inject	O
a	O
managed	O
DLL	O
,	O
but	O
this	O
is	O
messier	O
,	O
as	O
you	O
then	O
have	O
to	O
start	O
or	O
attach	O
to	O
the	O
.NET	O
runtime	O
)	O
.	O
That	O
bootstrap	O
DLL	O
then	O
closes	O
the	O
handle	O
using	O
CloseHandle	O
etc	O
.	O
Essentially	O
:	O
the	O
way	O
to	O
unlock	O
a	O
``	O
locked	O
''	O
file	O
is	O
to	O
inject	O
a	O
DLL	O
into	O
the	O
offending	O
process	O
's	O
address	O
space	O
and	O
close	O
it	O
yourself	O
.	O
You	O
can	O
do	O
this	O
using	O
native	O
or	O
managed	O
code	O
.	O
No	O
matter	O
what	O
,	O
you	O
're	O
going	O
to	O
need	O
a	O
small	O
amount	O
of	O
native	O
code	O
or	O
at	O
least	O
P/Invoke	O
into	O
the	O
same	O
.	O
Helpful	O
links	O
:	O
http	O
:	O
//www.codeproject.com/KB/threads/winspy.aspx	O
http	O
:	O
//damianblog.com/2008/07/02/net-code-injection/	O
Good	O
luck	O
!	O
