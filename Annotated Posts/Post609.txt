In	O
Java	O
there	O
are	O
two	O
basic	O
types	O
in	O
the	O
JVM	O
.	O
1	O
)	O
Primitive	O
types	O
and	O
2	O
)	O
Reference	O
Types	O
.	O
int	O
is	O
a	O
primitive	O
type	O
and	O
Integer	O
is	O
a	O
class	O
type	O
(	O
which	O
is	O
kind	O
of	O
reference	O
type	O
)	O
.	O
Primitive	O
values	O
do	O
not	O
share	O
state	O
with	O
other	O
primitive	O
values	O
.	O
A	O
variable	O
whose	O
type	O
is	O
a	O
primitive	O
type	O
always	O
holds	O
a	O
primitive	O
value	O
of	O
that	O
type	O
.	O
int	O
aNumber	O
=	O
4	O
;	O
int	O
anotherNum	O
=	O
aNumber	O
;	O
aNumber	O
+=	O
6	O
;	O
System.out.println	O
(	O
anotherNum	O
)	O
;	O
//	O
Prints	O
4	O
An	O
object	O
is	O
a	O
dynamically	O
created	O
class	O
instance	O
or	O
an	O
array	O
.	O
The	O
reference	O
values	O
(	O
often	O
just	O
references	O
)	O
are	O
pointers	O
to	O
these	O
objects	O
and	O
a	O
special	O
null	O
reference	O
,	O
which	O
refers	O
to	O
no	O
object	O
.	O
There	O
may	O
be	O
many	O
references	O
to	O
the	O
same	O
object	O
.	O
Integer	O
aNumber	O
=	O
Integer.valueOf	O
(	O
4	O
)	O
;	O
Integer	O
anotherNumber	O
=	O
aNumber	O
;	O
//	O
anotherNumber	O
references	O
the	O
//	O
same	O
object	O
as	O
aNumber	O
Also	O
in	O
Java	O
everything	O
is	O
passed	O
by	O
value	O
.	O
With	O
objects	O
the	O
value	O
that	O
is	O
passed	O
is	O
the	O
reference	O
to	O
the	O
object	O
.	O
So	O
another	O
difference	O
between	O
int	O
and	O
Integer	O
in	O
java	O
is	O
how	O
they	O
are	O
passed	O
in	O
method	O
calls	O
.	O
For	O
example	O
in	O
public	O
int	O
add	O
(	O
int	O
a	O
,	O
int	O
b	O
)	O
{	O
return	O
a	O
+	O
b	O
;	O
}	O
final	O
int	O
two	O
=	O
2	O
;	O
int	O
sum	O
=	O
add	O
(	O
1	O
,	O
two	O
)	O
;	O
The	O
variable	O
two	O
is	O
passed	O
as	O
the	O
primitive	O
integer	O
type	O
2	O
.	O
Whereas	O
in	O
public	O
int	O
add	O
(	O
Integer	O
a	O
,	O
Integer	O
b	O
)	O
{	O
return	O
a.intValue	O
(	O
)	O
+	O
b.intValue	O
(	O
)	O
;	O
}	O
final	O
Integer	O
two	O
=	O
Integer.valueOf	O
(	O
2	O
)	O
;	O
int	O
sum	O
=	O
add	O
(	O
Integer.valueOf	O
(	O
1	O
)	O
,	O
two	O
)	O
;	O
The	O
variable	O
two	O
is	O
passed	O
as	O
a	O
reference	O
to	O
an	O
object	O
that	O
holds	O
the	O
integer	O
value	O
2	O
.	O
@	O
WolfmanDragon	O
:	O
Pass	O
by	O
reference	O
would	O
work	O
like	O
so	O
:	O
public	O
void	O
increment	O
(	O
int	O
x	O
)	O
{	O
x	O
=	O
x	O
+	O
1	O
;	O
}	O
int	O
a	O
=	O
1	O
;	O
increment	O
(	O
a	O
)	O
;	O
//	O
a	O
is	O
now	O
2	O
When	O
increment	O
is	O
called	O
it	O
passes	O
a	O
reference	O
(	O
pointer	O
)	O
to	O
variable	O
a	O
.	O
And	O
the	O
increment	O
function	O
directly	O
modifies	O
variable	O
a	O
.	O
And	O
for	O
object	O
types	O
it	O
would	O
work	O
as	O
follows	O
:	O
public	O
void	O
increment	O
(	O
Integer	O
x	O
)	O
{	O
x	O
=	O
Integer.valueOf	O
(	O
x.intValue	O
(	O
)	O
+	O
1	O
)	O
;	O
}	O
Integer	O
a	O
=	O
Integer.valueOf	O
(	O
1	O
)	O
;	O
increment	O
(	O
a	O
)	O
;	O
//	O
a	O
is	O
now	O
2	O
Do	O
you	O
see	O
the	O
difference	O
now	O
?	O
