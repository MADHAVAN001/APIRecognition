You	O
ca	O
n't	O
dynamically	O
add	O
methods	O
to	O
existing	O
objects	O
or	O
classes	O
in	O
.NET	O
,	O
except	O
by	O
changing	O
the	O
source	O
for	O
that	O
class	O
.	O
You	O
can	O
,	O
however	O
,	O
in	O
C	O
#	O
3.0	O
,	O
use	O
extension	O
methods	O
,	O
which	O
look	O
like	O
new	O
methods	O
,	O
but	O
are	O
compile-time	O
magic	O
.	O
To	O
do	O
this	O
for	O
your	O
code	O
:	O
public	B-API
static	B-API
class	B-API
StringExtensions	B-API
{	I-API
public	B-API
static	B-API
String	B-API
{	B-API
return	B-API
;	B-API
(	O
this	O
String	B-API
s	I-API
)	I-API
s.Trim	B-API
(	I-API
)	I-API
To	O
use	O
it	O
:	O
String	B-API
s	I-API
=	I-API
``	I-API
Test	I-API
``	I-API
;	O
s	O
=	O
s.trim	B-API
(	I-API
)	I-API
This	O
looks	O
like	O
a	O
new	O
method	O
,	O
but	O
will	O
compile	O
the	O
exact	O
same	O
way	O
as	O
this	O
code	O
:	O
String	B-API
s	I-API
=	I-API
``	I-API
Test	I-API
``	I-API
;	I-API
s	I-API
=	O
StringExtensions.trim	B-API
(	I-API
s	I-API
)	I-API
What	O
exactly	O
are	O
you	O
trying	O
to	O
accomplish	O
?	O
Perhaps	O
there	O
are	O
better	O
ways	O
of	O
doing	O
what	O
you	O
want	O
?	O
