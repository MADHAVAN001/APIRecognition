Yes	O
,	O
this	O
is	O
possible	O
.	O
One	O
of	O
the	O
main	O
pros	O
for	O
using	O
Swing	O
is	O
the	O
ease	O
with	O
which	O
the	O
abstract	O
controls	O
can	O
be	O
created	O
and	O
manipulates	O
.	O
Here	O
is	O
a	O
quick	O
and	O
dirty	O
way	O
to	O
extend	O
the	O
existing	O
JButton	O
class	O
to	O
draw	O
a	O
circle	O
to	O
the	O
right	O
of	O
the	O
text	O
.	O
package	O
test	O
;	O
import	O
java.awt.Color	B-API
;	O
import	O
java.awt.Container	B-API
;	O
import	O
java.awt.Dimension	B-API
;	O
import	O
java.awt.FlowLayout	B-API
;	O
import	O
java.awt.Graphics	B-API
;	O
import	O
javax.swing.JButton	B-API
;	O
import	O
javax.swing.JFrame	B-API
;	O
public	O
class	O
MyButton	O
extends	O
JButton	O
{	O
private	O
static	O
final	O
long	O
serialVersionUID	O
=	O
1L	O
;	O
private	O
Color	O
circleColor	O
=	O
Color.BLACK	B-API
;	O
public	O
MyButton	O
(	O
String	O
label	O
)	O
{	O
super	O
(	O
label	O
)	O
;	O
}	O
@	O
Override	O
protected	O
void	O
paintComponent	O
(	O
Graphics	O
g	O
)	O
{	O
super.paintComponent	B-API
(	I-API
g	I-API
)	I-API
;	O
Dimension	O
originalSize	O
=	O
super.getPreferredSize	B-API
(	I-API
)	I-API
;	O
int	O
gap	O
=	O
(	O
int	O
)	O
(	O
originalSize.height	B-API
*	O
0.2	O
)	O
;	O
int	O
x	O
=	O
originalSize.width	B-API
+	O
gap	O
;	O
int	O
y	O
=	O
gap	O
;	O
int	O
diameter	O
=	O
originalSize.height	B-API
-	O
(	O
gap	O
*	O
2	O
)	O
;	O
g.setColor	B-API
(	I-API
circleColor	I-API
)	I-API
;	O
g.fillOval	B-API
(	I-API
x	I-API
,	I-API
y	I-API
,	I-API
diameter	I-API
,	I-API
diameter	I-API
)	I-API
;	O
}	O
@	O
Override	O
public	O
Dimension	O
getPreferredSize	O
(	O
)	O
{	O
Dimension	O
size	O
=	O
super.getPreferredSize	B-API
(	I-API
)	I-API
;	O
size.width	O
+=	O
size.height	O
;	O
return	O
size	O
;	O
}	O
/*Test	O
the	O
button*/	O
public	O
static	O
void	O
main	O
(	O
String	O
[	O
]	O
args	O
)	O
{	O
MyButton	O
button	O
=	O
new	O
MyButton	O
(	O
``	O
Hello	O
,	O
World	O
!	O
``	O
)	O
;	O
JFrame	O
frame	O
=	O
new	O
JFrame	O
(	O
)	O
;	O
frame.setDefaultCloseOperation	B-API
(	I-API
JFrame.EXIT_ON_CLOSE	I-API
)	I-API
;	O
frame.setSize	B-API
(	I-API
400	I-API
,	I-API
400	I-API
)	I-API
;	O
Container	O
contentPane	O
=	O
frame.getContentPane	B-API
(	I-API
)	I-API
;	O
contentPane.setLayout	B-API
(	I-API
new	I-API
FlowLayout	I-API
(	I-API
)	I-API
)	I-API
;	O
contentPane.add	B-API
(	I-API
button	I-API
)	I-API
;	O
frame.setVisible	B-API
(	I-API
true	I-API
)	I-API
;	O
}	O
}	O
Note	O
that	O
by	O
overriding	O
paintComponent	O
that	O
the	O
contents	O
of	O
the	O
button	O
can	O
be	O
changed	O
,	O
but	O
that	O
the	O
border	O
is	O
painted	O
by	O
the	O
paintBorder	O
method	O
.	O
The	O
getPreferredSize	O
method	O
also	O
needs	O
to	O
be	O
managed	O
in	O
order	O
to	O
dynamically	O
support	O
changes	O
to	O
the	O
content	O
.	O
Care	O
needs	O
to	O
be	O
taken	O
when	O
measuring	O
font	O
metrics	O
and	O
image	O
dimensions	O
.	O
For	O
creating	O
a	O
control	O
that	O
you	O
can	O
rely	O
on	O
,	O
the	O
above	O
code	O
is	O
not	O
the	O
correct	O
approach	O
.	O
Dimensions	O
and	O
colours	O
are	O
dynamic	O
in	O
Swing	O
and	O
are	O
dependent	O
on	O
the	O
look	O
and	O
feel	O
being	O
used	O
.	O
Even	O
the	O
default	O
Metal	O
look	O
has	O
changed	O
across	O
JRE	O
versions	O
.	O
It	O
would	O
be	O
better	O
to	O
implement	O
AbstractButton	O
and	O
conform	O
to	O
the	O
guidelines	O
set	O
out	O
by	O
the	O
Swing	O
API	O
.	O
A	O
good	O
starting	O
point	O
is	O
to	O
look	O
at	O
the	O
javax.swing.LookAndFeel	B-API
and	O
javax.swing.UIManager	B-API
classes	O
.	O
http	O
:	O
//docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html	O
http	O
:	O
//docs.oracle.com/javase/8/docs/api/javax/swing/UIManager.html	O
Understanding	O
the	O
anatomy	O
of	O
LookAndFeel	O
is	O
useful	O
for	O
writing	O
controls	O
:	O
Creating	O
a	O
Custom	O
Look	O
and	O
Feel	O
