The	O
.Net	O
2.0	O
framework	O
namespace	O
supports	O
GZip	O
and	O
Deflate	O
algorithms	O
.	O
Here	O
are	O
two	O
methods	O
that	O
compress	O
and	O
decompress	O
a	O
byte	O
stream	O
which	O
you	O
can	O
get	O
from	O
your	O
file	O
object	O
.	O
You	O
can	O
subsitute	O
for	O
in	O
the	O
methods	O
below	O
to	O
use	O
that	O
algorithm	O
.	O
This	O
still	O
leaves	O
the	O
problem	O
of	O
handling	O
files	O
compressed	O
with	O
different	O
algorithms	O
though	O
.	O
public	O
static	O
byte	O
[	O
]	O
Compress	O
(	O
byte	O
[	O
]	O
data	O
)	O
{	O
MemoryStream	O
output	O
=	O
new	O
MemoryStream	B
(	I
)	I
;	O
GZipStream	O
gzip	O
=	O
new	O
GZipStream	B
(	I
output	I
,	I
CompressionMode.Compress	I
,	I
true	I
)	I
;	O
gzip.Write	B
(	I
data	I
,	I
0	I
,	I
data.Length	I
)	I
;	O
gzip.Close	B
(	I
)	I
;	O
return	O
output.ToArray	B
(	I
)	I
;	O
}	O
public	O
static	O
byte	O
[	O
]	O
Decompress	B
(	I
byte	I
[	I
]	I
data	I
)	I
{	O
MemoryStream	O
input	O
=	O
new	O
MemoryStream	B
(	I
)	I
;	O
input.Write	 B
(	I
data	I
,	I
0	I
,	I
data.Length	I
)	I
;	O
input.Position	O
=	O
0	O
;	O
GZipStream	O
gzip	O
=	O
new	O
GZipStream	B
(	I
input	I
,	I
CompressionMode.Decompress	I
,	I
true	I
)	I
;	O
MemoryStream	O
output	O
=	O
new	O
MemoryStream	B
(	I
)	I
;	O
byte	O
[	O
]	O
buff	O
=	O
new	O
byte	O
[	O
64	O
]	O
;	O
int	O
read	O
=	O
-1	O
;	O
read	O
=	O
gzip.Read	B
(	I
buff	I
,	I
0	I
,	I
buff.Length	I
)	I
;	O
while	O
(	O
read	O
0	O
)	O
{	O
output.Write	B
(	I
buff	I
,	I
0	I
,	I
read	I
)	I
;	O
read	O
=	O
gzip.Read	B
(	I
buff	I
,	I
0	I
,	I
buff.Length	I
)	I
;	O
}	O
gzip.Close	B
(	I
)	I
;	O
return	O
output.ToArray	B
(	I
)	I
;	O
}	O
