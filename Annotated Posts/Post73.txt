Basically	O
,	O
I	O
've	O
written	O
an	O
API	O
to	O
www.thetvdb.com	O
in	O
Python	O
.	O
The	O
current	O
code	O
can	O
be	O
found	O
here	O
.	O
It	O
grabs	O
data	O
from	O
the	O
API	O
as	O
requested	O
,	O
and	O
has	O
to	O
store	O
the	O
data	O
somehow	O
,	O
and	O
make	O
it	O
available	O
by	O
doing	O
:	O
print	O
tvdbinstance	O
[	O
1	O
]	O
[	O
23	O
]	O
[	O
'episodename	O
'	O
]	O
#	O
get	O
the	O
name	O
of	O
episode	O
23	O
of	O
season	O
What	O
is	O
the	O
``	O
best	O
''	O
way	O
to	O
abstract	O
this	O
data	O
within	O
the	O
Tvdb	O
(	O
)	O
class	O
?	O
I	O
originally	O
used	O
a	O
extended	O
Dict	O
(	O
)	O
that	O
automatically	O
created	O
sub-dicts	O
(	O
so	O
you	O
could	O
do	O
x	O
[	O
1	O
]	O
[	O
2	O
]	O
[	O
3	O
]	O
[	O
4	O
]	O
=	O
without	O
having	O
to	O
do	O
if	O
:	O
x	O
[	O
1	O
]	O
[	O
2	O
]	O
=	O
x	O
[	O
1	O
]	O
.has_key	O
(	O
2	O
)	O
and	O
so	O
on	O
)	O
Then	O
I	O
just	O
stored	O
the	O
data	O
by	O
doing	O
self.data	O
[	O
show_id	O
]	O
[	O
season_number	O
]	O
[	O
episode_number	O
]	O
[	O
attribute_name	O
]	O
=	O
This	O
worked	O
okay	O
,	O
but	O
there	O
was	O
no	O
easy	O
way	O
of	O
checking	O
if	O
x	O
[	O
3	O
]	O
[	O
24	O
]	O
was	O
supposed	O
to	O
exist	O
or	O
not	O
(	O
so	O
I	O
could	O
n't	O
raise	O
the	O
season_not_found	O
exception	O
)	O
Currently	O
it	O
's	O
using	O
four	O
classes	O
.	O
ShowContainer	O
,	O
Show	O
,	O
Season	O
and	O
Episode	O
.	O
Each	O
one	O
is	O
a	O
very	O
basic	O
dict	O
,	O
which	O
I	O
can	O
easily	O
add	O
extra	O
functionality	O
in	O
(	O
the	O
search	O
(	O
)	O
function	O
on	O
Show	O
(	O
)	O
for	O
example	O
)	O
.	O
Each	O
has	O
a	O
,	O
and	O
This	O
works	O
mostly	O
fine	O
,	O
I	O
can	O
check	O
in	O
Shows	O
if	O
it	O
has	O
that	O
season	O
in	O
it	O
's	O
self.data	O
dict	O
,	O
if	O
not	O
,	O
raise	O
season_not_found	O
.	O
Check	O
in	O
Season	O
(	O
)	O
if	O
it	O
has	O
that	O
episode	O
and	O
so	O
on	O
.	O
The	O
problem	O
now	O
is	O
it	O
's	O
presenting	O
itself	O
as	O
a	O
dict	O
,	O
but	O
does	O
n't	O
have	O
all	O
the	O
functionality	O
,	O
and	O
because	O
I	O
'm	O
overriding	O
the	O
_getitem_	O
and	O
_setitem_	O
functions	O
,	O
it	O
's	O
easy	O
to	O
accidently	O
recursively	O
call	O
_getitem_	O
(	O
so	O
I	O
'm	O
not	O
sure	O
if	O
extending	O
the	O
Dict	O
class	O
will	O
cause	O
problems	O
)	O
The	O
other	O
slight	O
problem	O
is	O
adding	O
data	O
into	O
the	O
dict	O
is	O
a	O
lot	O
more	O
work	O
than	O
the	O
old	O
Ddict	O
method	O
(	O
which	O
was	O
self.data	B-API
[	I-API
seas_no	I-API
]	I-API
[	I-API
ep_no	I-API
]	I-API
[	I-API
'attribute	I-API
'	I-API
]	I-API
=	B-API
)	O
.	O
See	O
_setItem	O
and	O
_setData	O
.	O
It	O
's	O
not	O
too	O
bad	O
,	O
since	O
it	O
's	O
currently	O
only	O
a	O
read-only	O
API	O
interface	O
(	O
so	O
the	O
users	O
of	O
the	O
API	O
should	O
only	O
ever	O
retrieve	O
data	O
,	O
not	O
add	O
more	O
)	O
,	O
but	O
it	O
's	O
hardly..	O
elegant..	O
I	O
think	O
the	O
series-of-classes	O
system	O
is	O
probably	O
the	O
best	O
way	O
,	O
but	O
does	O
anyone	O
have	O
a	O
better	O
idea	O
for	O
storing	O
the	O
data	O
?	O
And	O
would	O
extending	O
the	O
ShowContainer/etc	O
classes	O
with	O
Dict	O
cause	O
problems	O
?	O
