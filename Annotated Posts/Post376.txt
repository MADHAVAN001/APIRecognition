There	O
are	O
three	O
ways	O
to	O
iterate	O
over	O
a	O
result	O
set	O
.	O
The	O
best	O
way	O
in	O
terms	O
of	O
both	O
readability	O
and	O
performance	O
is	O
usually	O
to	O
use	O
the	O
built-in	O
cursor	O
iterator	O
.	O
curs.execute	B
(	I
'select	I
*	I
from	I
people	I
'	I
)	I
for	O
row	O
in	O
curs	O
:	O
print	O
row	O
You	O
can	O
fetch	O
all	O
the	O
rows	O
into	O
a	O
list	O
,	O
but	O
this	O
can	O
have	O
some	O
bad	O
side	O
effects	O
if	O
the	O
result	O
set	O
is	O
large	O
.	O
You	O
have	O
to	O
wait	O
for	O
the	O
entire	O
result	O
set	O
to	O
be	O
returned	O
to	O
your	O
client	O
process	O
.	O
You	O
may	O
eat	O
up	O
a	O
lot	O
of	O
memory	O
in	O
your	O
client	O
to	O
hold	O
the	O
built-up	O
list	O
.	O
It	O
may	O
take	O
a	O
while	O
for	O
Python	O
to	O
construct	O
and	O
deconstruct	O
the	O
list	O
which	O
you	O
are	O
going	O
to	O
immediately	O
discard	O
anyways	O
.	O
for	O
row	O
in	O
curs.fetchall	B
(	I
)	I
:	O
print	O
row	O
Finally	O
,	O
you	O
can	O
loop	O
over	O
the	O
result	O
set	O
fetching	O
one	O
row	O
at	O
a	O
time	O
.	O
In	O
general	O
,	O
there	O
's	O
no	O
particular	O
advantage	O
in	O
doing	O
this	O
over	O
using	O
the	O
iterator	O
.	O
If	O
there	O
is	O
something	O
in	O
your	O
programming	O
logic	O
that	O
seems	O
to	O
indicate	O
there	O
is	O
an	O
advantage	O
in	O
doing	O
this	O
,	O
perhaps	O
you	O
should	O
reconsider	O
your	O
programming	O
logic	O
.	O
row	O
=	O
curs.fetchone	B
(	I
)	I
while	O
row	O
:	O
print	O
row	O
row	O
=	O
curs.fetchone	B
(	I
)	I
