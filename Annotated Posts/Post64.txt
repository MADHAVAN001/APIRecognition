I	O
need	O
to	O
be	O
able	O
to	O
manipulate	O
a	O
large	O
(	O
10^7	O
nodes	O
)	O
graph	O
in	O
python	O
.	O
The	O
data	O
corresponding	O
to	O
each	O
node/edge	O
is	O
minimal	O
,	O
say	O
,	O
a	O
small	O
number	O
of	O
strings	O
.	O
What	O
is	O
the	O
most	O
efficient	O
,	O
in	O
terms	O
of	O
memory	O
and	O
speed	O
,	O
way	O
of	O
doing	O
this	O
?	O
A	O
dict	O
of	O
dicts	O
is	O
more	O
flexible	O
and	O
simpler	O
to	O
implement	O
,	O
but	O
I	O
intuitively	O
expect	O
a	O
list	O
of	O
lists	O
to	O
be	O
faster	O
.	O
The	O
list	O
option	O
would	O
also	O
require	O
that	O
I	O
keep	O
the	O
data	O
separate	O
from	O
the	O
structure	O
,	O
while	O
dicts	O
would	O
allow	O
for	O
something	O
of	O
the	O
sort	O
:	O
graph	O
[	O
I	O
]	O
[	O
J	O
]	O
[	O
``	O
Property	O
''	O
]	O
=	O
''	O
value	O
''	O
What	O
would	O
you	O
suggest	O
?	O
Yes	O
,	O
I	O
should	O
have	O
been	O
a	O
bit	O
clearer	O
on	O
what	O
I	O
mean	O
by	O
efficiency	O
.	O
In	O
this	O
particular	O
case	O
I	O
mean	O
it	O
in	O
terms	O
of	O
random	O
access	O
retrieval	O
.	O
Loading	O
the	O
data	O
in	O
to	O
memory	O
is	O
n't	O
a	O
huge	O
problem	O
.	O
That	O
's	O
done	O
once	O
and	O
for	O
all	O
.	O
The	O
time	O
consuming	O
part	O
is	O
visiting	O
the	O
nodes	O
so	O
I	O
can	O
extract	O
the	O
information	O
and	O
measure	O
the	O
metrics	O
I	O
'm	O
interested	O
in	O
.	O
I	O
had	O
n't	O
considered	O
making	O
each	O
node	O
a	O
class	O
(	O
properties	O
are	O
the	O
same	O
for	O
all	O
nodes	O
)	O
but	O
it	O
seems	O
like	O
that	O
would	O
add	O
an	O
extra	O
layer	O
of	O
overhead	O
?	O
I	O
was	O
hoping	O
someone	O
would	O
have	O
some	O
direct	O
experience	O
with	O
a	O
similar	O
case	O
that	O
they	O
could	O
share	O
.	O
After	O
all	O
,	O
graphs	O
are	O
one	O
of	O
the	O
most	O
common	O
abstractions	O
in	O
CS	O
.	O
