I	O
've	O
never	O
been	O
completely	O
happy	O
with	O
the	O
way	O
exception	O
handling	O
works	O
,	O
there	O
's	O
a	O
lot	O
exceptions	O
and	O
try/catch	O
brings	O
to	O
the	O
table	O
(	O
stack	O
unwinding	O
,	O
etc	O
.	O
)	O
,	O
but	O
it	O
seems	O
to	O
break	O
a	O
lot	O
of	O
the	O
OO	O
model	O
in	O
the	O
process	O
.	O
Anyway	O
,	O
here	O
's	O
the	O
problem	O
:	O
Let	O
's	O
say	O
you	O
have	O
some	O
class	O
which	O
wraps	O
or	O
includes	O
networked	O
file	O
IO	O
operations	O
(	O
e.g	O
.	O
reading	O
and	O
writing	O
to	O
some	O
file	O
at	O
some	O
particular	O
UNC	O
path	O
somewhere	O
)	O
.	O
For	O
various	O
reasons	O
you	O
do	O
n't	O
want	O
those	O
IO	O
operations	O
to	O
fail	O
,	O
so	O
if	O
you	O
detect	O
that	O
they	O
fail	O
you	O
retry	O
them	O
and	O
you	O
keep	O
retrying	O
them	O
until	O
they	O
succeed	O
or	O
you	O
reach	O
a	O
timeout	O
.	O
I	O
already	O
have	O
a	O
convenient	O
RetryTimer	O
class	O
which	O
I	O
can	O
instantiate	O
and	O
use	O
to	O
sleep	O
the	O
current	O
thread	O
between	O
retries	O
and	O
determine	O
when	O
the	O
timeout	O
period	O
has	O
elapsed	O
,	O
etc	O
.	O
The	O
problem	O
is	O
that	O
you	O
have	O
a	O
bunch	O
of	O
IO	O
operations	O
in	O
several	O
methods	O
of	O
this	O
class	O
,	O
and	O
you	O
need	O
to	O
wrap	O
each	O
of	O
them	O
in	O
try-catch	O
/	O
retry	O
logic	O
.	O
Here	O
's	O
an	O
example	O
code	O
snippet	O
:	O
RetryTimer	O
fileIORetryTimer	O
=	O
new	O
)	O
;	O
bool	O
success	O
=	O
false	O
;	O
while	O
(	O
!	O
success	O
)	O
{	O
try	O
{	O
//	O
do	O
some	O
file	O
IO	O
which	O
may	O
succeed	O
or	O
fail	O
success	O
=	O
true	O
;	O
}	O
catch	O
(	O
IOException	O
e	O
)	O
{	O
if	O
(	O
fileIORetryTimer.HasExceededRetryTimeout	B-API
)	O
{	O
throw	O
e	O
;	O
}	O
;	O
RetryTimer	O
(	O
TimeSpan.FromHours	B-API
(	I-API
10	I-API
)	I-API
fileIORetryTimer.SleepUntilNextRetry	B-API
(	I-API
)	I-API
So	O
,	O
how	O
do	O
you	O
avoid	O
duplicating	O
most	O
of	O
this	O
code	O
for	O
every	O
file	O
IO	O
operation	O
throughout	O
the	O
class	O
?	O
My	O
solution	O
was	O
to	O
use	O
anonymous	O
delegate	O
blocks	O
and	O
a	O
single	O
method	O
in	O
the	O
class	O
which	O
executed	O
the	O
delegate	O
block	O
passed	O
to	O
it	O
.	O
This	O
allowed	O
me	O
to	O
do	O
things	O
like	O
this	O
in	O
other	O
methods	O
:	O
{	B-API
//	B-API
some	B-API
code	B-API
block	B-API
}	B-API
(	O
delegate	O
(	O
)	O
I	O
like	O
this	O
somewhat	O
,	O
but	O
it	O
leaves	O
a	O
lot	O
to	O
be	O
desired	O
.	O
I	O
'd	O
like	O
to	O
hear	O
how	O
other	O
people	O
would	O
solve	O
this	O
sort	O
of	O
problem	O
.	O
