I	O
'm	O
not	O
sure	O
why	O
you	O
would	O
want	O
to	O
do	O
this	O
in	O
the	O
first	O
place	O
.	O
The	O
resulting	O
set	O
for	O
any	O
moderately	O
large	O
values	O
of	O
x	O
and	O
y	O
will	O
be	O
huge	O
,	O
and	O
will	O
grow	O
exponentially	O
as	O
x	O
and/or	O
y	O
get	O
bigger	O
.	O
Lets	O
say	O
your	O
set	O
of	O
possible	O
characters	O
is	O
the	O
26	O
lowercase	O
letters	O
of	O
the	O
alphabet	O
,	O
and	O
you	O
ask	O
your	O
application	O
to	O
generate	O
all	O
permutations	O
where	O
length	O
=	O
5	O
.	O
Assuming	O
you	O
do	O
n't	O
run	O
out	O
of	O
memory	O
you	O
'll	O
get	O
11,881,376	O
(	O
i.e	O
.	O
26	O
to	O
the	O
power	O
of	O
5	O
)	O
strings	O
back	O
.	O
Bump	O
that	O
length	O
up	O
to	O
6	O
,	O
and	O
you	O
'll	O
get	O
308,915,776	O
strings	O
back	O
.	O
These	O
numbers	O
get	O
painfully	O
large	O
,	O
very	O
quickly	O
.	O
Here	O
's	O
a	O
solution	O
I	O
put	O
together	O
in	O
Java	O
.	O
You	O
'll	O
need	O
to	O
provide	O
two	O
runtime	O
arguments	O
(	O
corresponding	O
to	O
x	O
and	O
y	O
)	O
.	O
Have	O
fun	O
.	O
public	B
class	B
GeneratePermutations	B
{	B
public	B
static	B
void	B
{	B
int	B
lower	B
=	B
;	B
int	B
upper	B
=	B
;	B
if	B
(	B
upper	I
lower	B
||	B
upper	B
==	B
0	B
||	B
lower	B
==	B
0	B
)	I
{	B
;	B
}	B
for	B
(	B
int	I
length	B
=	B
lower	B
;	I
length	B
=	B
upper	B
;	I
length++	B
)	I
{	B
;	B
}	B
}	B
private	B
static	B
void	B
{	B
if	B
(	B
length	I
=	B
0	B
)	I
{	B
;	B
}	B
else	B
{	B
for	B
(	B
char	I
c	B
=	B
'a	B
'	I
;	I
c	B
=	B
'z	B
'	I
;	I
c++	B
)	I
{	B
;	B
}	B
}	B
(	O
String	O
[	O
]	O
args	O
)	O
Integer.parseInt	B
(	I
args	I
[	I
0	I
]	I
)	I
Integer.parseInt	B
(	I
args	I
[	I
1	I
]	I
)	I
System.exit	B
(	I
0	I
)	I
(	O
length	O
,	O
``	O
''	O
)	O
(	O
int	O
length	O
,	O
String	O
partial	O
)	O
System.out.println	B
(	I
partial	I
)	I
(	O
length	O
-	O
1	O
,	O
partial	O
+	O
c	O
)	O
