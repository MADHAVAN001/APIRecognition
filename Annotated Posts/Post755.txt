This	O
is	O
part	O
of	O
a	O
solution	O
I	O
use	O
on	O
a	O
local	O
intranet	O
.	O
Some	O
of	O
the	O
variables	O
you	O
will	O
have	O
to	O
collect	O
yourself	O
as	O
I	O
pull	O
them	O
from	O
a	O
database	O
but	O
you	O
may	O
pull	O
them	O
from	O
somewhere	O
else	O
.	O
The	O
only	O
extra	O
but	O
I	O
've	O
got	O
in	O
there	O
is	O
a	O
function	O
called	O
getMimeType	B-API
which	O
connects	O
to	O
the	O
database	O
and	O
pulls	O
back	O
the	O
correct	O
mine	O
type	O
based	O
on	O
file	O
extension	O
.	O
This	O
defaults	O
to	O
application/octet-stream	O
if	O
none	O
is	O
found	O
.	O
//	O
Clear	O
the	O
response	O
buffer	O
incase	O
there	O
is	O
anything	O
already	O
in	O
;	O
Response.Buffer	B-API
=	I-API
true	I-API
;	O
//	O
Read	O
the	O
original	O
file	O
from	O
diskFileStream	B-API
myFileStream	I-API
=	I-API
new	I-API
;	O
long	O
FileSize	O
=	O
myFileStream.Length	B-API
;	O
byte	O
[	O
]	O
Buffer	B-API
=	I-API
new	I-API
;	O
//	O
Tell	O
the	O
browse	O
stuff	O
about	O
the	O
)	O
;	O
Response.ContentType	B-API
=	O
;	O
//	O
Send	O
the	O
data	O
to	O
the	O
it.Response.Clear	B-API
(	I-API
)	I-API
(	O
sPath	O
,	O
FileMode.Open	B-API
)	O
[	O
(	O
int	O
)	O
FileSize	O
]	O
;	O
myFileStream.Read	B-API
(	I-API
Buffer	I-API
,	I-API
0	I-API
,	I-API
(	I-API
int	I-API
)	I-API
FileSize	I-API
)	I-API
;	O
myFileStream.Close	B-API
(	I-API
)	I-API
(	O
``	O
Content-Length	O
''	O
,	O
FileSize.ToString	B-API
(	I-API
)	I-API
;	O
Response.AddHeader	B-API
(	I-API
)	I-API
``	O
Content-Disposition	O
''	O
,	O
``	O
inline	O
;	O
filename=	O
''	O
+	O
sFilename.Replace	B-API
(	I-API
``	I-API
``	I-API
,	I-API
''	I-API
_	I-API
''	I-API
)	I-API
(	O
sExtention	O
,	O
oConnection	O
)	O
browserResponse.BinaryWrite	B-API
(	I-API
Buffer	I-API
)	I-API
;	O
Response.End	B-API
(	I-API
)	I-API
