I	O
have	O
a	O
little	O
game	O
written	O
in	O
C	O
#	O
.	O
It	O
uses	O
a	O
database	O
as	O
back-end	O
.	O
It	O
's	O
a	O
trading	O
card	O
game	O
,	O
and	O
I	O
wanted	O
to	O
implement	O
the	O
function	O
of	O
the	O
cards	O
as	O
a	O
script	O
.	O
What	O
I	O
mean	O
is	O
that	O
I	O
essentially	O
have	O
an	O
interface	O
,	O
,	O
which	O
a	O
card	O
class	O
implements	O
(	O
public	B-API
class	B-API
Card056	B-API
:	B-API
)	O
and	O
which	O
contains	O
function	O
that	O
are	O
called	O
by	O
the	O
game	O
.	O
Now	O
,	O
to	O
make	O
the	O
thing	O
maintainable/moddable	O
,	O
I	O
would	O
like	O
to	O
have	O
the	O
class	O
for	O
each	O
card	O
as	O
source	O
code	O
in	O
the	O
database	O
and	O
essentially	O
compile	O
it	O
on	O
first	O
use	O
.	O
So	O
when	O
I	O
have	O
to	O
add/change	O
a	O
card	O
,	O
I	O
'll	O
just	O
add	O
it	O
to	O
the	O
database	O
and	O
tell	O
my	O
application	O
to	O
refresh	O
,	O
without	O
needing	O
any	O
assembly	O
deployment	O
(	O
especially	O
since	O
we	O
would	O
be	O
talking	O
about	O
1	O
assembly	O
per	O
card	O
which	O
means	O
hundreds	O
of	O
assemblies	O
)	O
.	O
Is	O
that	O
possible	O
?	O
Register	O
a	O
class	O
from	O
a	O
source	O
file	O
and	O
then	O
instantiate	O
it	O
,	O
etc	O
.	O
ICard	O
Cards	O
[	O
current	O
]	O
=	O
new	O
MyGame.CardLibrary.Card056	O
(	O
)	O
;	O
Cards	O
[	O
current	O
]	O
.OnEnterPlay	O
(	O
ref	O
currentGameState	O
)	O
;	O
The	O
language	O
is	O
C	O
#	O
,	O
but	O
extra	O
bonus	O
if	O
it	O
's	O
possible	O
to	O
write	O
the	O
script	O
in	O
any	O
.NET	O
language	O
.	O
