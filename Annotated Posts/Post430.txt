There	O
are	O
several	O
ways	O
to	O
do	O
this	O
.	O
Common	O
methods	O
use	O
recursion	O
,	O
memoization	O
,	O
or	O
dynamic	O
programming	O
.	O
The	O
basic	O
idea	O
is	O
that	O
you	O
produce	O
a	O
list	O
of	O
all	O
strings	O
of	O
length	O
1	O
,	O
then	O
in	O
each	O
iteration	O
,	O
for	O
all	O
strings	O
produced	O
in	O
the	O
last	O
iteration	O
,	O
add	O
that	O
string	O
concatenated	O
with	O
each	O
character	O
in	O
the	O
string	O
individually	O
.	O
(	O
the	O
variable	O
index	O
in	O
the	O
code	O
below	O
keeps	O
track	O
of	O
the	O
start	O
of	O
the	O
last	O
and	O
the	O
next	O
iteration	O
)	O
Some	O
pseudocode	O
:	O
list	O
=	O
originalString.split	B
(	I
''	I
)	I
index	O
=	O
(	O
0,0	O
)	O
list	O
=	O
[	O
``	O
''	O
]	O
for	O
iteration	O
n	O
in	O
1	O
to	O
y	O
:	O
index	O
=	O
(	O
index	O
[	O
1	O
]	O
,	O
len	O
(	O
list	O
)	O
)	O
for	O
string	O
s	O
in	O
list.subset	B
(	I
index	I
[	I
0	I
]	I
to	I
end	I
)	I
:	O
for	O
character	O
c	O
in	O
originalString	O
:	O
list.add	B
(	I
s	I
+	I
c	I
)	I
you	O
'd	O
then	O
need	O
to	O
remove	O
all	O
strings	O
less	O
than	O
x	O
in	O
length	O
,	O
they	O
'll	O
be	O
the	O
first	O
(	O
x-1	O
)	O
*	O
len	B
(	I
originalString	I
)	I
entries	O
in	O
the	O
list	O
.	O
