In	O
the	O
first	O
case	O
,	O
you	O
have	O
a	O
widening	O
conversion	O
happening	O
.	O
This	O
can	O
be	O
see	O
when	O
runinng	O
the	O
``	O
javap	O
''	O
utility	O
program	O
(	O
included	O
w/	O
the	O
JDK	O
)	O
,	O
on	O
the	O
compiled	O
class	O
:	O
public	O
static	O
void	O
;	O
Code	O
:	O
0	O
:	O
iconst_	O
5	O
1	O
:	O
istore_	O
1	O
2	O
:	O
iload_	O
1	O
3	O
:	O
i2l	O
4	O
:	O
invokestatic	O
#	O
6	O
;	O
//Method	O
V	O
7	O
:	O
main	O
(	O
java.lang.String	B-API
[	I-API
]	I-API
)	O
hello	O
:	O
(	O
J	O
)	O
Clearly	O
,	O
you	O
see	O
the	O
I2L	O
,	O
which	O
is	O
the	O
mnemonic	O
for	O
the	O
widening	O
Integer-To-Long	O
bytecode	O
instruction	O
.	O
See	O
reference	O
here	O
.	O
And	O
in	O
the	O
other	O
case	O
,	O
replacing	O
the	O
``	O
long	O
x	O
''	O
with	O
the	O
object	O
``	O
Long	O
x	O
''	O
signature	O
,	O
you	O
'll	O
have	O
this	O
code	O
in	O
the	O
main	O
method	O
:	O
public	O
static	O
void	O
;	O
Code	O
:	O
0	O
:	O
iconst_	O
5	O
1	O
:	O
istore_	O
1	O
2	O
:	O
iload_	O
1	O
3	O
:	O
invokestatic	O
#	O
6	O
;	O
//Metho	O
Ljava/lang/Integer	B-API
;	O
6	O
:	O
invokestatic	O
#	O
7	O
;	O
//Method	O
V	O
9	O
:	O
main	O
(	O
java.lang.String	B-API
[	I-API
]	I-API
)	O
java/lang/Integer.valueOf	B-API
:	I-API
(	I-API
I	I-API
)	I-API
hello	O
:	O
(	O
Ljava/lang/Integer	O
;	O
)	O
So	O
you	O
see	O
the	O
compiler	O
has	O
created	O
the	O
instruction	O
Integer.valueOf	B-API
(	I-API
int	I-API
)	I-API
,	O
to	O
box	O
the	O
primitive	O
inside	O
the	O
wrapper	O
.	O
