In	O
the	O
first	O
case	O
,	O
you	O
have	O
a	O
widening	O
conversion	O
happening	O
.	O
This	O
can	O
be	O
see	O
when	O
runinng	O
the	O
``	O
javap	O
''	O
utility	O
program	O
(	O
included	O
w/	O
the	O
JDK	O
)	O
,	O
on	O
the	O
compiled	O
class	O
:	O
public	B
static	B
void	B
;	B
Code	B
:	I
0	B
:	I
iconst_	B
5	B
1	B
:	I
istore_	B
1	B
2	B
:	I
iload_	B
1	B
3	B
:	I
i2l	B
4	B
:	I
invokestatic	B
#	B
6	I
;	I
//Method	B
V	B
7	B
:	I
main	B
(	I
java.lang.String	I
[	I
]	I
)	I
hello	B
:	I
(	I
J	I
)	I
Clearly	O
,	O
you	O
see	O
the	O
I2L	O
,	O
which	O
is	O
the	O
mnemonic	O
for	O
the	O
widening	O
Integer-To-Long	O
bytecode	O
instruction	O
.	O
See	O
reference	O
here	O
.	O
And	O
in	O
the	O
other	O
case	O
,	O
replacing	O
the	O
``	O
long	O
x	O
''	O
with	O
the	O
object	O
``	O
Long	O
x	O
''	O
signature	O
,	O
you	O
'll	O
have	O
this	O
code	O
in	O
the	O
main	O
method	O
:	O
public	B
static	B
void	B
;	B
Code	B
:	I
0	B
:	I
iconst_	B
5	B
1	B
:	I
istore_	B
1	B
2	B
:	I
iload_	B
1	B
3	B
:	I
invokestatic	B
#	B
6	I
;	I
//Method	B
Ljava/lang/Integer	B
;	I
6	B
:	I
invokestatic	B
#	B
7	I
;	I
//Method	B
V	B
9	B
:	I
main	B
(	I
java.lang.String	I
[	I
]	I
)	I
java/lang/Integer.valueOf	B
:	I
(	I
I	I
)	I
hello	B
:	I
(	I
Ljava/lang/Integer	I
;	I
)	I
So	O
you	O
see	O
the	O
compiler	O
has	O
created	O
the	O
instruction	O
Integer.valueOf	O
(	O
int	O
)	O
,	O
to	O
box	O
the	O
primitive	O
inside	O
the	O
wrapper	O
.	O
