Static	B-API
methods	O
are	O
not	O
instantiated	O
as	O
such	O
,	O
they	O
're	O
just	O
available	O
without	O
an	O
object	O
reference	O
.	O
A	O
call	O
to	O
a	O
static	B-API
method	O
is	O
done	O
through	O
the	O
class	O
name	O
,	O
not	O
through	O
an	O
object	O
reference	O
,	O
and	O
the	O
IL	O
code	O
to	O
call	O
it	O
will	O
call	O
the	O
abstract	O
method	O
through	O
the	O
name	O
of	O
the	O
class	O
that	O
defined	O
it	O
,	O
not	O
necessarily	O
the	O
name	O
of	O
the	O
class	O
you	O
used	O
.	O
Let	O
me	O
show	O
an	O
example	O
.	O
With	O
the	O
following	O
code	O
:	O
public	O
class	O
A	O
{	O
public	O
static	B-API
void	I-API
{	I-API
}	I-API
}	O
public	O
class	B-API
B	I-API
:	I-API
Test	I-API
(	I-API
)	I-API
If	O
you	O
call	O
B.Test	B-API
,	O
like	O
this	O
:	O
class	O
Program	O
{	O
static	B-API
void	I-API
{	I-API
;	I-API
(	I-API
string	B-API
[	I-API
]	I-API
args	O
)	O
B.Test	B-API
(	I-API
)	I-API
Then	O
the	O
actual	O
code	O
inside	O
the	O
Main	O
method	O
is	O
as	O
follows	O
:	O
.entrypoint.maxstack	B-API
8L0000	O
:	O
nop	O
L0001	O
:	O
call	O
void	O
L0006	O
:	O
nop	O
L0007	O
:	O
ret	O
ConsoleApplication1.A	B-API
:	I-API
:Test	I-API
(	I-API
)	I-API
As	O
you	O
can	O
see	O
,	O
the	O
call	O
is	O
made	O
to	O
A.Test	B-API
,	O
because	O
it	O
was	O
the	O
A	O
class	O
that	O
defined	O
it	O
,	O
and	O
not	O
to	O
B.Test	B-API
,	O
even	O
though	O
you	O
can	O
write	O
the	O
code	O
that	O
way	O
.	O
If	O
you	O
had	O
class	O
types	O
,	O
like	O
in	O
Delphi	O
,	O
where	O
you	O
can	O
make	O
a	O
variable	O
referring	O
to	O
a	O
type	O
and	O
not	O
an	O
object	O
,	O
you	O
would	O
have	O
more	O
use	O
for	O
virtual	O
and	O
thus	O
abstract	O
static	B-API
methods	O
(	O
and	O
also	O
constructors	O
)	O
,	O
but	O
they	O
are	O
n't	O
available	O
and	O
thus	O
static	O
calls	O
are	O
non-virtual	O
in	O
.NET	B-API
.	O
I	O
realize	O
that	O
the	O
IL	O
designers	O
could	O
allow	O
the	O
code	O
to	O
be	O
compiled	O
to	O
call	O
B.Test	B-API
,	O
and	O
resolve	O
the	O
call	O
at	O
runtime	O
,	O
but	O
it	O
still	O
would	O
n't	O
be	O
virtual	O
,	O
as	O
you	O
would	O
still	O
have	O
to	O
write	O
some	O
kind	O
of	O
class	O
name	O
there	O
.	O
Virtual	O
methods	O
,	O
and	O
thus	O
abstract	O
ones	O
,	O
are	O
only	O
useful	O
when	O
you	O
're	O
using	O
a	O
variable	O
which	O
,	O
at	O
runtime	O
,	O
can	O
contain	O
many	O
different	O
types	O
of	O
objects	O
,	O
and	O
you	O
thus	O
want	O
to	O
call	O
the	O
right	O
method	O
for	O
the	O
current	O
object	O
you	O
have	O
in	O
the	O
variable	O
.	O
With	O
static	O
methods	O
you	O
need	O
to	O
go	O
through	O
a	O
class	O
name	O
anyway	O
,	O
so	O
the	O
exact	O
method	O
to	O
call	O
is	O
known	O
at	O
compile	O
time	O
because	O
it	O
ca	O
n't	O
and	O
wo	O
n't	O
change	O
.	O
Thus	O
,	O
virtual/abstract	O
static	O
methods	O
are	O
not	O
available	O
in	O
.NET	B-API
.	O
