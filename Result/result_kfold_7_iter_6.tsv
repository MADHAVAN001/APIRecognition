Using	O	O
the	O	O
3.5	O	O
compiler	O	O
you	O	O
can	O	O
use	O	O
an	O	O
Extension	O	O
Method	O	O
:	O	O
public	B-API	O
static	B-API	O
void	B-API	O
{	B-API	O
//	B-API	O
(	O	O
this	O	O
string	B-API	O
s	I-API	O
)	O	O
You	O	O
can	O	O
use	O	O
this	O	O
on	O	O
a	O	O
CLR	O	O
2.0	O	O
targeted	O	O
project	O	O
(	O	O
3.5	O	O
compiler	O	O
)	O	O
by	O	O
including	O	O
this	O	O
hack	O	O
:	O	O
namespace	O	O
System.Runtime.CompilerServices	B-API	B-API
{	O	O
]	O	O
public	O	O
sealed	O	O
class	O	O
ExtensionAttribute	O	O
:	O	O
Attribute	B-API	O
{	I-API	O
AttributeUsage	I-API	O
(	B-API	O
AttributeTargets.Method	B-API	B-API
|	O	O
AttributeTargets.Class	B-API	B-API
|	O	O
AttributeTargets.Assembly	B-API	B-API
)	O	O
It	O	O
sounds	O	O
like	O	O
you	O	O
're	O	O
talking	O	O
about	O	O
C	O	O
#	O	O
's	O	O
Extension	O	O
Methods	O	O
.	O	O
You	O	O
add	O	O
functionality	O	O
to	O	O
existing	O	O
classes	O	O
by	O	O
inserting	O	O
the	O	O
``	O	O
this	O	O
''	O	O
keyword	O	O
before	O	O
the	O	O
first	O	O
parameter	O	O
.	O	O
The	O	O
method	O	O
has	O	O
to	O	O
be	O	O
a	O	O
static	O	O
method	O	O
in	O	O
a	O	O
static	O	O
class	O	O
.	O	O
Strings	O	O
in	O	O
.NET	O	O
already	O	O
have	O	O
a	O	O
``	O	O
Trim	O	O
''	O	O
method	O	O
,	O	O
so	O	O
I	O	O
'll	O	O
use	O	O
another	O	O
example.public	O	O
static	O	O
class	O	O
MyStringEtensions	O	O
{	O	O
public	O	O
static	O	O
bool	O	O
ContainsMabster	O	O
(	O	O
this	O	O
string	O	O
s	O	O
)	O	O
{	O	O
return	O	O
s.Contains	B-API	B-API
(	I-API	I-API
``	I-API	I-API
Mabster	I-API	I-API
''	I-API	I-API
)	I-API	I-API
;	O	O
}	O	O
}	O	O
So	O	O
now	O	O
every	O	O
string	O	O
has	O	O
a	O	O
tremendously	O	O
useful	O	O
ContainsMabster	O	O
method	O	O
,	O	O
which	O	O
I	O	O
can	O	O
use	O	O
like	O	O
this	O	O
:	O	O
if	O	O
(	O	O
``	O	O
Why	O	O
hello	O	O
there	O	O
,	O	O
Mabster	O	O
!	O	O
``	O	O
.ContainsMabster	B-API	B-API
(	I-API	I-API
)	I-API	I-API
)	O	O
{	O	O
/*	O	O
...	O	O
*/	O	O
}	O	O
Note	O	O
that	O	O
you	O	O
can	O	O
also	O	O
add	O	O
extension	O	O
methods	O	O
to	O	O
interfaces	O	O
(	O	O
eg	O	O
IList	O	O
)	O	O
,	O	O
which	O	O
means	O	O
that	O	O
any	O	O
class	O	O
implementing	O	O
that	O	O
interface	O	O
will	O	O
also	O	O
pick	O	O
up	O	O
that	O	O
new	O	O
method	O	O
.	O	O
Any	O	O
extra	O	O
parameters	O	O
you	O	O
declare	O	O
in	O	O
the	O	O
extension	O	O
method	O	O
(	O	O
after	O	O
the	O	O
first	O	O
``	O	O
this	O	O
''	O	O
parameter	O	O
)	O	O
are	O	O
treated	O	O
as	O	O
normal	O	O
parameters	O	O
.	O	O
I	O	O
'm	O	O
not	O	O
a	O	O
Java	O	O
developer	O	O
,	O	O
but	O	O
just	O	O
from	O	O
the	O	O
sound	O	O
of	O	O
it	O	O
,	O	O
it	O	O
seems	O	O
like	O	O
an	O	O
is	O	O
called	O	O
for	O	O
if	O	O
you	O	O
do	O	O
n't	O	O
want	O	O
null	O	O
to	O	O
be	O	O
an	O	O
allowed	O	O
value	O	O
,	O	O
and	O	O
the	O	O
would	O	O
be	O	O
thrown	O	O
if	O	O
you	O	O
were	O	O
trying	O	O
to	O	O
use	O	O
a	O	O
variable	O	O
that	O	O
turns	O	O
out	O	O
to	O	O
be	O	O
null	O	O
.	O	O
If	O	O
it	O	O
's	O	O
a	O	O
setter	O	O
method	O	O
and	O	O
null	O	O
is	O	O
being	O	O
passed	O	O
to	O	O
it	O	O
,	O	O
I	O	O
think	O	O
it	O	O
would	O	O
make	O	O
more	O	O
sense	O	O
to	O	O
throw	O	O
an	O	O
IllegalArgumentException	B-API	O
.	O	O
A	O	O
NullPointerException	B-API	O
seems	O	O
to	O	O
make	O	O
more	O	O
sense	O	O
in	O	O
the	O	O
case	O	O
where	O	O
you	O	O
're	O	O
attempting	O	O
to	O	O
actually	O	O
use	O	O
the	O	O
null	O	O
.	O	O
So	O	O
,	O	O
if	O	O
you	O	O
're	O	O
using	O	O
it	O	O
and	O	O
it	O	O
's	O	O
null	O	O
,	O	O
NullPointer	O	O
.	O	O
If	O	O
it	O	O
's	O	O
being	O	O
passed	O	O
in	O	O
and	O	O
it	O	O
's	O	O
null	O	O
,	O	O
IllegalArgument	B-API	O
.	O	O
I	O	O
think	O	O
you	O	O
should	O	O
definitely	O	O
throw	O	O
a	O	O
IllegalArgumentException	B-API	O
and	O	O
thus	O	O
fail-fast	O	O
.	O	O
Let	O	O
other	O	O
developers	O	O
know	O	O
by	O	O
marking	O	O
it	O	O
in	O	O
the	O	O
JavaDocs	O	O
and	O	O
also	O	O
define	O	O
constraints	O	O
on	O	O
your	O	O
methods	O	O
,	O	O
so	O	O
that	O	O
they	O	O
see	O	O
what	O	O
happens	O	O
when	O	O
they	O	O
pass	O	O
an	O	O
invalid	O	O
objects	O	O
.	O	O
I	O	O
wrote	O	O
about	O	O
this	O	O
a	O	O
couple	O	O
of	O	O
weeks	O	O
ago	O	O
,	O	O
if	O	O
you	O	O
want	O	O
to	O	O
follow	O	O
up	O	O
.	O	O
I	O	O
tend	O	O
to	O	O
follow	O	O
the	O	O
design	O	O
of	O	O
JDK	O	O
libraries	O	O
,	O	O
especially	O	O
Collections	O	O
and	O	O
Concurrency	O	O
(	O	O
Joshua	O	O
Bloch	O	O
,	O	O
Doug	O	O
Lea	O	O
,	O	O
those	O	O
guys	O	O
know	O	O
how	O	O
to	O	O
design	O	O
solid	O	O
APIs	O	O
)	O	O
.	O	O
Anyway	O	O
,	O	O
many	O	O
APIs	O	O
in	O	O
the	O	O
JDK	O	O
pro-actively	O	O
throws	O	O
.	O	O
For	O	O
example	O	O
,	O	O
the	O	O
Javadoc	O	O
for	O	O
states	O	O
:	O	O
@	O	O
throws	O	O
NullPointerException	B-API	O
if	O	O
the	O	O
key	O	O
is	O	O
null	O	O
and	O	O
this	O	O
map	O	O
does	O	O
not	O	O
permit	O	O
null	O	O
keys	O	O
(	O	O
optional	O	O
)	O	O
.	O	O
It	O	O
's	O	O
perfectly	O	O
valid	O	O
to	O	O
throw	O	O
your	O	O
own	O	O
NPE	O	O
.	O	O
The	O	O
convention	O	O
is	O	O
to	O	O
include	O	O
the	O	O
parameter	O	O
name	O	O
which	O	O
was	O	O
null	O	O
in	O	O
the	O	O
message	O	O
of	O	O
the	O	O
exception	O	O
.	O	O
The	O	O
pattern	O	O
goes	O	O
:	O	O
public	O	O
void	O	O
someMethod	O	O
(	O	O
Object	O	O
mustNotBeNull	O	O
)	O	O
{	O	O
if	O	O
(	O	O
mustNotBeNull	O	O
==	O	O
null	O	O
)	O	O
{	O	O
throw	O	O
new	O	O
NullPointerException	B-API	O
(	O	O
``	O	O
mustNotBeNull	O	O
must	O	O
not	O	O
be	O	O
null	O	O
''	O	O
)	O	O
;	O	O
}	O	O
}	O	O
Whatever	O	O
you	O	O
do	O	O
,	O	O
do	O	O
n't	O	O
allow	O	O
a	O	O
bad	O	O
value	O	O
to	O	O
get	O	O
set	O	O
and	O	O
throw	O	O
an	O	O
exception	O	O
later	O	O
when	O	O
other	O	O
code	O	O
attempts	O	O
to	O	O
use	O	O
it	O	O
.	O	O
That	O	O
makes	O	O
debugging	O	O
a	O	O
nightmare	O	O
.	O	O
You	O	O
should	O	O
always	O	O
the	O	O
follow	O	O
the	O	O
``	O	O
fail-fast	O	O
''	O	O
principle	O	O
.	O	O
I	O	O
've	O	O
tried	O	O
finding	O	O
the	O	O
ultimate	O	O
compiler	O	O
call	O	O
earlier	O	O
and	O	O
I	O	O
gave	O	O
up	O	O
.	O	O
There	O	O
's	O	O
quite	O	O
a	O	O
number	O	O
of	O	O
layers	O	O
of	O	O
interfaces	O	O
and	O	O
virtual	O	O
classes	O	O
for	O	O
my	O	O
patience	O	O
.	O	O
I	O	O
do	O	O
n't	O	O
think	O	O
the	O	O
source	O	O
reader	O	O
part	O	O
of	O	O
the	O	O
compiler	O	O
ends	O	O
up	O	O
with	O	O
a	O	O
DOM	O	O
tree	O	O
,	O	O
but	O	O
intuitively	O	O
I	O	O
would	O	O
agree	O	O
with	O	O
you	O	O
.	O	O
The	O	O
work	O	O
necessary	O	O
to	O	O
transform	O	O
the	O	O
DOM	O	O
to	O	O
IL	O	O
should	O	O
be	O	O
much	O	O
less	O	O
than	O	O
reading	O	O
C	O	O
#	O	O
source	O	O
code	O	O
.	O	O
There	O	O
is	O	O
no	O	O
pure	O	O
CSS/HTML	O	O
way	O	O
to	O	O
achieve	O	O
this	O	O
,	O	O
as	O	O
far	O	O
as	O	O
I	O	O
know	O	O
.	O	O
Your	O	O
best	O	O
bet	O	O
would	O	O
be	O	O
to	O	O
do	O	O
it	O	O
in	O	O
pre-processing	O	O
(	O	O
if	O	O
list	O	O
length	O	O
>	O	O
150	O	O
,	O	O
split	O	O
into	O	O
3	O	O
columns	O	O
,	O	O
esle	O	O
if	O	O
>	O	O
70	O	O
,	O	O
split	O	O
into	O	O
2	O	O
columns	O	O
,	O	O
else	O	O
1	O	O
)	O	O
.	O	O
The	O	O
other	O	O
option	O	O
,	O	O
using	O	O
JavaScript	O	O
(	O	O
I	O	O
'm	O	O
not	O	O
familiar	O	O
with	O	O
the	O	O
jQuery	O	O
library	O	O
specifically	O	O
)	O	O
would	O	O
be	O	O
to	O	O
iterate	O	O
through	O	O
lists	O	O
,	O	O
probably	O	O
based	O	O
on	O	O
them	O	O
being	O	O
a	O	O
certain	O	O
class	O	O
,	O	O
count	O	O
the	O	O
number	O	O
of	O	O
children	O	O
,	O	O
and	O	O
if	O	O
it	O	O
is	O	O
a	O	O
high	O	O
enough	O	O
number	O	O
,	O	O
dynamically	O	O
create	O	O
a	O	O
new	O	O
list	O	O
after	O	O
the	O	O
first	O	O
,	O	O
transferring	O	O
some	O	O
number	O	O
of	O	O
list	O	O
items	O	O
to	O	O
the	O	O
new	O	O
list	O	O
.	O	O
As	O	O
far	O	O
as	O	O
implementing	O	O
the	O	O
columns	O	O
,	O	O
you	O	O
could	O	O
probably	O	O
float	O	O
them	O	O
left	O	O
,	O	O
followed	O	O
by	O	O
an	O	O
element	O	O
that	O	O
had	O	O
the	O	O
style	O	O
or	O	O
.	O	O
CSS	O	O
:	O	O
ul.column	O	O
{	O	O
float	O	O
:	O	O
left	O	O
;	O	O
width:50	O	O
%	O	O
;	O	O
}	O	O
div.clear	B-API	O
{	I-API	O
clear	I-API	O
:	I-API	O
both	O	O
;	O	O
}	O	O
HTML	O	O
:	O	O
ul	O	O
class=	O	O
''	O	O
column	O	O
''	O	O
liItem	O	O
1/li	O	O
liItem	O	O
2/li	O	O
!	O	O
--	O	O
...	O	O
--	O	O
liItem	O	O
49/li	O	O
liItem	O	O
50/li	O	O
/ul	O	O
ul	O	O
class=	O	O
''	O	O
column	O	O
''	O	O
liItem	O	O
51/li	O	O
liItem	O	O
52/li	O	O
!	O	O
--	O	O
...	O	O
--	O	O
liItem	O	O
99/li	O	O
liItem	O	O
100/li	O	O
/ul	O	O
div	O	O
class=	O	O
''	O	O
clear	O	O
''	O	O
/	O	O
So	O	O
I	O	O
dug	O	O
up	O	O
this	O	O
article	O	O
from	O	O
A	O	O
List	O	O
Apart	O	O
CSS	O	O
Swag	O	O
:	O	O
Multi-Column	O	O
Lists	O	O
.	O	O
I	O	O
ended	O	O
up	O	O
using	O	O
the	O	O
first	O	O
solution	O	O
,	O	O
it	O	O
's	O	O
not	O	O
the	O	O
best	O	O
but	O	O
the	O	O
others	O	O
require	O	O
either	O	O
using	O	O
complex	O	O
HTML	O	O
that	O	O
ca	O	O
n't	O	O
be	O	O
generated	O	O
dynamically	O	O
,	O	O
or	O	O
creating	O	O
a	O	O
lot	O	O
of	O	O
custom	O	O
classes	O	O
,	O	O
which	O	O
could	O	O
be	O	O
done	O	O
but	O	O
would	O	O
require	O	O
loads	O	O
of	O	O
in-line	O	O
styling	O	O
and	O	O
possibly	O	O
a	O	O
huge	O	O
page	O	O
.	O	O
Other	O	O
solutions	O	O
are	O	O
still	O	O
welcome	O	O
though	O	O
.	O	O
If	O	O
Safari	O	O
and	O	O
Firefox	O	O
support	O	O
is	O	O
good	O	O
enough	O	O
for	O	O
you	O	O
,	O	O
there	O	O
is	O	O
a	O	O
CSS	O	O
solution	O	O
:	O	O
UL	B-API	O
{	I-API	O
column-count:3	I-API	O
;	I-API	O
-moz-column-count:3	I-API	O
;	I-API	O
-webkit-column-count:3	I-API	O
;	I-API	O
column-gap:2em	I-API	O
;	I-API	O
-moz-column-gap:2em	I-API	O
;	O	O
I	O	O
'm	O	O
not	O	O
sure	O	O
about	O	O
Opera	O	O
.	O	O
Yes	O	O
it	O	O
is	O	O
,	O	O
try	O	O
it	O	O
out	O	O
in	O	O
a	O	O
test	O	O
.	O	O
You	O	O
will	O	O
see	O	O
``	O	O
long	O	O
''	O	O
printed	O	O
.	O	O
It	O	O
is	O	O
widening	O	O
because	O	O
Java	O	O
will	O	O
choose	O	O
to	O	O
widen	O	O
the	O	O
int	O	O
into	O	O
a	O	O
long	O	O
before	O	O
it	O	O
chooses	O	O
to	O	O
autobox	O	O
it	O	O
to	O	O
an	O	O
Integer	O	B-API
,	O	O
so	O	O
the	O	O
hello	O	O
(	O	O
long	O	O
)	O	O
method	O	O
is	O	O
chosen	O	O
to	O	O
be	O	O
called	O	O
.	O	O
Edit	O	O
:	O	O
the	O	O
original	O	O
post	O	O
being	O	O
referenced	O	O
.	O	O
Further	O	O
Edit	O	O
:	O	O
The	O	O
reason	O	O
the	O	O
second	O	O
option	O	O
would	O	O
print	O	O
Integer	O	B-API
is	O	O
because	O	O
there	O	O
is	O	O
no	O	O
``	O	O
widening	O	O
''	O	O
into	O	O
a	O	O
larger	O	O
primitive	O	O
as	O	O
an	O	O
option	O	O
,	O	O
so	O	O
it	O	O
MUST	O	O
box	O	O
it	O	O
up	O	O
,	O	O
thus	O	O
Integer	O	B-API
is	O	O
the	O	O
only	O	O
option	O	O
.	O	O
Furthermore	O	O
,	O	O
java	O	O
will	O	O
only	O	O
autobox	O	O
to	O	O
the	O	O
original	O	O
type	O	O
,	O	O
so	O	O
it	O	O
would	O	O
give	O	O
a	O	O
compiler	O	O
error	O	O
if	O	O
you	O	O
leave	O	O
the	O	O
hello	O	O
(	O	O
Long	O	O
)	O	O
and	O	O
removed	O	O
hello	O	O
(	O	O
Integer	O	B-API
)	O	O
.	O	O
In	O	O
the	O	O
first	O	O
case	O	O
,	O	O
you	O	O
have	O	O
a	O	O
widening	O	O
conversion	O	O
happening	O	O
.	O	O
This	O	O
can	O	O
be	O	O
see	O	O
when	O	O
runinng	O	O
the	O	O
``	O	O
javap	O	O
''	O	O
utility	O	O
program	O	O
(	O	O
included	O	O
w/	O	O
the	O	O
JDK	O	O
)	O	O
,	O	O
on	O	O
the	O	O
compiled	O	O
class	O	O
:	O	O
public	O	B-API
static	O	B-API
void	O	I-API
;	O	O
Code	O	O
:	O	O
0	O	O
:	O	O
iconst_	O	O
5	O	O
1	O	O
:	O	O
istore_	O	O
1	O	O
2	O	O
:	O	O
iload_	O	O
1	O	O
3	O	O
:	O	O
i2l	O	O
4	O	O
:	O	O
invokestatic	O	O
#	O	O
6	O	O
;	O	O
//Method	O	O
V	O	O
7	O	O
:	O	O
main	O	O
(	O	O
java.lang.String	B-API	B-API
[	I-API	I-API
]	I-API	I-API
)	O	I-API
hello	O	O
:	O	O
(	O	O
J	O	O
)	O	O
Clearly	O	O
,	O	O
you	O	O
see	O	O
the	O	O
I2L	O	O
,	O	O
which	O	O
is	O	O
the	O	O
mnemonic	O	O
for	O	O
the	O	O
widening	O	O
Integer-To-Long	O	O
bytecode	O	O
instruction	O	O
.	O	O
See	O	O
reference	O	O
here	O	O
.	O	O
And	O	O
in	O	O
the	O	O
other	O	O
case	O	O
,	O	O
replacing	O	O
the	O	O
``	O	O
long	O	O
x	O	O
''	O	O
with	O	O
the	O	O
object	O	O
``	O	O
Long	O	O
x	O	O
''	O	O
signature	O	O
,	O	O
you	O	O
'll	O	O
have	O	O
this	O	O
code	O	O
in	O	O
the	O	O
main	O	O
method	O	O
:	O	O
public	O	B-API
static	O	B-API
void	O	I-API
;	O	O
Code	O	O
:	O	O
0	O	O
:	O	O
iconst_	O	O
5	O	O
1	O	O
:	O	O
istore_	O	O
1	O	O
2	O	O
:	O	O
iload_	O	O
1	O	O
3	O	O
:	O	O
invokestatic	O	O
#	O	O
6	O	O
;	O	O
//Metho	O	O
Ljava/lang/Integer	B-API	O
;	O	O
6	O	O
:	O	O
invokestatic	O	O
#	O	O
7	O	O
;	O	O
//Method	O	O
V	O	O
9	O	O
:	O	O
main	O	O
(	O	O
java.lang.String	B-API	B-API
[	I-API	I-API
]	I-API	I-API
)	O	I-API
java/lang/Integer.valueOf	B-API	O
:	I-API	O
(	I-API	O
I	I-API	O
)	I-API	O
hello	O	O
:	O	O
(	O	O
Ljava/lang/Integer	O	O
;	O	O
)	O	O
So	O	O
you	O	O
see	O	O
the	O	O
compiler	O	O
has	O	O
created	O	O
the	O	O
instruction	O	O
Integer.valueOf	B-API	B-API
(	I-API	I-API
int	I-API	I-API
)	I-API	I-API
,	O	O
to	O	O
box	O	O
the	O	O
primitive	O	O
inside	O	O
the	O	O
wrapper	O	O
.	O	O
Another	O	O
interesting	O	O
thing	O	O
with	O	O
this	O	O
example	O	O
is	O	O
the	O	O
method	O	O
overloading	O	O
.	O	O
The	O	O
combination	O	O
of	O	O
type	O	O
widening	O	O
and	O	O
method	O	O
overloading	O	O
only	O	O
working	O	O
because	O	O
the	O	O
compiler	O	O
has	O	O
to	O	O
make	O	O
a	O	O
decision	O	O
of	O	O
which	O	O
method	O	O
to	O	O
choose	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
example	O	O
:	O	O
public	O	O
static	O	O
void	O	O
hello	O	O
(	O	O
Collection	O	O
x	O	O
)	O	O
{	O	O
System.out.println	B-API	O
(	I-API	O
``	I-API	O
Collection	I-API	O
''	I-API	O
)	I-API	O
;	O	O
}	O	O
public	O	O
static	O	O
void	O	O
hello	O	O
(	O	O
List	O	O
x	O	O
)	O	O
{	O	O
System.out.println	B-API	O
(	I-API	O
``	I-API	O
List	I-API	O
''	I-API	O
)	I-API	O
;	O	O
}	O	O
public	O	O
static	O	O
void	O	O
main	O	O
(	O	O
String	B-API	O
[	I-API	O
]	I-API	O
args	I-API	O
)	I-API	O
{	O	O
Collection	B-API	O
col	I-API	O
=	I-API	O
new	I-API	O
ArrayList	I-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
hello	O	O
(	O	O
col	O	O
)	O	O
;	O	O
}	O	O
It	O	O
does	O	O
n't	O	O
use	O	O
the	O	O
run-time	O	O
type	O	O
which	O	O
is	O	O
List	O	O
,	O	O
it	O	O
uses	O	O
the	O	O
compile-time	O	O
type	O	O
which	O	O
is	O	O
Collection	B-API	O
and	O	O
thus	O	O
prints	O	O
``	O	O
Collection	B-API	O
''	O	O
.	O	O
I	O	O
encourage	O	O
your	O	O
to	O	O
read	O	O
Effective	O	O
Java	O	O
,	O	O
which	O	O
opened	O	O
my	O	O
eyes	O	O
to	O	O
some	O	O
corner	O	O
cases	O	O
of	O	O
the	O	O
JLS	O	O
.	O	O
ZOiqZQIbRMC	O	O
You	O	O
'd	O	O
be	O	O
looking	O	O
to	O	O
static	O	O
link	O	O
(	O	O
as	O	O
opposed	O	O
to	O	O
dynamically	O	O
link	O	O
)	O	O
I	O	O
'm	O	O
not	O	O
sure	O	O
how	O	O
many	O	O
of	O	O
the	O	O
MS	O	O
redistributables	O	O
statically	O	O
link	O	O
in	O	O
.	O	O
If	O	O
you	O	O
are	O	O
looking	O	O
to	O	O
find	O	O
out	O	O
which	O	O
dll	O	O
's	O	O
your	O	O
target	O	O
machine	O	O
is	O	O
missing	O	O
then	O	O
use	O	O
depends.exe	O	O
which	O	O
used	O	O
to	O	O
come	O	O
with	O	O
MSDev	O	O
,	O	O
but	O	O
can	O	O
also	O	O
be	O	O
found	O	O
here	O	O
.	O	O
Testing	O	O
this	O	O
on	O	O
a	O	O
few	O	O
target	O	O
machines	O	O
should	O	O
tell	O	O
you	O	O
which	O	O
dll	O	O
's	O	O
you	O	O
need	O	O
to	O	O
package	O	O
with	O	O
your	O	O
application	O	O
.	O	O
You	O	O
need	O	O
to	O	O
set	O	O
the	O	O
run-time	O	O
library	O	O
(	O	O
Under	O	O
C/C++	O	O
-	O	O
Code	O	O
Generation	O	O
)	O	O
for	O	O
ALL	O	O
projects	O	O
to	O	O
static	O	O
linkage	O	O
,	O	O
which	O	O
correlates	O	O
to	O	O
the	O	O
following	O	O
default	O	O
building	O	O
configurations	O	O
:	O	O
Multithreaded	O	O
Debug/Release	O	O
Singlethreaded	O	O
Debug/Release	O	O
As	O	O
opposed	O	O
to	O	O
the	O	O
``	O	O
DLL	O	O
''	O	O
versions	O	O
of	O	O
those	O	O
libraries	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
do	O	O
that	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
libraries	O	O
you	O	O
're	O	O
using	O	O
,	O	O
you	O	O
might	O	O
have	O	O
to	O	O
install	O	O
a	O	O
Merge	O	O
Module/framework/etc	O	O
.	O	O
It	O	O
depends	O	O
on	O	O
whether	O	O
static	O	O
LIB	O	O
versions	O	O
of	O	O
your	O	O
dependencies	O	O
are	O	O
available	O	O
.	O	O
Check	O	O
out	O	O
the	O	O
open	O	O
source	O	O
project	O	O
LMMS	O	O
.	O	O
It	O	O
's	O	O
a	O	O
music	O	O
studio	O	O
for	O	O
Linux	O	O
that	O	O
includes	O	O
the	O	O
ability	O	O
to	O	O
use	O	O
MIDI	O	O
keyboards	O	O
with	O	O
software	O	O
instruments	O	O
.	O	O
If	O	O
you	O	O
dig	O	O
around	O	O
in	O	O
source	O	O
files	O	O
with	O	O
'midi	O	O
'	O	O
in	O	O
the	O	O
name	O	O
,	O	O
you	O	O
'll	O	O
probably	O	O
find	O	O
what	O	O
you	O	O
're	O	O
looking	O	O
for	O	O
.	O	O
This	O	O
is	O	O
part	O	O
of	O	O
a	O	O
solution	O	O
I	O	O
use	O	O
on	O	O
a	O	O
local	O	O
intranet	O	O
.	O	O
Some	O	O
of	O	O
the	O	O
variables	O	O
you	O	O
will	O	O
have	O	O
to	O	O
collect	O	O
yourself	O	O
as	O	O
I	O	O
pull	O	O
them	O	O
from	O	O
a	O	O
database	O	O
but	O	O
you	O	O
may	O	O
pull	O	O
them	O	O
from	O	O
somewhere	O	O
else	O	O
.	O	O
The	O	O
only	O	O
extra	O	O
but	O	O
I	O	O
've	O	O
got	O	O
in	O	O
there	O	O
is	O	O
a	O	O
function	O	O
called	O	O
getMimeType	B-API	O
which	O	O
connects	O	O
to	O	O
the	O	O
database	O	O
and	O	O
pulls	O	O
back	O	O
the	O	O
correct	O	O
mine	O	O
type	O	O
based	O	O
on	O	O
file	O	O
extension	O	O
.	O	O
This	O	O
defaults	O	O
to	O	O
application/octet-stream	O	O
if	O	O
none	O	O
is	O	O
found	O	O
.	O	O
//	O	O
Clear	O	O
the	O	O
response	O	O
buffer	O	O
incase	O	O
there	O	O
is	O	O
anything	O	O
already	O	O
in	O	O
;	O	O
Response.Buffer	B-API	B-API
=	I-API	O
true	I-API	O
;	O	O
//	O	O
Read	O	O
the	O	O
original	O	O
file	O	O
from	O	O
diskFileStream	B-API	B-API
myFileStream	I-API	I-API
=	I-API	I-API
new	I-API	I-API
;	O	O
long	O	O
FileSize	O	B-API
=	O	O
myFileStream.Length	B-API	B-API
;	O	O
byte	O	O
[	O	O
]	O	O
Buffer	B-API	O
=	I-API	O
new	I-API	O
;	O	O
//	O	O
Tell	O	O
the	O	O
browse	O	O
stuff	O	O
about	O	O
the	O	O
)	O	O
;	O	O
Response.ContentType	B-API	B-API
=	O	O
;	O	O
//	O	O
Send	O	O
the	O	O
data	O	O
to	O	O
the	O	O
it.Response.Clear	B-API	B-API
(	I-API	I-API
)	I-API	I-API
(	O	O
sPath	O	O
,	O	O
FileMode.Open	B-API	B-API
)	O	O
[	O	O
(	O	O
int	O	O
)	O	O
FileSize	O	O
]	O	O
;	O	O
myFileStream.Read	B-API	O
(	I-API	O
Buffer	I-API	O
,	I-API	O
0	I-API	O
,	I-API	O
(	I-API	O
int	I-API	O
)	I-API	O
FileSize	I-API	O
)	I-API	O
;	O	O
myFileStream.Close	B-API	B-API
(	I-API	I-API
)	I-API	I-API
(	O	O
``	O	O
Content-Length	O	O
''	O	O
,	O	O
FileSize.ToString	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
Response.AddHeader	B-API	B-API
(	I-API	I-API
)	I-API	I-API
``	O	O
Content-Disposition	O	O
''	O	O
,	O	O
``	O	O
inline	O	O
;	O	O
filename=	O	O
''	O	O
+	O	O
sFilename.Replace	B-API	B-API
(	I-API	I-API
``	I-API	I-API
``	I-API	I-API
,	I-API	I-API
''	I-API	I-API
_	I-API	I-API
''	I-API	I-API
)	I-API	I-API
(	O	O
sExtention	O	O
,	O	O
oConnection	O	O
)	O	O
browserResponse.BinaryWrite	B-API	B-API
(	I-API	I-API
Buffer	I-API	I-API
)	I-API	I-API
;	O	O
Response.End	B-API	B-API
(	I-API	I-API
)	I-API	I-API
LINQ	O	O
turns	O	O
into	O	O
method	O	O
calls	O	O
like	O	O
the	O	O
code	O	O
you	O	O
have	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
there	O	O
should	O	O
be	O	O
no	O	O
difference	O	O
.	O	O
However	O	O
,	O	O
in	O	O
your	O	O
two	O	O
pieces	O	O
of	O	O
code	O	O
you	O	O
are	O	O
not	O	O
calling	O	O
.ToList	O	O
in	O	O
the	O	O
first	O	O
,	O	O
so	O	O
the	O	O
first	O	O
piece	O	O
of	O	O
code	O	O
will	O	O
produce	O	O
an	O	O
enumerable	O	O
data	O	O
source	O	O
,	O	O
but	O	O
if	O	O
you	O	O
call	O	O
.ToList	B-API	O
on	O	O
it	O	O
,	O	O
the	O	O
two	O	O
should	O	O
be	O	O
the	O	O
same	O	O
.	O	O
Other	O	O
than	O	O
the	O	O
ToList	O	O
difference	O	O
,	O	O
#	O	O
2	O	O
is	O	O
a	O	O
lot	O	O
more	O	O
readable	O	O
and	O	O
natural	O	O
IMO	O	O
Why	O	O
are	O	O
pointers	O	O
such	O	O
a	O	O
leading	O	O
factor	O	O
of	O	O
confusion	O	O
for	O	O
many	O	O
new	O	O
,	O	O
and	O	O
even	O	O
old	O	O
,	O	O
college	O	O
level	O	O
students	O	O
in	O	O
the	O	O
C/C++	O	O
language	O	O
?	O	O
The	O	O
concept	O	O
of	O	O
a	O	O
placeholder	O	O
for	O	O
a	O	O
value	O	O
-	O	O
variables	O	O
-	O	O
maps	O	O
onto	O	O
something	O	O
we	O	O
're	O	O
taught	O	O
in	O	O
school	O	O
-	O	O
algebra	O	O
.	O	O
There	O	O
is	O	O
n't	O	O
an	O	O
existing	O	O
parallel	O	O
you	O	O
can	O	O
draw	O	O
without	O	O
understanding	O	O
how	O	O
memory	O	O
is	O	O
physically	O	O
laid	O	O
out	O	O
within	O	O
a	O	O
computer	O	O
,	O	O
and	O	O
no	O	O
one	O	O
thinks	O	O
about	O	O
this	O	O
kind	O	O
of	O	O
thing	O	O
until	O	O
they	O	O
're	O	O
dealing	O	O
with	O	O
low	O	O
level	O	O
things	O	O
-	O	O
at	O	O
the	O	O
C/C++/byte	O	O
communications	O	O
level	O	O
.	O	O
Are	O	O
there	O	O
any	O	O
tools	O	O
or	O	O
thought	O	O
processes	O	O
that	O	O
helped	O	O
you	O	O
understand	O	O
how	O	O
pointers	O	O
work	O	O
at	O	O
the	O	O
variable	O	O
,	O	O
function	O	O
,	O	O
and	O	O
beyond	O	O
level	O	O
?	O	O
Addresses	O	O
boxes	O	O
.	O	O
I	O	O
remember	O	O
when	O	O
I	O	O
was	O	O
learning	O	O
to	O	O
program	O	O
BASIC	O	B-API
into	O	O
microcomputers	O	O
,	O	O
there	O	O
were	O	O
these	O	O
pretty	O	O
books	O	O
with	O	O
games	O	O
in	O	O
them	O	O
,	O	O
and	O	O
sometimes	O	O
you	O	O
had	O	O
to	O	O
poke	O	O
values	O	O
into	O	O
particular	O	O
addresses	O	O
.	O	O
They	O	O
had	O	O
a	O	O
picture	O	O
of	O	O
a	O	O
bunch	O	O
of	O	O
boxes	O	O
,	O	O
incrementally	O	O
labelled	O	O
with	O	O
0	O	O
,	O	O
1	O	O
,	O	O
2	O	O
...	O	O
and	O	O
it	O	O
was	O	O
explained	O	O
that	O	O
only	O	O
one	O	O
small	O	O
thing	O	O
(	O	O
a	O	O
byte	O	O
)	O	O
could	O	O
fit	O	O
in	O	O
these	O	O
boxes	O	O
,	O	O
and	O	O
there	O	O
were	O	O
a	O	O
lot	O	O
of	O	O
them	O	O
-	O	O
some	O	O
computers	O	O
had	O	O
as	O	O
many	O	O
as	O	O
65535	O	O
!	O	O
They	O	O
were	O	O
next	O	O
to	O	O
each	O	O
other	O	O
,	O	O
and	O	O
they	O	O
all	O	O
had	O	O
an	O	O
address	O	O
.	O	O
What	O	O
are	O	O
some	O	O
good	O	O
practice	O	O
things	O	O
that	O	O
can	O	O
be	O	O
done	O	O
to	O	O
bring	O	O
somebody	O	O
to	O	O
the	O	O
level	O	O
of	O	O
,	O	O
``	O	O
Ah-hah	O	O
,	O	O
I	O	O
got	O	O
it	O	O
,	O	O
''	O	O
without	O	O
getting	O	O
them	O	O
bogged	O	O
down	O	O
in	O	O
the	O	O
overall	O	O
concept	O	O
?	O	O
Basically	O	O
,	O	O
drill	O	O
like	O	O
scenarios	O	O
.	O	O
For	O	O
a	O	O
drill	O	O
?	O	O
Make	O	O
a	O	O
struct	O	O
:	O	O
struct	O	O
{	O	O
char	O	O
a	O	O
;	O	O
char	O	O
b	O	O
;	O	O
char	O	O
c	O	O
;	O	O
char	O	O
d	O	O
;	O	O
}	O	O
mystruct	O	O
;	O	O
mystruct.a	O	O
=	O	O
'r	O	O
'	O	O
;	O	O
mystruct.b	O	O
=	O	O
's	O	O
'	O	O
;	O	O
mystruct.c	O	O
=	O	O
't	O	O
'	O	O
;	O	O
mystruct.d	O	O
=	O	O
'u	O	O
'	O	O
;	O	O
char*	O	O
my_pointer	O	O
;	O	O
my_pointer	O	O
=	O	O
mystruct.b	O	O
;	O	O
cout	O	O
'Start	O	O
:	O	O
my_pointer	O	O
=	O	O
'	O	O
*my_pointer	O	O
endl	O	O
;	O	O
my_pointer++	O	O
;	O	O
cout	O	O
'After	O	O
:	O	O
my_pointer	O	O
=	O	O
'	O	O
*my_pointer	O	O
endl	O	O
;	O	O
my_pointer	O	O
=	O	O
mystruct.a	O	O
;	O	O
cout	O	O
'Then	O	O
:	O	O
my_pointer	O	O
=	O	O
'	O	O
*my_pointer	O	O
endl	O	O
;	O	O
my_pointer	O	O
=	O	O
my_pointer	O	O
+	O	O
3	O	O
;	O	O
cout	O	O
'End	O	O
:	O	O
my_pointer	O	O
=	O	O
'	O	O
*my_pointer	O	O
endl	O	O
;	O	O
Same	O	O
example	O	O
as	O	O
above	O	O
,	O	O
except	O	O
in	O	O
C	O	O
:	O	O
//	O	O
Same	O	O
example	O	O
as	O	O
above	O	O
,	O	O
except	O	O
in	O	O
C	O	O
:	O	O
struct	O	O
{	O	O
char	O	O
a	O	O
;	O	O
char	O	O
b	O	O
;	O	O
char	O	O
c	O	O
;	O	O
char	O	O
d	O	O
;	O	O
}	O	O
mystruct	O	O
;	O	O
mystruct.a	O	O
=	O	O
'r	O	O
'	O	O
;	O	O
mystruct.b	O	O
=	O	O
's	O	O
'	O	O
;	O	O
mystruct.c	O	O
=	O	O
't	O	O
'	O	O
;	O	O
mystruct.d	O	O
=	O	O
'u	O	O
'	O	O
;	O	O
char*	O	O
my_pointer	O	O
;	O	O
my_pointer	O	O
=	O	O
mystruct.b	O	O
;	O	O
printf	O	O
(	O	O
``	O	O
Start	O	O
:	O	O
my_pointer	O	O
=	O	O
%	O	O
c\n	O	O
''	O	O
,	O	O
*my_pointer	O	O
)	O	O
;	O	O
my_pointer++	O	O
;	O	O
printf	O	O
(	O	O
``	O	O
After	O	O
:	O	O
my_pointer	O	O
=	O	O
%	O	O
c\n	O	O
''	O	O
,	O	O
*my_pointer	O	O
)	O	O
;	O	O
my_pointer	O	O
=	O	O
mystruct.a	O	O
;	O	O
printf	O	B-API
(	O	I-API
``	O	I-API
Then	O	I-API
:	O	O
my_pointer	O	O
=	O	O
%	O	O
c\n	O	O
''	O	O
,	O	O
*my_pointer	O	O
)	O	O
;	O	O
my_pointer	O	O
=	O	O
my_pointer	O	O
+	O	O
3	O	O
;	O	O
printf	O	O
(	O	O
``	O	O
End	O	O
:	O	O
my_pointer	O	O
=	O	O
%	O	O
c\n	O	O
''	O	O
,	O	O
*my_pointer	O	O
)	O	O
;	O	O
Output	O	O
:	O	O
Start	O	O
:	O	O
my_pointer	O	O
=	O	O
s	O	O
After	O	O
:	O	O
my_pointer	O	O
=	O	O
t	O	O
Then	O	O
:	O	O
my_pointer	O	O
=	O	O
r	O	O
End	O	O
:	O	O
my_pointer	O	O
=	O	O
u	O	O
Perhaps	O	O
that	O	O
explains	O	O
some	O	O
of	O	O
the	O	O
basics	O	O
through	O	O
example	O	O
?	O	O
I	O	O
do	O	O
n't	O	O
think	O	O
pointers	O	O
as	O	O
a	O	O
concept	O	O
are	O	O
particularly	O	O
tricky	O	O
-	O	O
most	O	O
students	O	O
'	O	O
mental	O	O
models	O	O
map	O	O
to	O	O
something	O	O
like	O	O
this	O	O
and	O	O
some	O	O
quick	O	O
box	O	O
sketches	O	O
can	O	O
help	O	O
.	O	O
The	O	O
difficulty	O	O
,	O	O
at	O	O
least	O	O
that	O	O
which	O	O
I	O	O
've	O	O
experienced	O	O
in	O	O
the	O	O
past	O	O
and	O	O
seen	O	O
others	O	O
deal	O	O
with	O	O
,	O	O
is	O	O
that	O	O
the	O	O
management	O	O
of	O	O
pointers	O	O
in	O	O
C/C++	O	O
can	O	O
be	O	O
unncessarily	O	O
convoluted	O	O
.	O	O
I	O	O
do	O	O
n't	O	O
see	O	O
what	O	O
is	O	O
so	O	O
confusing	O	O
about	O	O
pointers	O	O
.	O	O
They	O	O
point	O	O
to	O	O
a	O	O
location	O	O
in	O	O
memory	O	O
,	O	O
that	O	O
is	O	O
it	O	O
stores	O	O
the	O	O
memory	O	O
address	O	O
.	O	O
In	O	O
C/C++	O	O
you	O	O
can	O	O
specify	O	O
the	O	O
type	O	O
the	O	O
pointer	O	O
points	O	O
to	O	O
.	O	O
For	O	O
example	O	O
:	O	O
int*	B-API	O
Says	O	O
that	O	O
my_int_pointer	O	O
contains	O	O
the	O	O
address	O	O
to	O	O
a	O	O
location	O	O
that	O	O
contains	O	O
an	O	O
int	O	O
.	O	O
The	O	O
problem	O	O
with	O	O
pointers	O	O
is	O	O
that	O	O
they	O	O
point	O	O
to	O	O
a	O	O
location	O	O
in	O	O
memory	O	O
,	O	O
so	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
trail	O	O
off	O	O
into	O	O
some	O	O
location	O	O
you	O	O
should	O	O
not	O	O
be	O	O
in	O	O
.	O	O
As	O	O
proof	O	O
look	O	O
at	O	O
the	O	O
numerous	O	O
security	O	O
holes	O	O
in	O	O
C/C++	O	O
applications	O	O
from	O	O
buffer	O	O
overflow	O	O
(	O	O
incrementing	O	O
the	O	O
pointer	O	O
past	O	O
the	O	O
allocated	O	O
boundary	O	O
)	O	O
.	O	O
The	O	O
reason	O	O
pointers	O	O
seem	O	O
to	O	O
confuse	O	O
so	O	O
many	O	O
people	O	O
is	O	O
that	O	O
they	O	O
mostly	O	O
come	O	O
with	O	O
little	O	O
or	O	O
no	O	O
background	O	O
in	O	O
computer	O	O
architecture	O	O
.	O	O
Since	O	O
many	O	O
do	O	O
n't	O	O
seem	O	O
to	O	O
have	O	O
an	O	O
idea	O	O
of	O	O
how	O	O
computers	O	O
(	O	O
the	O	O
machine	O	O
)	O	O
is	O	O
actually	O	O
implemented	O	O
-	O	O
working	O	O
in	O	O
C/C++	O	O
seems	O	O
alien	O	O
.	O	O
A	O	O
drill	O	O
is	O	O
to	O	O
ask	O	O
them	O	O
to	O	O
implement	O	O
a	O	O
simple	O	O
bytecode	O	O
based	O	O
virtual	O	O
machine	O	O
(	O	O
in	O	O
any	O	O
language	O	O
they	O	O
chose	O	O
,	O	O
python	O	O
works	O	O
great	O	O
for	O	O
this	O	O
)	O	O
with	O	O
an	O	O
instruction	O	O
set	O	O
focussed	O	O
on	O	O
pointer	O	O
operations	O	O
(	O	O
load	O	O
,	O	O
store	O	O
,	O	O
direct/indirect	O	O
addressing	O	O
)	O	O
.	O	O
Then	O	O
ask	O	O
them	O	O
to	O	O
write	O	O
simple	O	O
programs	O	O
for	O	O
that	O	O
instruction	O	O
set	O	O
.	O	O
Anything	O	O
requiring	O	O
slightly	O	O
more	O	O
than	O	O
simple	O	O
addition	O	O
is	O	O
going	O	O
to	O	O
involve	O	O
pointers	O	O
and	O	O
they	O	O
are	O	O
sure	O	O
to	O	O
get	O	O
it	O	O
.	O	O
I	O	O
think	O	O
that	O	O
the	O	O
main	O	O
reason	O	O
that	O	O
people	O	O
have	O	O
trouble	O	O
with	O	O
it	O	O
is	O	O
because	O	O
it	O	O
's	O	O
generally	O	O
not	O	O
taught	O	O
in	O	O
an	O	O
interesting	O	O
and	O	O
engaging	O	O
manner	O	O
.	O	O
I	O	O
'd	O	O
like	O	O
to	O	O
see	O	O
a	O	O
lecturer	O	O
get	O	O
10	O	O
volunteers	O	O
from	O	O
the	O	O
crowd	O	O
and	O	O
give	O	O
them	O	O
a	O	O
1	O	O
meter	O	O
ruler	O	O
each	O	O
,	O	O
get	O	O
them	O	O
to	O	O
stand	O	O
around	O	O
in	O	O
a	O	O
certain	O	O
configuration	O	O
and	O	O
use	O	O
the	O	O
rulers	O	O
to	O	O
point	O	O
at	O	O
each	O	O
other	O	O
.	O	O
Then	O	O
show	O	O
pointer	O	O
arithmetic	O	O
by	O	O
moving	O	O
people	O	O
around	O	O
(	O	O
and	O	O
where	O	O
they	O	O
point	O	O
their	O	O
rulers	O	O
)	O	O
.	O	O
It	O	O
'd	O	O
be	O	O
a	O	O
simple	O	O
but	O	O
effective	O	O
(	O	O
and	O	O
above	O	O
all	O	O
memorable	O	O
)	O	O
way	O	O
of	O	O
showing	O	O
the	O	O
concepts	O	O
without	O	O
getting	O	O
too	O	O
bogged	O	O
down	O	O
in	O	O
the	O	O
mechanics	O	O
.	O	O
Once	O	O
you	O	O
get	O	O
to	O	O
C	O	O
and	O	O
C++	O	O
it	O	O
seems	O	O
to	O	O
get	O	O
harder	O	O
for	O	O
some	O	O
people	O	O
.	O	O
I	O	O
'm	O	O
not	O	O
sure	O	O
if	O	O
this	O	O
is	O	O
because	O	O
they	O	O
are	O	O
finally	O	O
putting	O	O
theory	O	O
that	O	O
they	O	O
do	O	O
n't	O	O
properly	O	O
grasp	O	O
into	O	O
practice	O	O
or	O	O
because	O	O
pointer	O	O
manipulation	O	O
is	O	O
inherently	O	O
harder	O	O
in	O	O
those	O	O
languages	O	O
.	O	O
I	O	O
ca	O	O
n't	O	O
remember	O	O
my	O	O
own	O	O
transition	O	O
that	O	O
well	O	O
,	O	O
but	O	O
I	O	O
knew	O	O
pointers	O	O
in	O	O
Pascal	O	O
and	O	O
then	O	O
moved	O	O
to	O	O
C	O	O
and	O	O
got	O	O
totally	O	O
lost	O	O
.	O	O
Pointers	O	O
is	O	O
a	O	O
concept	O	O
t	O	O
at	O	O
for	O	O
many	O	O
can	O	O
be	O	O
confusing	O	O
at	O	O
first	O	O
,	O	O
in	O	O
particular	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
copying	O	O
pointer	O	O
values	O	O
around	O	O
and	O	O
still	O	O
referencing	O	O
the	O	O
same	O	O
memory	O	O
block	O	O
.	O	O
I	O	O
've	O	O
found	O	O
that	O	O
the	O	O
best	O	O
analogy	O	O
is	O	O
to	O	O
consider	O	O
the	O	O
pointer	O	O
as	O	O
a	O	O
piece	O	O
of	O	O
paper	O	O
with	O	O
a	O	O
house	O	O
address	O	O
on	O	O
it	O	O
,	O	O
and	O	O
the	O	O
memory	O	O
block	O	O
it	O	O
references	O	O
as	O	O
the	O	O
actual	O	O
house	O	O
.	O	O
All	O	O
sorts	O	O
of	O	O
operations	O	O
can	O	O
thus	O	O
be	O	O
easily	O	O
explained	O	O
.	O	O
I	O	O
've	O	O
added	O	O
some	O	O
Delphi	O	O
code	O	O
down	O	O
below	O	O
,	O	O
and	O	O
some	O	O
comments	O	O
where	O	O
appropriate	O	O
.	O	O
I	O	O
chose	O	O
Delphi	O	O
since	O	O
my	O	O
other	O	O
main	O	O
programming	O	O
language	O	O
,	O	O
C	O	O
#	O	O
,	O	O
does	O	O
not	O	O
exhibit	O	O
things	O	O
like	O	O
memory	O	O
leaks	O	O
in	O	O
the	O	O
same	O	O
way	O	O
.	O	O
If	O	O
you	O	O
only	O	O
wish	O	O
to	O	O
learn	O	O
the	O	O
high-level	O	O
concept	O	O
of	O	O
pointers	O	O
,	O	O
then	O	O
you	O	O
should	O	O
ignore	O	O
the	O	O
parts	O	O
labelled	O	O
``	O	O
Memory	O	O
layout	O	O
''	O	O
in	O	O
the	O	O
explanation	O	O
below	O	O
.	O	O
They	O	O
are	O	O
intended	O	O
to	O	O
give	O	O
examples	O	O
of	O	O
what	O	O
memory	O	O
could	O	O
look	O	O
like	O	O
after	O	O
operations	O	O
,	O	O
but	O	O
they	O	O
are	O	O
more	O	O
low-level	O	O
in	O	O
nature	O	O
.	O	O
However	O	O
,	O	O
in	O	O
order	O	O
to	O	O
accurately	O	O
explain	O	O
how	O	O
buffer	O	O
overruns	O	O
really	O	O
work	O	O
,	O	O
it	O	O
was	O	O
important	O	O
that	O	O
I	O	O
added	O	O
these	O	O
diagrams	O	O
.	O	O
Disclaimer	O	O
:	O	O
For	O	O
all	O	O
intents	O	O
and	O	O
purposes	O	O
,	O	O
this	O	O
explanation	O	O
and	O	O
the	O	O
example	O	O
memory	O	O
layouts	O	O
are	O	O
vastly	O	O
simplified	O	O
.	O	O
There	O	O
's	O	O
more	O	O
overhead	O	O
and	O	O
a	O	O
lot	O	O
more	O	O
details	O	O
you	O	O
would	O	O
need	O	O
to	O	O
know	O	O
if	O	O
you	O	O
need	O	O
to	O	O
deal	O	O
with	O	O
memory	O	O
on	O	O
a	O	O
low-level	O	O
basis	O	O
.	O	O
However	O	O
,	O	O
for	O	O
the	O	O
intents	O	O
of	O	O
explaining	O	O
memory	O	O
and	O	O
pointers	O	O
,	O	O
it	O	O
is	O	O
accurate	O	O
enough	O	O
.	O	O
Let	O	O
's	O	O
assume	O	O
the	O	O
THouse	O	O
class	O	O
used	O	O
below	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
type	O	O
THouse	O	O
=	O	O
class	O	O
private	O	O
FName	O	O
:	O	O
array	O	O
[	O	O
0..9	O	O
]	O	O
of	O	O
Char	O	O
;	O	O
public	O	O
constructor	O	O
Create	O	B-API
(	O	I-API
name	O	I-API
:	O	I-API
PChar	O	I-API
)	O	I-API
;	O	O
end	O	O
;	O	O
When	O	O
you	O	O
initialize	O	O
the	O	O
house	O	O
object	O	O
,	O	O
the	O	O
name	O	O
given	O	O
to	O	O
the	O	O
constructor	O	O
is	O	O
copied	O	O
into	O	O
the	O	O
private	O	O
field	O	O
FName	O	O
.	O	O
There	O	O
is	O	O
a	O	O
reason	O	O
it	O	O
is	O	O
defined	O	O
as	O	O
a	O	O
fixed-size	O	O
array	O	O
.	O	O
In	O	O
memory	O	O
,	O	O
there	O	O
will	O	O
be	O	O
some	O	O
overhead	O	O
associated	O	O
with	O	O
the	O	O
house	O	O
allocation	O	O
,	O	O
I	O	O
'll	O	O
illustrate	O	O
this	O	O
below	O	O
like	O	O
this	O	O
:	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
^	O	O
^	O	O
|	O	O
|	O	O
|	O	O
+-	O	O
the	O	O
FName	O	O
array	O	O
|	O	O
+-	O	O
overhead	O	O
The	O	O
``	O	O
tttt	O	O
''	O	O
area	O	O
is	O	O
overhead	O	O
,	O	O
there	O	O
will	O	O
typically	O	O
be	O	O
more	O	O
of	O	O
this	O	O
for	O	O
various	O	O
types	O	O
of	O	O
runtimes	O	O
and	O	O
languages	O	O
,	O	O
like	O	O
8	O	O
or	O	O
12	O	O
bytes	O	O
.	O	O
It	O	O
is	O	O
imperative	O	O
that	O	O
whatever	O	O
values	O	O
are	O	O
stored	O	O
in	O	O
this	O	O
area	O	O
never	O	O
gets	O	O
changed	O	O
by	O	O
anything	O	O
other	O	O
than	O	O
the	O	O
memory	O	O
allocator	O	O
or	O	O
the	O	O
core	O	O
system	O	O
routines	O	O
,	O	O
or	O	O
you	O	O
risk	O	O
crashing	O	O
the	O	O
program	O	O
.	O	O
Allocate	O	O
memory	O	O
Get	O	O
an	O	O
entrepreneur	O	O
to	O	O
build	O	O
your	O	O
house	O	O
,	O	O
and	O	O
give	O	O
you	O	O
the	O	O
address	O	O
to	O	O
the	O	O
house	O	O
.	O	O
In	O	O
contrast	O	O
to	O	O
the	O	O
real	O	O
world	O	O
,	O	O
memory	O	O
allocation	O	O
can	O	O
not	O	O
be	O	O
told	O	O
where	O	O
to	O	O
allocate	O	O
,	O	O
but	O	O
will	O	O
find	O	O
a	O	O
suitable	O	O
spot	O	O
with	O	O
enough	O	O
room	O	O
,	O	O
and	O	O
report	O	O
back	O	O
the	O	O
address	O	O
to	O	O
the	O	O
allocated	O	O
memory	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
the	O	O
entrepreneur	O	O
will	O	O
choose	O	O
the	O	O
spot	O	O
.	O	O
THouse.Create	O	B-API
(	O	I-API
'My	O	I-API
house	O	I-API
'	O	I-API
)	O	I-API
;	O	O
Memory	O	O
layout	O	O
:	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
1234My	O	O
house	O	O
Keep	O	O
a	O	O
variable	O	O
with	O	O
the	O	O
address	O	O
Write	O	O
the	O	O
address	O	O
to	O	O
your	O	O
new	O	O
house	O	O
down	O	O
on	O	O
a	O	O
piece	O	O
of	O	O
paper	O	O
.	O	O
This	O	O
paper	O	O
will	O	O
serve	O	O
as	O	O
your	O	O
reference	O	O
to	O	O
your	O	O
house	O	O
.	O	O
Without	O	O
this	O	O
piece	O	O
of	O	O
paper	O	O
,	O	O
you	O	O
're	O	O
lost	O	O
,	O	O
and	O	O
can	O	O
not	O	O
find	O	O
the	O	O
house	O	O
,	O	O
unless	O	O
you	O	O
're	O	O
already	O	O
in	O	O
it	O	O
.	O	O
var	O	O
h	O	O
:	O	O
THouse	O	O
;	O	O
begin	O	O
h	O	O
:	O	O
=	O	O
THouse.Create	O	B-API
(	O	I-API
'My	O	I-API
house	O	I-API
'	O	I-API
)	O	I-API
;	O	O
...	O	O
Memory	O	O
layout	O	O
:	O	O
h	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
1234My	O	O
house	O	O
Copy	O	O
pointer	O	O
value	O	O
Just	O	O
write	O	O
the	O	O
address	O	O
on	O	O
a	O	O
new	O	O
piece	O	O
of	O	O
paper	O	O
.	O	O
You	O	O
now	O	O
have	O	O
two	O	O
pieces	O	O
of	O	O
paper	O	O
that	O	O
will	O	O
get	O	O
you	O	O
to	O	O
the	O	O
same	O	O
house	O	O
,	O	O
not	O	O
two	O	O
separate	O	O
houses	O	O
.	O	O
Any	O	O
attempts	O	O
to	O	O
follow	O	O
the	O	O
address	O	O
from	O	O
one	O	O
paper	O	O
and	O	O
rearrange	O	O
the	O	O
furniture	O	O
at	O	O
that	O	O
house	O	O
will	O	O
make	O	O
it	O	O
seem	O	O
that	O	O
the	O	O
other	O	O
house	O	O
has	O	O
been	O	O
modified	O	O
in	O	O
the	O	O
same	O	O
manner	O	O
,	O	O
unless	O	O
you	O	O
can	O	O
explicitly	O	O
detect	O	O
that	O	O
it	O	O
's	O	O
actually	O	O
just	O	O
one	O	O
house	O	O
.	O	O
Note	O	O
This	O	O
is	O	O
usually	O	O
the	O	O
concept	O	O
that	O	O
I	O	O
have	O	O
the	O	O
most	O	O
problem	O	O
explaining	O	O
to	O	O
people	O	O
,	O	O
two	O	O
pointers	O	O
does	O	O
not	O	O
mean	O	O
two	O	O
objects	O	O
or	O	O
memory	O	O
blocks	O	O
.	O	O
var	O	B-API
h1	O	I-API
,	O	I-API
h2	O	I-API
:	O	I-API
THouse	O	I-API
;	O	O
begin	O	O
h1	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h2	O	O
:	O	O
=	O	O
h1	O	O
;	O	O
//	O	O
copies	O	O
the	O	O
address	O	O
,	O	O
not	O	O
the	O	O
house	O	O
...	O	O
h1	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
1234My	O	O
house	O	O
^	O	O
h2	O	O
Freeing	O	O
the	O	O
memory	O	O
Demolish	O	O
the	O	O
house	O	O
.	O	O
You	O	O
can	O	O
then	O	O
later	O	O
on	O	O
reuse	O	O
the	O	O
paper	O	O
for	O	O
a	O	O
new	O	O
address	O	O
if	O	O
you	O	O
so	O	O
wish	O	O
,	O	O
or	O	O
clear	O	O
it	O	O
to	O	O
forget	O	O
the	O	O
address	O	O
to	O	O
the	O	O
house	O	O
that	O	O
no	O	O
longer	O	O
exists	O	O
.	O	O
var	O	O
h	O	O
:	O	O
THouse	O	O
;	O	O
begin	O	O
h	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
...	O	O
h	O	O
;	O	O
:	O	O
=	O	O
nil	O	O
;	O	O
Here	O	O
I	O	O
first	O	O
construct	O	O
the	O	O
house	O	O
,	O	O
and	O	O
get	O	O
hold	O	O
of	O	O
its	O	O
address	O	O
.	O	O
Then	O	O
I	O	O
do	O	O
something	O	O
to	O	O
the	O	O
house	O	O
(	O	O
use	O	O
it	O	O
,	O	O
the	O	O
...	O	O
code	O	O
,	O	O
left	O	O
as	O	O
an	O	O
exercise	O	O
for	O	O
the	O	O
reader	O	O
)	O	O
,	O	O
and	O	O
then	O	O
I	O	O
free	O	O
it	O	O
.	O	O
Lastly	O	O
I	O	O
clear	O	O
the	O	O
address	O	O
from	O	O
my	O	O
variable	O	O
.	O	O
Memory	O	O
layout	O	O
:	O	O
h	O	O
--	O	O
+	O	O
v	O	O
+-	O	O
before	O	O
free	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
|	O	O
1234My	O	O
house	O	O
--	O	O
+	O	O
h	O	O
(	O	O
now	O	O
points	O	O
nowhere	O	O
)	O	O
--	O	O
+	O	O
+-	O	O
after	O	O
free	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
|	O	O
(	O	O
note	O	O
,	O	O
memory	O	O
might	O	O
still	O	O
xx34My	O	O
house	O	O
--	O	O
+	O	O
contain	O	O
some	O	O
data	O	O
)	O	O
Dangling	O	O
pointers	O	O
You	O	O
tell	O	O
your	O	O
entrepreneur	O	O
to	O	O
destroy	O	O
the	O	O
house	O	O
,	O	O
but	O	O
you	O	O
forget	O	O
to	O	O
erase	O	O
the	O	O
address	O	O
from	O	O
your	O	O
piece	O	O
of	O	O
paper	O	O
.	O	O
When	O	O
later	O	O
on	O	O
you	O	O
look	O	O
at	O	O
the	O	O
piece	O	O
of	O	O
paper	O	O
,	O	O
you	O	O
've	O	O
forgotten	O	O
that	O	O
the	O	O
house	O	O
is	O	O
no	O	O
longer	O	O
there	O	O
,	O	O
and	O	O
goes	O	O
to	O	O
visit	O	O
it	O	O
,	O	O
with	O	O
failed	O	O
results	O	O
(	O	O
see	O	O
also	O	O
the	O	O
part	O	O
about	O	O
an	O	O
invalid	O	O
reference	O	O
below	O	O
)	O	O
.	O	O
var	O	O
h	O	O
:	O	O
THouse	O	O
;	O	O
begin	O	O
h	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
...	O	O
h.Free	O	O
;	O	O
...	O	O
//	O	O
forgot	O	O
to	O	O
clear	O	O
h	O	O
here	O	O
h.OpenFrontDoor	B-API	B-API
;	O	O
//	O	O
will	O	O
most	O	O
likely	O	O
fail	O	O
Using	O	O
h	O	O
after	O	O
the	O	O
call	O	O
to	O	O
.Free	O	O
might	O	O
work	O	O
,	O	O
but	O	O
that	O	O
is	O	O
just	O	O
pure	O	O
luck	O	O
.	O	O
Most	O	O
likely	O	O
it	O	O
will	O	O
fail	O	O
,	O	O
at	O	O
a	O	O
customers	O	O
place	O	O
,	O	O
in	O	O
the	O	O
middle	O	O
of	O	O
a	O	O
critical	O	O
operation	O	O
.	O	O
h	O	O
--	O	O
+	O	O
v	O	O
+-	O	O
before	O	O
free	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
|	O	O
1234My	O	O
house	O	O
--	O	O
+	O	O
h	O	O
--	O	O
+	O	O
v	O	O
+-	O	O
after	O	O
free	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
|	O	O
xx34My	O	O
house	O	O
--	O	O
+	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
h	O	O
still	O	O
points	O	O
to	O	O
the	O	O
remnants	O	O
of	O	O
the	O	O
data	O	O
in	O	O
memory	O	O
,	O	O
but	O	O
since	O	O
it	O	O
might	O	O
not	O	O
be	O	O
complete	O	O
,	O	O
using	O	O
it	O	O
as	O	O
before	O	O
might	O	O
fail	O	O
.	O	O
Memory	O	O
leak	O	O
You	O	O
lose	O	O
the	O	O
piece	O	O
of	O	O
paper	O	O
and	O	O
can	O	O
not	O	O
find	O	O
the	O	O
house	O	O
.	O	O
The	O	O
house	O	O
is	O	O
still	O	O
standing	O	O
somewhere	O	O
though	O	O
,	O	O
and	O	O
when	O	O
you	O	O
later	O	O
on	O	O
want	O	O
to	O	O
construct	O	O
a	O	O
new	O	O
house	O	O
,	O	O
you	O	O
can	O	O
not	O	O
reuse	O	O
that	O	O
spot	O	O
.	O	O
var	O	O
h	O	O
:	O	O
THouse	O	O
;	O	O
begin	O	O
h	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
//	O	O
uh-oh	O	O
,	O	O
what	O	O
happened	O	O
to	O	O
our	O	O
first	O	O
house	O	O
?	O	O
...	O	O
h.Free	O	O
;	O	O
h	O	O
:	O	O
=	O	O
nil	O	O
;	O	O
Here	O	O
we	O	O
overwrote	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
h	O	O
variable	O	O
with	O	O
the	O	O
address	O	O
of	O	O
a	O	O
new	O	O
house	O	O
,	O	O
but	O	O
the	O	O
old	O	O
one	O	O
is	O	O
still	O	O
standing	O	O
...	O	O
somewhere	O	O
.	O	O
After	O	O
this	O	O
code	O	O
,	O	O
there	O	O
is	O	O
no	O	O
way	O	O
to	O	O
reach	O	O
that	O	O
house	O	O
,	O	O
and	O	O
it	O	O
will	O	O
be	O	O
left	O	O
standing	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
the	O	O
allocated	O	O
memory	O	O
will	O	O
stay	O	O
allocated	O	O
until	O	O
the	O	O
application	O	O
closes	O	O
,	O	O
at	O	O
which	O	O
point	O	O
the	O	O
operating	O	O
system	O	O
will	O	O
tear	O	O
it	O	O
down	O	O
.	O	O
Memory	O	O
layout	O	O
after	O	O
first	O	O
allocation	O	O
:	O	O
h	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
1234My	O	O
house	O	O
Memory	O	O
layout	O	O
after	O	O
second	O	O
allocation	O	O
:	O	O
h	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
1234My	O	O
house	O	O
5678My	O	O
house	O	O
A	O	O
more	O	O
common	O	O
way	O	O
to	O	O
get	O	O
this	O	O
method	O	O
is	O	O
just	O	O
to	O	O
forget	O	O
to	O	O
free	O	O
something	O	O
,	O	O
instead	O	O
of	O	O
overwriting	O	O
it	O	O
as	O	O
above	O	O
.	O	O
In	O	O
Delphi	O	O
terms	O	O
,	O	O
this	O	O
will	O	O
occur	O	O
with	O	O
the	O	O
following	O	O
method	O	O
:	O	O
procedure	O	O
OpenTheFrontDoorOfANewHouse	O	O
;	O	O
var	O	O
h	O	O
:	O	O
THouse	O	O
;	O	O
begin	O	O
h	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h.OpenFrontDoor	O	B-API
;	O	O
//	O	O
uh-oh	O	O
,	O	O
no	O	O
.Free	O	O
here	O	O
,	O	O
where	O	O
does	O	O
the	O	O
address	O	O
go	O	O
?	O	O
end	O	O
;	O	O
After	O	O
this	O	O
method	O	O
has	O	O
executed	O	O
,	O	O
there	O	O
's	O	O
no	O	O
place	O	O
in	O	O
our	O	O
variables	O	O
that	O	O
the	O	O
address	O	O
to	O	O
the	O	O
house	O	O
exists	O	O
,	O	O
but	O	O
the	O	O
house	O	O
is	O	O
still	O	O
out	O	O
there	O	O
.	O	O
Memory	O	O
layout	O	O
:	O	O
h	O	O
--	O	O
+	O	O
v	O	O
+-	O	O
before	O	O
losing	O	O
pointer	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
|	O	O
1234My	O	O
house	O	O
--	O	O
+	O	O
h	O	O
(	O	O
now	O	O
points	O	O
nowhere	O	O
)	O	O
--	O	O
+	O	O
+-	O	O
after	O	O
losing	O	O
pointer	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
|	O	O
1234My	O	O
house	O	O
--	O	O
+	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
the	O	O
old	O	O
data	O	O
is	O	O
left	O	O
intact	O	O
in	O	O
memory	O	O
,	O	O
and	O	O
will	O	O
not	O	O
be	O	O
reused	O	O
by	O	O
the	O	O
memory	O	O
allocator	O	O
.	O	O
The	O	O
allocator	O	O
keeps	O	O
track	O	O
of	O	O
which	O	O
areas	O	O
of	O	O
memory	O	O
has	O	O
been	O	O
used	O	O
,	O	O
and	O	O
will	O	O
not	O	O
reuse	O	O
them	O	O
unless	O	O
you	O	O
free	O	O
it	O	O
.	O	O
Freeing	O	O
the	O	O
memory	O	O
but	O	O
keeping	O	O
a	O	O
(	O	O
now	O	O
invalid	O	O
)	O	O
reference	O	O
Demolish	O	O
the	O	O
house	O	O
,	O	O
erase	O	O
one	O	O
of	O	O
the	O	O
pieces	O	O
of	O	O
paper	O	O
but	O	O
you	O	O
also	O	O
have	O	O
another	O	O
piece	O	O
of	O	O
paper	O	O
with	O	O
the	O	O
old	O	O
address	O	O
on	O	O
it	O	O
,	O	O
when	O	O
you	O	O
go	O	O
to	O	O
the	O	O
address	O	O
,	O	O
you	O	O
wo	O	O
n't	O	O
find	O	O
a	O	O
house	O	O
,	O	O
but	O	O
you	O	O
might	O	O
find	O	O
something	O	O
that	O	O
resembles	O	O
the	O	O
ruins	O	O
of	O	O
one	O	O
.	O	O
Perhaps	O	O
you	O	O
will	O	O
even	O	O
find	O	O
a	O	O
house	O	O
,	O	O
but	O	O
it	O	O
is	O	O
not	O	O
the	O	O
house	O	O
you	O	O
were	O	O
originally	O	O
given	O	O
the	O	O
address	O	O
to	O	O
,	O	O
and	O	O
thus	O	O
any	O	O
attempts	O	O
to	O	O
use	O	O
it	O	O
as	O	O
though	O	O
it	O	O
belongs	O	O
to	O	O
you	O	O
might	O	O
fail	O	O
horribly	O	O
.	O	O
Sometimes	O	O
you	O	O
might	O	O
even	O	O
find	O	O
that	O	O
a	O	O
neighbouring	O	O
address	O	O
has	O	O
a	O	O
rather	O	O
big	O	O
house	O	O
set	O	O
up	O	O
on	O	O
it	O	O
that	O	O
occupies	O	O
three	O	O
address	O	O
(	O	O
Main	O	O
Street	O	O
1-3	O	O
)	O	O
,	O	O
and	O	O
your	O	O
address	O	O
goes	O	O
to	O	O
the	O	O
middle	O	O
of	O	O
the	O	O
house	O	O
.	O	O
Any	O	O
attempts	O	O
to	O	O
treat	O	O
that	O	O
part	O	O
of	O	O
the	O	O
large	O	O
3-address	O	O
house	O	O
as	O	O
a	O	O
single	O	O
small	O	O
house	O	O
might	O	O
also	O	O
fail	O	O
horribly	O	O
.	O	O
var	O	O
,	O	O
h2	O	O
:	O	O
THouse	O	B-API
;	O	O
begin	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
:	O	O
=	O	O
h1	O	O
;	O	O
//	O	O
copies	O	O
the	O	O
address	O	O
,	O	O
not	O	O
the	O	O
house	O	O
...	O	O
h1.Free	O	O
;	O	O
h1	O	O
:	O	O
=	O	O
nil	O	O
;	O	O
h2.OpenFrontDoor	O	O
;	O	O
//	O	O
uh-oh	O	O
,	O	O
what	O	O
happened	O	O
to	O	O
our	O	O
house	O	O
?	O	O
Here	O	O
the	O	O
house	O	O
was	O	O
torn	O	O
down	O	O
,	O	O
through	O	O
the	O	O
reference	O	O
in	O	O
h1	O	O
,	O	O
and	O	O
while	O	O
h1	O	O
was	O	O
cleared	O	O
as	O	O
well	O	O
,	O	O
h2	O	O
still	O	O
has	O	O
the	O	O
old	O	O
,	O	O
out-of-date	O	O
,	O	O
address	O	O
.	O	O
Access	O	O
to	O	O
the	O	O
house	O	O
that	O	O
is	O	O
no	O	O
longer	O	O
standing	O	O
might	O	O
or	O	O
might	O	O
not	O	O
work	O	O
.	O	O
This	O	O
is	O	O
a	O	O
variation	O	O
of	O	O
the	O	O
dangling	O	O
pointer	O	O
above	O	O
.	O	O
See	O	O
its	O	O
memory	O	O
layout	O	O
.	O	O
Buffer	O	O
overrun	O	O
You	O	O
move	O	O
more	O	O
stuff	O	O
into	O	O
the	O	O
house	O	O
than	O	O
you	O	O
can	O	O
possibly	O	O
fit	O	O
,	O	O
spilling	O	O
into	O	O
the	O	O
neighbours	O	O
house	O	O
or	O	O
yard	O	O
.	O	O
When	O	O
the	O	O
owner	O	O
of	O	O
that	O	O
neighbouring	O	O
house	O	O
later	O	O
on	O	O
comes	O	O
home	O	O
,	O	O
he	O	O
'll	O	O
find	O	O
all	O	O
sorts	O	O
of	O	O
things	O	O
he	O	O
'll	O	O
consider	O	O
his	O	O
own	O	O
.	O	O
This	O	O
is	O	O
the	O	O
reason	O	O
I	O	O
chose	O	O
a	O	O
fixed-size	O	O
array	O	O
.	O	O
To	O	O
set	O	O
the	O	O
stage	O	O
,	O	O
assume	O	O
that	O	O
the	O	O
second	O	O
house	O	O
we	O	O
allocate	O	O
will	O	O
,	O	O
for	O	O
some	O	O
reason	O	O
,	O	O
be	O	O
placed	O	O
before	O	O
the	O	O
first	O	O
one	O	O
in	O	O
memory	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
the	O	O
second	O	O
house	O	O
will	O	O
have	O	O
a	O	O
lower	O	O
address	O	O
than	O	O
the	O	O
first	O	O
one	O	O
.	O	O
Also	O	O
,	O	O
they	O	O
're	O	O
allocated	O	O
right	O	O
next	O	O
to	O	O
each	O	O
other	O	O
.	O	O
Thus	O	O
,	O	O
this	O	O
code	O	O
:	O	O
var	O	O
h1	O	O
,	O	O
h2	O	O
:	O	O
THouse	O	B-API
;	O	O
begin	O	O
h1	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'My	I-API	I-API
house	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h2	O	O
:	O	O
=	O	O
THouse.Create	B-API	O
(	I-API	O
'My	I-API	O
other	I-API	O
house	I-API	O
somewhere	I-API	O
'	I-API	O
)	I-API	O
;	O	O
^	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
-^	O	O
longer	O	O
than	O	O
10	O	O
characters	O	O
0123456789	O	O
--	O	O
10	O	O
characters	O	O
Memory	O	O
layout	O	O
after	O	O
first	O	O
allocation	O	O
:	O	O
h1	O	O
v	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
5678My	O	O
house	O	O
Memory	O	O
layout	O	O
after	O	O
second	O	O
allocation	O	O
:	O	O
h2	O	O
h1	O	O
v	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
--	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
1234My	O	O
other	O	O
house	O	O
somewhereouse	O	O
^	O	O
--	O	O
-+	O	O
--	O	O
^	O	O
|	O	O
+-	O	O
overwritten	O	O
The	O	O
part	O	O
that	O	O
will	O	O
most	O	O
often	O	O
cause	O	O
crash	O	O
is	O	O
when	O	O
you	O	O
overwrite	O	O
important	O	O
parts	O	O
of	O	O
the	O	O
data	O	O
you	O	O
stored	O	O
that	O	O
really	O	O
should	O	O
not	O	O
be	O	O
randomly	O	O
changed	O	O
.	O	O
For	O	O
instance	O	O
it	O	O
might	O	O
not	O	O
be	O	O
a	O	O
problem	O	O
that	O	O
parts	O	O
of	O	O
the	O	O
name	O	O
of	O	O
the	O	O
h1-house	O	O
was	O	O
changed	O	O
,	O	O
in	O	O
terms	O	O
of	O	O
crashing	O	O
the	O	O
program	O	O
,	O	O
but	O	O
overwriting	O	O
the	O	O
overhead	O	O
of	O	O
the	O	O
object	O	O
will	O	O
most	O	O
likely	O	O
crash	O	O
when	O	O
you	O	O
try	O	O
to	O	O
use	O	O
the	O	O
broken	O	O
object	O	O
,	O	O
as	O	O
will	O	O
overwriting	O	O
links	O	O
that	O	O
is	O	O
stored	O	O
to	O	O
other	O	O
objects	O	O
in	O	O
the	O	O
object	O	O
.	O	O
Linked	O	O
lists	O	O
When	O	O
you	O	O
follow	O	O
an	O	O
address	O	O
on	O	O
a	O	O
piece	O	O
of	O	O
paper	O	O
,	O	O
you	O	O
get	O	O
to	O	O
a	O	O
house	O	O
,	O	O
and	O	O
at	O	O
that	O	O
house	O	O
there	O	O
is	O	O
another	O	O
piece	O	O
of	O	O
paper	O	O
with	O	O
a	O	O
new	O	O
address	O	O
on	O	O
it	O	O
,	O	O
for	O	O
the	O	O
next	O	O
house	O	O
in	O	O
the	O	O
chain	O	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
var	O	B-API
h1	O	I-API
,	O	I-API
h2	O	I-API
:	O	I-API
THouse	O	I-API
;	O	O
begin	O	O
h1	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'Home	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h2	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'Cabin	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h1	O	O
.	O	O
:	O	O
=	O	O
h2	O	O
;	O	O
Here	O	O
we	O	O
create	O	O
a	O	O
link	O	O
from	O	O
our	O	O
home	O	O
house	O	O
to	O	O
our	O	O
cabin	O	O
.	O	O
We	O	O
can	O	O
follow	O	O
the	O	O
chain	O	O
until	O	O
a	O	O
house	O	O
has	O	O
no	O	O
NextHouse	O	O
reference	O	O
,	O	O
which	O	O
means	O	O
it	O	O
's	O	O
the	O	O
last	O	O
one	O	O
.	O	O
To	O	O
visit	O	O
all	O	O
our	O	O
houses	O	O
,	O	O
we	O	O
could	O	O
use	O	O
the	O	O
following	O	O
code	O	O
:	O	O
var	O	O
h1	O	O
,	O	O
h2	O	O
:	O	O
THouse	O	O
;	O	O
h	O	O
:	O	O
THouse	O	B-API
;	O	O
begin	O	O
h1	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'Home	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h2	O	O
:	O	O
=	O	O
THouse.Create	B-API	B-API
(	I-API	I-API
'Cabin	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
h1.NextHouse	O	O
:	O	O
=	O	O
h2	O	O
;	O	O
...	O	O
h	O	O
:	O	O
=	O	O
h1	O	O
;	O	O
while	O	O
h	O	O
nil	O	O
do	O	O
begin	O	O
h.LockAllDoors	O	O
;	O	O
h.CloseAllWindows	O	O
;	O	O
h	O	O
:	O	O
=	O	O
h.NextHouse	O	O
;	O	O
end	O	O
;	O	O
Memory	O	O
layout	O	O
(	O	O
added	O	O
NextHouse	O	O
as	O	O
a	O	O
link	O	O
in	O	O
the	O	O
object	O	O
,	O	O
noted	O	O
with	O	O
the	O	O
four	O	O
LLLL	O	O
's	O	O
in	O	O
the	O	O
below	O	O
diagram	O	O
)	O	O
:	O	O
h1	O	O
h2	O	O
v	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNNLLLL	O	O
]	O	O
--	O	O
--	O	O
[	O	O
ttttNNNNNNNNNNLLLL	O	O
]	O	O
1234Home	O	O
+	O	O
5678Cabin	O	O
+	O	O
|	O	O
^	O	O
|	O	O
+	O	O
--	O	O
--	O	O
--	O	O
--	O	O
+	O	O
*	O	O
(	O	O
no	O	O
link	O	O
)	O	O
In	O	O
basic	O	O
terms	O	O
,	O	O
what	O	O
is	O	O
a	O	O
memory	O	O
address	O	O
?	O	O
A	O	O
memory	O	O
address	O	O
is	O	O
in	O	O
basic	O	O
terms	O	O
just	O	O
a	O	O
number	O	O
.	O	O
If	O	O
you	O	O
think	O	O
of	O	O
memory	O	O
as	O	O
a	O	O
big	O	O
array	O	O
of	O	O
bytes	O	O
,	O	O
the	O	O
very	O	O
first	O	O
byte	O	O
has	O	O
the	O	O
address	O	O
0	O	O
,	O	O
the	O	O
next	O	O
one	O	O
the	O	O
address	O	O
1	O	O
and	O	O
so	O	O
on	O	O
upwards	O	O
.	O	O
This	O	O
is	O	O
simplified	O	O
,	O	O
but	O	O
good	O	O
enough	O	O
.	O	O
So	O	O
this	O	O
memory	O	O
layout	O	O
:	O	O
h1	O	O
h2	O	O
v	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNN	O	O
]	O	O
1234My	O	O
house	O	O
5678My	O	O
house	O	O
Might	O	O
have	O	O
these	O	O
two	O	O
address	O	O
(	O	O
the	O	O
leftmost	O	O
-	O	O
is	O	O
address	O	O
0	O	O
)	O	O
:	O	O
h1	O	O
=	O	O
4	O	O
h2	O	O
=	O	O
23	O	O
Which	O	O
means	O	O
that	O	O
our	O	O
linked	O	O
list	O	O
above	O	O
might	O	O
actuall	O	O
look	O	O
like	O	O
this	O	O
:	O	O
h1	O	O
(	O	O
=4	O	O
)	O	O
h2	O	B-API
(	O	I-API
=28	O	I-API
)	O	I-API
v	O	O
v	O	O
--	O	O
-	O	O
[	O	O
ttttNNNNNNNNNNLLLL	O	O
]	O	O
--	O	O
--	O	O
[	O	O
ttttNNNNNNNNNNLLLL	O	O
]	O	O
1234Home	O	O
0028	O	O
5678Cabin	O	O
0000	O	O
|	O	O
^	O	O
|	O	O
+	O	O
--	O	O
--	O	O
--	O	O
--	O	O
+	O	O
*	O	O
(	O	O
no	O	O
link	O	O
)	O	O
It	O	O
is	O	O
typical	O	O
to	O	O
store	O	O
an	O	O
address	O	O
that	O	O
``	O	O
points	O	O
nowhere	O	O
''	O	O
as	O	O
a	O	O
zero-address	O	O
.	O	O
In	O	O
basic	O	O
terms	O	O
,	O	O
what	O	O
is	O	O
a	O	O
pointer	O	O
?	O	O
A	O	O
pointer	O	O
is	O	O
just	O	O
a	O	O
variable	O	O
holding	O	O
a	O	O
memory	O	O
address	O	O
.	O	O
You	O	O
can	O	O
typically	O	O
ask	O	O
the	O	O
programming	O	O
language	O	O
to	O	O
give	O	O
you	O	O
its	O	O
number	O	O
,	O	O
but	O	O
most	O	O
programming	O	O
languages	O	O
and	O	O
runtimes	O	O
tries	O	O
to	O	O
hide	O	O
the	O	O
fact	O	O
that	O	O
there	O	O
is	O	O
a	O	O
number	O	O
beneath	O	O
,	O	O
just	O	O
because	O	O
the	O	O
number	O	O
itself	O	O
does	O	O
not	O	O
really	O	O
hold	O	O
any	O	O
meaning	O	O
to	O	O
you	O	O
.	O	O
It	O	O
is	O	O
best	O	O
to	O	O
think	O	O
of	O	O
a	O	O
pointer	O	O
as	O	O
a	O	O
black	O	O
box	O	O
,	O	O
ie	O	O
.	O	O
you	O	O
do	O	O
n't	O	O
really	O	O
know	O	O
or	O	O
care	O	O
about	O	O
how	O	O
it	O	O
is	O	O
actually	O	O
implemented	O	O
,	O	O
just	O	O
as	O	O
long	O	O
as	O	O
it	O	O
works	O	O
.	O	O
An	O	O
example	O	O
of	O	O
a	O	O
tutorial	O	O
with	O	O
a	O	O
good	O	O
set	O	O
of	O	O
diagrams	O	O
helps	O	O
greatly	O	O
with	O	O
the	O	O
understanding	O	O
of	O	O
pointers	O	O
.	O	O
Joel	O	O
Spolsky	O	O
makes	O	O
some	O	O
good	O	O
points	O	O
about	O	O
understanding	O	O
pointers	O	O
in	O	O
his	O	O
Guerrilla	O	O
Guide	O	O
to	O	O
Interviewing	O	O
article	O	O
:	O	O
For	O	O
some	O	O
reason	O	O
most	O	O
people	O	O
seem	O	O
to	O	O
be	O	O
born	O	O
without	O	O
the	O	O
part	O	O
of	O	O
the	O	O
brain	O	O
that	O	O
understands	O	O
pointers	O	O
.	O	O
This	O	O
is	O	O
an	O	O
aptitude	O	O
thing	O	O
,	O	O
not	O	O
a	O	O
skill	O	O
thing	O	O
it	O	O
requires	O	O
a	O	O
complex	O	O
form	O	O
of	O	O
doubly-indirected	O	O
thinking	O	O
that	O	O
some	O	O
people	O	O
just	O	O
ca	O	O
n't	O	O
do	O	O
.	O	O
In	O	O
my	O	O
first	O	O
Comp	O	O
Sci	O	O
class	O	O
,	O	O
we	O	O
did	O	O
the	O	O
following	O	O
exercise	O	O
.	O	O
Granted	O	O
,	O	O
this	O	O
was	O	O
a	O	O
lecture	O	O
hall	O	O
with	O	O
roughly	O	O
200	O	O
students	O	O
in	O	O
it	O	O
...	O	O
Professor	O	O
writes	O	O
on	O	O
the	O	O
board	O	O
:	O	O
int	B-API	O
John	O	O
stands	O	O
up	O	O
Professor	O	O
writes	O	O
:	O	O
int	B-API	O
*sally	B-API	O
=	B-API	O
Sally	O	O
stands	O	O
up	O	O
,	O	O
points	O	O
at	O	O
john	O	O
Professor	O	O
:	O	O
int	B-API	O
*bill	B-API	O
=	B-API	O
Bill	O	O
stands	O	O
up	O	O
,	O	O
points	O	O
at	O	O
John	O	O
Professor	O	O
:	O	O
int	B-API	O
Sam	O	O
stands	O	O
up	O	O
Professor	O	O
:	O	O
bill	B-API	O
=	B-API	O
Bill	O	O
now	O	O
points	O	O
to	O	O
Sam	O	O
.	O	O
I	O	O
think	O	O
you	O	O
get	O	O
the	O	O
idea	O	O
.	O	O
I	O	O
think	O	O
we	O	O
spent	O	O
about	O	O
an	O	O
hour	O	O
doing	O	O
this	O	O
,	O	O
until	O	O
we	O	O
went	O	O
over	O	O
the	O	O
basics	O	O
of	O	O
pointer	O	O
assignment	O	O
.	O	O
I	O	O
've	O	O
been	O	O
successfully	O	O
using	O	O
it	O	O
on	O	O
Vista	O	O
x64	O	O
for	O	O
some	O	O
light	O	O
Java	O	O
work	O	O
.	O	O
Nothing	O	O
too	O	O
involved	O	O
and	O	O
no	O	O
extra	O	O
plugins	O	O
,	O	O
but	O	O
basic	O	O
Java	O	O
coding	O	O
has	O	O
been	O	O
working	O	O
without	O	O
any	O	O
issues	O	O
.	O	O
I	O	O
'm	O	O
using	O	O
the	O	O
3.4M7	O	O
build	O	O
but	O	O
it	O	O
looks	O	O
like	O	O
the	O	O
3.4	O	O
stable	O	O
build	O	O
supports	O	O
Vista	O	O
x64	O	O
now	O	O
.	O	O
Here	O	O
are	O	O
the	O	O
salient	O	O
points	O	O
:	O	O
You	O	O
ca	O	O
n't	O	O
make	O	O
UI	O	O
control	O	O
calls	O	O
from	O	O
a	O	O
different	O	O
thread	O	O
than	O	O
the	O	O
one	O	O
they	O	O
were	O	O
created	O	O
on	O	O
(	O	O
the	O	O
form	O	O
's	O	O
thread	O	O
)	O	O
.	O	O
Delegate	O	O
invocations	O	O
(	O	O
ie	O	O
,	O	O
event	O	O
hooks	O	O
)	O	O
are	O	O
triggered	O	O
on	O	O
the	O	O
same	O	O
thread	O	O
as	O	O
the	O	O
object	O	O
that	O	O
is	O	O
firing	O	O
the	O	O
event	O	O
.	O	O
So	O	O
,	O	O
if	O	O
you	O	O
have	O	O
a	O	O
separate	O	O
``	O	O
engine	O	O
''	O	O
thread	O	O
doing	O	O
some	O	O
work	O	O
and	O	O
have	O	O
some	O	O
UI	O	O
watching	O	O
for	O	O
state	O	O
changes	O	O
which	O	O
can	O	O
be	O	O
reflected	O	O
in	O	O
the	O	O
UI	O	O
(	O	O
such	O	O
as	O	O
a	O	O
progress	O	O
bar	O	O
or	O	O
whatever	O	O
)	O	O
,	O	O
you	O	O
have	O	O
a	O	O
problem	O	O
.	O	O
The	O	O
engine	O	O
fire	O	O
's	O	O
an	O	O
object	O	O
changed	O	O
event	O	O
which	O	O
has	O	O
been	O	O
hooked	O	O
by	O	O
the	O	O
Form	O	O
.	O	O
But	O	O
the	O	O
callback	O	O
delegate	O	O
that	O	O
the	O	O
Form	O	O
registered	O	O
with	O	O
the	O	O
engine	O	O
gets	O	O
called	O	O
on	O	O
the	O	O
engine	O	O
's	O	O
thread	O	O
not	O	O
on	O	O
the	O	O
Form	O	O
's	O	O
thread	O	O
.	O	O
And	O	O
so	O	O
you	O	O
ca	O	O
n't	O	O
update	O	O
any	O	O
controls	O	O
from	O	O
that	O	O
callback	O	O
.	O	O
Doh	O	O
!	O	O
BeginInvoke	O	O
comes	O	O
to	O	O
the	O	O
rescue	O	O
.	O	O
Just	O	O
use	O	O
this	O	O
simple	O	O
coding	O	O
model	O	O
in	O	O
all	O	O
your	O	O
callback	O	O
methods	O	O
and	O	O
you	O	O
can	O	O
be	O	O
sure	O	O
that	O	O
things	O	O
are	O	O
going	O	O
to	O	O
be	O	O
okay	O	O
:	O	O
private	O	O
delegate	O	O
void	O	O
;	O	O
void	O	B-API
{	O	B-API
//	O	B-API
//	O	O
Make	O	O
sure	O	O
this	O	O
callback	O	O
is	O	O
on	O	O
the	O	O
correct	O	O
thread	O	O
//	O	O
if	O	B-API
(	O	I-API
this.InvokeRequired	B-API	I-API
)	O	I-API
{	O	O
,	O	O
new	O	O
object	O	O
[	O	O
]	O	O
{	O	O
sender	O	O
,	O	O
ea	O	O
}	O	O
)	O	O
;	O	O
return	O	O
;	O	O
}	O	O
//	O	O
//	O	O
Do	O	O
something	O	O
with	O	O
the	O	O
event	O	O
such	O	O
as	O	O
update	O	O
a	O	O
control	O	O
//	O	O
textBox1.Text	B-API	O
=	O	O
``	O	O
Something	O	O
(	O	O
object	O	O
sender	O	O
,	O	O
EventArgs	O	O
ea	O	O
)	O	O
(	O	O
object	O	O
sender	O	O
,	O	O
EventArgs	O	O
ea	O	O
)	O	O
(	O	O
new	O	O
EventArgsDelegate	O	O
(	O	O
SomethingHappened	O	O
)	O	O
It	O	O
's	O	O
quite	O	O
simple	O	O
really	O	O
.	O	O
Use	O	O
InvokeRequired	B-API	O
to	O	O
find	O	O
out	O	O
if	O	O
this	O	O
callback	O	O
happened	O	O
on	O	O
the	O	O
correct	O	O
thread	O	O
.	O	O
If	O	O
not	O	O
,	O	O
then	O	O
reinvoke	O	O
the	O	O
callback	O	O
on	O	O
the	O	O
correct	O	O
thread	O	O
with	O	O
the	O	O
same	O	O
parameters	O	O
.	O	O
You	O	O
can	O	O
reinvoke	O	O
a	O	O
method	O	O
by	O	O
using	O	O
the	O	O
Invoke	B-API	O
(	I-API	O
blocking	I-API	O
)	I-API	O
or	O	O
BeginInvoke	B-API	B-API
(	I-API	I-API
non-blocking	I-API	I-API
)	I-API	I-API
methods	O	O
.	O	O
The	O	O
next	O	O
time	O	O
the	O	O
function	O	O
is	O	O
called	O	O
,	O	O
InvokeRequired	B-API	O
returns	O	O
false	O	O
because	O	O
we	O	O
are	O	O
now	O	O
on	O	O
the	O	O
correct	O	O
thread	O	O
and	O	O
everybody	O	O
is	O	O
happy	O	O
.	O	O
This	O	O
is	O	O
a	O	O
very	O	O
compact	O	O
way	O	O
of	O	O
addressing	O	O
this	O	O
problem	O	O
and	O	O
making	O	O
your	O	O
Forms	O	O
safe	O	O
from	O	O
multi-threaded	O	O
event	O	O
callbacks	O	O
.	O	O
In	O	O
many	O	O
simple	O	O
cases	O	O
,	O	O
you	O	O
can	O	O
use	O	O
the	O	O
MethodInvoker	B-API	O
delegate	O	O
and	O	O
avoid	O	O
the	O	O
need	O	O
to	O	O
create	O	O
your	O	O
own	O	O
delegate	O	O
type	O	O
.	O	O
To	O	O
simplify	O	O
Simon	O	O
's	O	O
code	O	O
a	O	O
bit	O	O
,	O	O
you	O	O
could	O	O
use	O	O
the	O	O
built	O	O
in	O	O
generic	O	O
Action	O	O
delegate	O	O
.	O	O
It	O	O
saves	O	O
peppering	O	O
your	O	O
code	O	O
with	O	O
a	O	O
bunch	O	O
of	O	O
delegate	O	O
types	O	O
you	O	O
do	O	O
n't	O	O
really	O	O
need	O	O
.	O	O
Also	O	O
,	O	O
in	O	O
.NET	O	O
3.5	O	O
they	O	O
added	O	O
a	O	O
params	O	O
parameter	O	O
to	O	O
the	O	O
Invoke	O	O
method	O	O
so	O	O
you	O	O
do	O	O
n't	O	O
have	O	O
to	O	O
define	O	O
a	O	O
temporary	O	O
array	O	O
.	O	O
void	O	O
SomethingHappened	O	O
(	O	O
object	O	O
sender	O	O
,	O	O
EventArgs	O	O
ea	O	O
)	O	O
{	O	O
if	O	O
(	O	O
InvokeRequired	B-API	O
)	O	O
{	O	O
Invoke	B-API	O
(	I-API	O
new	I-API	O
Actionobject	I-API	O
,	I-API	O
EventArgs	I-API	O
(	I-API	O
SomethingHappened	I-API	O
)	I-API	O
,	O	O
sender	O	O
,	O	O
ea	O	O
)	O	O
;	O	O
return	O	O
;	O	O
}	O	O
textBox1.Text	O	O
=	O	O
``	O	O
Something	O	O
happened	O	O
''	O	O
;	O	O
}	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
BrowserPlus	O	O
project	O	O
at	O	O
Yahoo	O	O
.	O	O
It	O	O
looks	O	O
like	O	O
they	O	O
have	O	O
built	O	O
a	O	O
toolkit	O	O
so	O	O
that	O	O
you	O	O
do	O	O
n't	O	O
have	O	O
to	O	O
do	O	O
the	O	O
gritty	O	O
work	O	O
of	O	O
writing	O	O
the	O	O
browser	O	O
plugin	O	O
yourself	O	O
.	O	O
have	O	O
you	O	O
tried	O	O
watching	O	O
the	O	O
traffic	O	O
between	O	O
the	O	O
GUI	O	O
and	O	O
the	O	O
serial	O	O
port	O	O
to	O	O
see	O	O
if	O	O
there	O	O
is	O	O
some	O	O
kind	O	O
of	O	O
special	O	O
command	O	O
being	O	O
sent	O	O
across	O	O
?	O	O
Also	O	O
just	O	O
curious	O	O
,	O	O
Python	O	O
is	O	O
sending	O	O
ASCII	O	O
and	O	O
not	O	O
UTF-8	O	O
or	O	O
something	O	O
else	O	O
right	O	O
?	O	O
The	O	O
reason	O	O
I	O	O
ask	O	O
is	O	O
because	O	O
I	O	O
noticed	O	O
your	O	O
quote	O	O
changes	O	O
for	O	O
the	O	O
strings	O	O
and	O	O
in	O	O
some	O	O
languages	O	O
that	O	O
actually	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
ASCII	O	O
and	O	O
UTF-8	O	O
.	O	O
is	O	O
the	O	O
``	O	O
callout	O	O
''	O	O
device	O	O
,	O	O
it	O	O
's	O	O
what	O	O
you	O	O
use	O	O
when	O	O
you	O	O
establish	O	O
a	O	O
connection	O	O
to	O	O
the	O	O
serial	O	O
device	O	O
and	O	O
start	O	O
talking	O	O
to	O	O
it	O	O
.	O	O
is	O	O
the	O	O
``	O	O
dialin	O	O
''	O	O
device	O	O
,	O	O
used	O	O
for	O	O
monitoring	O	O
a	O	O
port	O	O
for	O	O
incoming	O	O
calls	O	O
for	O	O
e.g	O	O
.	O	O
a	O	O
fax	O	O
listener	O	O
.	O	O
Many	O	O
years	O	O
ago	O	O
,	O	O
to	O	O
provide	O	O
an	O	O
age	O	O
calculator	O	O
gimmick	O	O
on	O	O
my	O	O
website	O	O
,	O	O
I	O	O
wrote	O	O
a	O	O
function	O	O
to	O	O
calculate	O	O
age	O	O
to	O	O
a	O	O
fraction	O	O
.	O	O
This	O	O
is	O	O
a	O	O
quick	O	O
port	O	O
of	O	O
that	O	O
function	O	O
to	O	O
C	O	O
#	O	O
(	O	O
from	O	O
the	O	O
PHP	O	O
version	O	O
)	O	O
.	O	O
I	O	O
'm	O	O
afraid	O	O
I	O	O
have	O	O
n't	O	O
been	O	O
able	O	O
to	O	O
test	O	O
the	O	O
C	O	O
#	O	O
version	O	O
,	O	O
but	O	O
hope	O	O
you	O	O
enjoy	O	O
all	O	O
the	O	O
same	O	O
!	O	O
(	O	O
Admittedly	O	O
this	O	O
is	O	O
a	O	O
bit	O	O
gimmicky	O	O
for	O	O
the	O	O
purposes	O	O
of	O	O
showing	O	O
user	O	O
profiles	O	O
on	O	O
Stack	O	O
Overflow	O	O
,	O	O
but	O	O
maybe	O	O
readers	O	O
will	O	O
find	O	O
some	O	O
use	O	O
for	O	O
it	O	O
.	O	O
:	O	O
-	O	O
)	O	O
)	O	O
double	O	O
AgeDiff	O	O
(	O	O
DateTime	B-API	O
date1	I-API	O
,	O	O
DateTime	B-API	O
date2	I-API	O
)	O	O
{	O	O
double	O	O
years	O	O
=	O	O
date2.Year	B-API	O
-	O	O
date1.Year	B-API	O
;	O	O
/*	O	O
*	O	O
If	O	O
date2	O	O
and	O	O
date1	O	O
+	O	O
round	O	O
(	O	O
date2	O	O
-	O	O
date1	O	O
)	O	O
are	O	O
on	O	O
different	O	O
sides	O	O
*	O	O
of	O	O
29	O	O
February	O	O
,	O	O
then	O	O
our	O	O
partial	O	O
year	O	O
is	O	O
considered	O	O
to	O	O
have	O	O
366	O	O
*	O	O
days	O	O
total	O	O
,	O	O
otherwise	O	O
it	O	O
's	O	O
365	O	O
.	O	O
Note	O	O
that	O	O
59	O	O
is	O	O
the	O	O
day	O	O
number	O	O
*	O	O
of	O	O
29	O	O
Feb.	O	O
*/	O	O
double	O	O
fraction	O	O
=	O	O
365	O	O
+	O	O
(	O	O
DateTime.IsLeapYear	B-API	B-API
(	I-API	I-API
date2.Year	I-API	I-API
)	I-API	I-API
date2.DayOfYear	B-API	O
=	O	O
59	O	O
(	O	O
date1.DayOfYear	B-API	O
59	O	O
||	O	O
date1.DayOfYear	B-API	O
date2.DayOfYear	B-API	O
)	O	O
?	O	O
1	O	O
:	O	O
0	O	O
)	O	O
;	O	O
/*	O	O
*	O	O
The	O	O
only	O	O
really	O	O
nontrivial	O	O
case	O	O
is	O	O
if	O	O
date1	O	O
is	O	O
in	O	O
a	O	O
leap	O	O
year	O	O
,	O	O
*	O	O
and	O	O
date2	O	O
is	O	O
not	O	O
.	O	O
So	O	O
let	O	O
's	O	O
handle	O	O
the	O	O
others	O	O
first	O	O
.	O	O
*/	O	O
if	O	O
(	O	O
DateTime.IsLeapYear	B-API	B-API
(	I-API	I-API
date2.Year	I-API	I-API
)	I-API	I-API
==	O	O
DateTime.IsLeapYear	B-API	B-API
(	I-API	I-API
date1.Year	I-API	I-API
)	I-API	I-API
)	O	O
return	O	O
years	O	O
+	O	O
(	O	O
date2.DayOfYear	B-API	O
-	O	O
date1.DayOfYear	B-API	O
)	O	O
/	O	O
fraction	O	O
;	O	O
/*	O	O
*	O	O
If	O	O
date2	O	O
is	O	O
in	O	O
a	O	O
leap	O	O
year	O	O
,	O	O
but	O	O
date1	O	O
is	O	O
not	O	O
and	O	O
is	O	O
March	O	O
or	O	O
*	O	O
beyond	O	O
,	O	O
shift	O	O
up	O	O
by	O	O
a	O	O
day	O	O
.	O	O
*/	O	O
if	O	O
(	O	O
DateTime.IsLeapYear	B-API	B-API
(	I-API	I-API
date2.Year	I-API	I-API
)	I-API	I-API
)	O	O
{	O	O
return	O	O
years	O	O
+	O	O
(	O	O
date2.DayOfYear	B-API	O
-	O	O
date1.DayOfYear	B-API	O
-	O	O
(	O	O
date1.DayOfYear	B-API	O
=	O	O
59	O	O
?	O	O
1	O	O
:	O	O
0	O	O
)	O	O
)	O	O
/	O	O
fraction	O	O
;	O	O
}	O	O
/*	O	O
*	O	O
If	O	O
date1	O	O
is	O	O
not	O	O
on	O	O
29	O	O
February	O	O
,	O	O
shift	O	O
down	O	O
date1	O	O
by	O	O
a	O	O
day	O	O
if	O	O
*	O	O
March	O	O
or	O	O
later	O	O
.	O	O
Proceed	O	O
normally	O	O
.	O	O
*/	O	O
if	O	O
(	O	O
date1.DayOfYear	B-API	O
!	O	O
=	O	O
59	O	O
)	O	O
{	O	O
return	O	O
years	O	O
+	O	O
(	O	O
date2.DayOfYear	B-API	O
-	O	O
date1.DayOfYear	B-API	O
+	O	O
(	O	O
date1.DayOfYear	B-API	O
59	O	O
?	O	O
1	O	O
:	O	O
0	O	O
)	O	O
)	O	O
/	O	O
fraction	O	O
;	O	O
}	O	O
/*	O	O
*	O	O
Okay	O	O
,	O	O
here	O	O
date1	O	O
is	O	O
on	O	O
29	O	O
February	O	O
,	O	O
and	O	O
date2	O	O
is	O	O
not	O	O
on	O	O
a	O	O
leap	O	O
*	O	O
year	O	O
.	O	O
What	O	O
to	O	O
do	O	O
now	O	O
?	O	O
On	O	O
28	O	O
Feb	O	O
in	O	O
date2	O	O
's	O	O
year	O	O
,	O	O
the	O	O
``	O	O
age	O	O
''	O	O
*	O	O
should	O	O
be	O	O
just	O	O
shy	O	O
of	O	O
a	O	O
whole	O	O
number	O	O
,	O	O
and	O	O
on	O	O
1	O	O
Mar	O	O
should	O	O
be	O	O
*	O	O
just	O	O
over	O	O
.	O	O
Perhaps	O	O
the	O	O
easiest	O	O
way	O	O
is	O	O
to	O	O
a	O	O
point	O	O
halfway	O	O
*	O	O
between	O	O
those	O	O
two	O	O
:	O	O
58.5	O	O
.	O	O
*/	O	O
return	O	O
years	O	O
+	O	O
(	O	O
date2.DayOfYear	B-API	O
-	O	O
58.5	O	O
)	O	O
/	O	O
fraction	O	O
;	O	O
}	O	O
The	O	O
best	O	O
way	O	O
that	O	O
I	O	O
know	O	O
of	O	O
because	O	O
of	O	O
leap	O	O
years	O	O
and	O	O
everything	O	O
is	O	O
:	O	O
DateTime	B-API	O
birthDate	I-API	O
=	I-API	O
new	I-API	O
;	O	O
int	O	O
age	O	O
=	O	O
.TotalDays	O	O
/	O	O
DateTime	B-API	O
(	I-API	O
2000,3,1	I-API	O
)	I-API	O
int	O	O
)	O	O
Math.Floor	B-API	B-API
(	O	I-API
(	O	I-API
DateTime.Now	B-API	I-API
-	O	I-API
birthDate	O	I-API
)	O	I-API
Hope	O	O
this	O	O
helps	O	O
.	O	O
Another	O	O
function	O	O
,	O	O
not	O	O
my	O	O
me	O	O
but	O	O
found	O	O
on	O	O
the	O	O
web	O	O
and	O	O
a	O	O
bit	O	O
refined	O	O
:	O	O
public	O	O
static	O	O
int	O	O
GetAge	O	B-API
(	O	I-API
DateTime	O	I-API
birthDate	O	I-API
)	O	I-API
{	O	O
DateTime	O	O
n	O	O
=	O	O
DateTime.Now	B-API	B-API
;	O	O
//	O	O
To	O	O
avoid	O	O
a	O	O
race	O	O
condition	O	O
around	O	O
midnight	O	O
int	O	O
age	O	O
=	O	O
n.Year	B-API	O
-	O	O
birthDate.Year	B-API	O
;	O	O
if	O	O
(	O	O
n.Month	B-API	O
birthDate.Month	B-API	O
||	O	O
(	O	O
n.Month	B-API	O
==	O	O
birthDate.Month	B-API	O
n.Day	B-API	O
birthDate.Day	B-API	O
)	O	O
)	O	O
age	O	O
--	O	O
;	O	O
return	O	O
age	O	O
;	O	O
}	O	O
Just	O	O
two	O	O
things	O	O
that	O	O
come	O	O
into	O	O
my	O	O
mind	O	O
:	O	O
What	O	O
about	O	O
people	O	O
from	O	O
countries	O	O
that	O	O
do	O	O
not	O	O
use	O	O
the	O	O
gregorian	O	O
calendar	O	O
?	O	O
DateTime.Now	B-API	B-API
is	O	O
in	O	O
the	O	O
server-specific	O	O
culture	O	O
i	O	O
think	O	O
.	O	O
I	O	O
have	O	O
absolutely	O	O
0	O	O
knowledge	O	O
about	O	O
actually	O	O
working	O	O
with	O	O
Asian	O	O
calendars	O	O
and	O	O
I	O	O
do	O	O
not	O	O
know	O	O
if	O	O
there	O	O
is	O	O
an	O	O
easy	O	O
way	O	O
to	O	O
convert	O	O
dates	O	O
between	O	O
calendars	O	O
,	O	O
but	O	O
just	O	O
in	O	O
case	O	O
you	O	O
're	O	O
wondering	O	O
about	O	O
those	O	O
chinese	O	O
guys	O	O
from	O	O
the	O	O
year	O	O
4660	O	O
:	O	O
-	O	O
)	O	O
For	O	O
some	O	O
reason	O	O
Jeff	O	O
's	O	O
code	O	O
did	O	O
n't	O	O
seem	O	O
simple	O	O
enough	O	O
.	O	O
To	O	O
me	O	O
this	O	O
seems	O	O
simpler	O	O
and	O	O
easier	O	O
to	O	O
understand	O	O
:	O	O
DateTime	O	O
today	O	O
=	O	O
DateTime.Today	B-API	B-API
;	O	O
int	O	O
age	O	O
=	O	O
today.Year	B-API	B-API
-	O	O
bday.Year	B-API	O
;	O	O
if	O	O
(	O	O
bday	O	O
today.AddYears	B-API	B-API
(	O	I-API
-age	O	I-API
)	O	I-API
)	O	O
age	O	O
--	O	O
;	O	O
However	O	O
,	O	O
this	O	O
assumes	O	O
you	O	O
are	O	O
looking	O	O
for	O	O
the	O	O
western	O	O
idea	O	O
of	O	O
age	O	O
and	O	O
not	O	O
using	O	O
East	O	O
Asian	O	O
reckoning	O	O
.	O	O
This	O	O
is	O	O
the	O	O
version	O	O
we	O	O
use	O	O
here	O	O
.	O	O
It	O	O
works	O	O
,	O	O
and	O	O
it	O	O
's	O	O
fairly	O	O
simple	O	O
.	O	O
It	O	O
's	O	O
the	O	O
same	O	O
idea	O	O
as	O	O
Jeff	O	O
's	O	O
but	O	O
I	O	O
think	O	O
it	O	O
's	O	O
a	O	O
little	O	O
clearer	O	O
because	O	O
it	O	O
separates	O	O
out	O	O
the	O	O
logic	O	O
for	O	O
subtracting	O	O
one	O	O
,	O	O
so	O	O
it	O	O
's	O	O
a	O	O
little	O	O
easier	O	O
to	O	O
understand	O	O
.	O	O
public	O	O
static	O	O
int	O	O
GetAge	O	O
(	O	O
this	O	O
dateOfBirth	O	O
,	O	O
DateTime	O	O
dateAsAt	O	O
)	O	O
{	O	O
return	O	O
dateAsAt.Year	B-API	B-API
-	O	O
dateOfBirth.Year	B-API	B-API
-	O	O
(	O	O
dateOfBirth.DayOfYear	B-API	O
dateAsAt.DayOfYear	B-API	O
?	O	O
0	O	O
:	O	O
1	O	O
)	O	O
;	O	O
}	O	O
You	O	O
could	O	O
expand	O	O
the	O	O
ternary	O	O
operator	O	O
to	O	O
make	O	O
it	O	O
even	O	O
clearer	O	O
,	O	O
if	O	O
you	O	O
think	O	O
that	O	O
sort	O	O
of	O	O
thing	O	O
is	O	O
unclear	O	O
.	O	O
Obviously	O	O
this	O	O
is	O	O
done	O	O
as	O	O
an	O	O
extension	O	O
method	O	O
on	O	O
DateTime	O	O
,	O	O
but	O	O
clearly	O	O
you	O	O
can	O	O
grab	O	O
that	O	O
one	O	O
line	O	O
of	O	O
code	O	O
that	O	O
does	O	O
the	O	O
work	O	O
and	O	O
put	O	O
it	O	O
anywhere	O	O
.	O	O
Here	O	O
we	O	O
have	O	O
another	O	O
overload	O	O
of	O	O
the	O	O
Extension	O	O
method	O	O
that	O	O
passes	O	O
in	O	O
,	O	O
just	O	O
for	O	O
completeness	O	O
.	O	O
Some	O	O
object	O	O
suppose	O	O
the	O	O
.dispose	B-API	B-API
(	I-API	I-API
)	I-API	I-API
method	O	O
which	O	O
forces	O	O
the	O	O
resource	O	O
to	O	O
be	O	O
removed	O	O
from	O	O
memory	O	O
.	O	O
No	O	O
do	O	O
n't	O	O
null	O	O
objects	O	O
.	O	O
You	O	O
can	O	O
check	O	O
out	O	O
http	O	O
:	O	O
//codebetter.com/blogs/karlseguin/archive/2008/04/27/foundations-of-programming-pt-7-back-to-basics-memory.aspx	O	O
for	O	O
more	O	O
information	O	O
,	O	O
but	O	O
setting	O	O
things	O	O
to	O	O
null	O	O
wo	O	O
n't	O	O
do	O	O
anything	O	O
,	O	O
except	O	O
dirty	O	O
your	O	O
code	O	O
.	O	O
The	O	O
only	O	O
time	O	O
you	O	O
should	O	O
set	O	O
a	O	O
variable	O	O
to	O	O
null	O	O
is	O	O
when	O	O
the	O	O
variable	O	O
does	O	O
not	O	O
go	O	O
out	O	O
of	O	O
scope	O	O
and	O	O
you	O	O
no	O	O
longer	O	O
need	O	O
the	O	O
data	O	O
associated	O	O
with	O	O
it	O	O
.	O	O
Otherwise	O	O
there	O	O
is	O	O
no	O	O
need	O	O
.	O	O
Also	O	O
:	O	O
using	O	O
(	O	O
SomeObject	O	O
object	O	O
=	O	O
new	O	O
SomeObject	O	O
(	O	O
)	O	O
)	O	O
{	O	O
//	O	O
do	O	O
stuff	O	O
with	O	O
the	O	O
object	O	O
}	O	O
//	O	O
the	O	O
object	O	O
will	O	O
be	O	O
disposed	O	O
of	O	O
There	O	O
are	O	O
some	O	O
cases	O	O
where	O	O
it	O	O
makes	O	O
sense	O	O
to	O	O
null	O	O
references	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
when	O	O
you	O	O
're	O	O
writing	O	O
a	O	O
collection	O	O
--	O	O
like	O	O
a	O	O
priority	O	O
queue	O	O
--	O	O
and	O	O
by	O	O
your	O	O
contract	O	O
,	O	O
you	O	O
should	O	O
n't	O	O
be	O	O
keeping	O	O
those	O	O
objects	O	O
alive	O	O
for	O	O
the	O	O
client	O	O
after	O	O
the	O	O
client	O	O
has	O	O
removed	O	O
them	O	O
from	O	O
the	O	O
queue	O	O
.	O	O
But	O	O
this	O	O
sort	O	O
of	O	O
thing	O	O
only	O	O
matters	O	O
in	O	O
long	O	O
lived	O	O
collections	O	O
.	O	O
If	O	O
the	O	O
queue	O	O
's	O	O
not	O	O
going	O	O
to	O	O
survive	O	O
the	O	O
end	O	O
of	O	O
the	O	O
function	O	O
it	O	O
was	O	O
created	O	O
in	O	O
,	O	O
then	O	O
it	O	O
matters	O	O
a	O	O
whole	O	O
lot	O	O
less	O	O
.	O	O
On	O	O
a	O	O
whole	O	O
,	O	O
you	O	O
really	O	O
should	O	O
n't	O	O
bother	O	O
.	O	O
Let	O	O
the	O	O
compiler	O	O
and	O	O
GC	O	O
do	O	O
their	O	O
jobs	O	O
so	O	O
you	O	O
can	O	O
do	O	O
yours	O	O
.	O	O
Karl	O	O
is	O	O
absolutely	O	O
correct	O	O
,	O	O
there	O	O
is	O	O
no	O	O
need	O	O
to	O	O
set	O	O
objects	O	O
to	O	O
null	O	O
after	O	O
use	O	O
.	O	O
If	O	O
an	O	O
object	O	O
implements	O	O
,	O	O
just	O	O
make	O	O
sure	O	O
you	O	O
call	O	O
IDisposable.Dispose	B-API	B-API
(	I-API	I-API
)	I-API	I-API
when	O	O
you	O	O
're	O	O
done	O	O
with	O	O
that	O	O
object	O	O
(	O	O
wrapped	O	O
in	O	O
a	O	O
..	O	O
,	O	O
or	O	O
,	O	O
a	O	O
using	B-API	B-API
(	I-API	I-API
)	I-API	I-API
block	O	O
)	O	O
.	O	O
But	O	O
even	O	O
if	O	O
you	O	O
do	O	O
n't	O	O
remember	O	O
to	O	O
call	O	O
Dispose	B-API	B-API
(	I-API	I-API
)	I-API	I-API
,	O	O
the	O	O
finaliser	O	O
method	O	O
on	O	O
the	O	O
object	O	O
should	O	O
be	O	O
calling	O	O
Dispose	B-API	O
(	I-API	O
)	I-API	O
for	O	O
you	O	O
.	O	O
I	O	O
thought	O	O
this	O	O
was	O	O
a	O	O
good	O	O
treatment	O	O
:	O	O
Digging	O	O
into	O	O
IDisposable	O	O
and	O	O
this	O	O
Understanding	O	O
IDisposable	O	O
There	O	O
is	O	O
n't	O	O
any	O	O
point	O	O
in	O	O
trying	O	O
to	O	O
second	O	O
guess	O	O
the	O	O
GC	O	O
and	O	O
its	O	O
management	O	O
strategies	O	O
because	O	O
it	O	O
's	O	O
self	O	O
tuning	O	O
and	O	O
opaque	O	O
.	O	O
There	O	O
was	O	O
a	O	O
good	O	O
discussion	O	O
about	O	O
the	O	O
inner	O	O
workings	O	O
with	O	O
Jeffrey	O	O
Richter	O	O
on	O	O
Dot	O	O
Net	O	O
Rocks	O	O
here	O	O
:	O	O
Jeffrey	O	O
Richter	O	O
on	O	O
the	O	O
Windows	O	O
Memory	O	O
Model	O	O
and	O	O
Richters	O	O
book	O	O
CLR	O	O
via	O	O
C	O	O
#	O	O
chapter	O	O
20	O	O
has	O	O
a	O	O
great	O	O
treatment	O	O
:	O	O
If	O	O
you	O	O
have	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
you	O	O
should	O	O
be	O	O
able	O	O
to	O	O
use	O	O
the	O	O
BinaryReader	O	O
class	O	O
and	O	O
set	O	O
values	O	O
on	O	O
NewStuff	O	O
using	O	O
the	O	O
available	O	O
ReadX	O	O
methods	O	O
.	O	O
From	O	O
what	O	O
I	O	O
can	O	O
see	O	O
in	O	O
that	O	O
context	O	O
,	O	O
you	O	O
do	O	O
n't	O	O
need	O	O
to	O	O
copy	O	O
SomeByteArray	O	O
into	O	O
a	O	O
buffer	O	O
.	O	O
You	O	O
simply	O	O
need	O	O
to	O	O
get	O	O
the	O	O
handle	O	O
from	O	O
SomeByteArray	O	O
,	O	O
pin	O	O
it	O	O
,	O	O
copy	O	O
the	O	O
IntPtr	O	O
data	O	O
using	O	O
PtrToStructure	B-API	O
and	O	O
then	O	O
release	O	O
.	O	O
No	O	O
need	O	O
for	O	O
a	O	O
copy	O	O
.	O	O
That	O	O
would	O	O
be	O	O
:	O	O
NewStuff	O	O
ByteArrayToNewStuff	O	O
(	O	O
byte	O	O
[	O	O
]	O	O
bytes	O	O
)	O	O
{	O	O
GCHandle	O	O
handle	O	O
=	O	O
GCHandle.Alloc	B-API	B-API
(	I-API	I-API
bytes	I-API	I-API
,	I-API	I-API
GCHandleType.Pinned	I-API	I-API
)	I-API	I-API
;	O	O
NewStuff	O	O
stuff	O	O
=	O	O
(	O	O
NewStuff	O	O
)	O	O
Marshal.PtrToStructure	B-API	O
(	I-API	O
handle.AddrOfPinnedObject	B-API	O
(	I-API	O
)	I-API	O
,	O	O
typeof	O	O
(	O	O
NewStuff	O	O
)	O	O
)	O	O
;	O	O
handle.Free	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
return	O	O
stuff	O	O
;	O	O
}	O	O
Generic	O	O
version	O	O
:	O	O
T	O	O
ByteArrayToStructureT	O	O
(	O	O
byte	O	O
[	O	O
]	O	O
bytes	O	O
)	O	O
where	O	O
T	O	O
:	O	O
struct	O	O
{	O	O
GCHandle	O	O
handle	O	O
=	O	O
GCHandle.Alloc	B-API	B-API
(	I-API	I-API
bytes	I-API	I-API
,	I-API	I-API
GCHandleType.Pinned	I-API	I-API
)	I-API	I-API
;	O	O
T	O	O
stuff	O	O
=	O	O
(	O	O
T	O	O
)	O	O
Marshal.PtrToStructure	O	B-API
(	O	I-API
handle.AddrOfPinnedObject	B-API	I-API
(	I-API	I-API
)	I-API	I-API
,	O	I-API
typeof	O	I-API
(	O	I-API
T	O	I-API
)	O	I-API
)	O	I-API
;	O	O
handle.Free	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
return	O	O
stuff	O	O
;	O	O
}	O	O
...	O	O
As	O	O
of	O	O
.Net	O	O
1.1	O	O
the	O	O
only	O	O
available	O	O
method	O	O
is	O	O
reaching	O	O
into	O	O
the	O	O
java	O	O
libraries	O	O
.	O	O
Using	O	O
the	O	O
Zip	O	O
Classes	O	O
in	O	O
the	O	O
J	O	O
#	O	O
Class	O	O
Libraries	O	O
to	O	O
Compress	O	O
Files	O	O
and	O	O
Data	O	O
with	O	O
C	O	O
#	O	O
Not	O	O
sure	O	O
if	O	O
this	O	O
has	O	O
changed	O	O
in	O	O
recent	O	O
versions	O	O
.	O	O
I	O	O
've	O	O
always	O	O
used	O	O
the	O	O
SharpZip	O	O
Library	O	O
.	O	O
Here	O	O
's	O	O
a	O	O
link	O	O
You	O	O
can	O	O
use	O	O
a	O	O
3rd-party	O	O
library	O	O
such	O	O
as	O	O
SharpZip	O	O
as	O	O
Tom	O	O
pointed	O	O
out	O	O
.	O	O
Another	O	O
way	O	O
(	O	O
without	O	O
going	O	O
3rd-party	O	O
)	O	O
is	O	O
to	O	O
use	O	O
the	O	O
Windows	B-API	B-API
Shell	I-API	I-API
API	I-API	I-API
.	O	O
You	O	O
'll	O	O
need	O	O
to	O	O
set	O	O
a	O	O
reference	O	O
to	O	O
the	O	O
Microsoft	O	O
Shell	O	O
Controls	O	O
and	O	O
Automation	O	O
COM	O	O
library	O	O
in	O	O
your	O	O
C	O	O
#	O	O
project	O	O
.	O	O
Gerald	O	O
Gibson	O	O
has	O	O
an	O	O
example	O	O
at	O	O
:	O	O
http	O	O
:	O	O
//geraldgibson.net/dnn/Home/CZipFileCompression/tabid/148/Default.aspx	O	O
Internet	O	O
Archive	O	O
's	O	O
copy	O	O
of	O	O
the	O	O
dead	O	O
page	O	O
This	O	O
is	O	O
very	O	O
easy	O	O
to	O	O
do	O	O
in	O	O
java	O	O
,	O	O
and	O	O
as	O	O
stated	O	O
above	O	O
you	O	O
can	O	O
reach	O	O
into	O	O
the	O	O
java.util.zip	B-API	O
libraries	O	O
from	O	O
C	O	O
#	O	O
.	O	O
For	O	O
references	O	O
see	O	O
:	O	O
java.util.zip	B-API	O
javadocs	O	O
sample	O	O
code	O	O
I	O	O
used	O	O
this	O	O
a	O	O
while	O	O
ago	O	O
to	O	O
do	O	O
a	O	O
deep	O	O
(	O	O
recursive	O	O
)	O	O
zip	O	O
of	O	O
a	O	O
folder	O	O
structure	O	O
,	O	O
but	O	O
I	O	O
do	O	O
n't	O	O
think	O	O
I	O	O
ever	O	O
used	O	O
the	O	O
unzipping	O	O
.	O	O
If	O	O
I	O	O
'm	O	O
so	O	O
motivated	O	O
I	O	O
may	O	O
pull	O	O
that	O	O
code	O	O
out	O	O
and	O	O
edit	O	O
it	O	O
into	O	O
here	O	O
later	O	O
.	O	O
The	O	O
.Net	O	O
2.0	O	O
framework	O	O
namespace	O	O
supports	O	O
GZip	O	O
and	O	O
Deflate	O	O
algorithms	O	O
.	O	O
Here	O	O
are	O	O
two	O	O
methods	O	O
that	O	O
compress	O	O
and	O	O
decompress	O	O
a	O	O
byte	O	O
stream	O	O
which	O	O
you	O	O
can	O	O
get	O	O
from	O	O
your	O	O
file	O	O
object	O	O
.	O	O
You	O	O
can	O	O
subsitute	O	O
for	O	O
in	O	O
the	O	O
methods	O	O
below	O	O
to	O	O
use	O	O
that	O	O
algorithm	O	O
.	O	O
This	O	O
still	O	O
leaves	O	O
the	O	O
problem	O	O
of	O	O
handling	O	O
files	O	O
compressed	O	O
with	O	O
different	O	O
algorithms	O	O
though	O	O
.	O	O
public	O	O
static	O	O
byte	O	O
[	O	O
]	O	O
Compress	O	O
(	O	O
byte	O	O
[	O	O
]	O	O
data	O	O
)	O	O
{	O	O
MemoryStream	O	O
output	O	O
=	O	O
new	O	O
MemoryStream	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
GZipStream	O	O
gzip	O	O
=	O	O
new	O	O
GZipStream	B-API	O
(	I-API	O
output	I-API	O
,	I-API	O
CompressionMode.Compress	I-API	B-API
,	I-API	O
true	I-API	O
)	I-API	O
;	O	O
gzip.Write	B-API	B-API
(	I-API	I-API
data	I-API	I-API
,	I-API	I-API
0	I-API	I-API
,	I-API	I-API
data.Length	I-API	I-API
)	I-API	I-API
;	O	O
gzip.Close	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
return	O	O
output.ToArray	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
}	O	O
public	O	O
static	O	O
byte	O	O
[	O	O
]	O	O
Decompress	B-API	O
(	I-API	O
byte	I-API	O
[	I-API	O
]	I-API	O
data	I-API	O
)	I-API	O
{	O	O
MemoryStream	O	O
input	O	O
=	O	O
new	O	O
MemoryStream	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
input.Write	B-API	B-API
(	I-API	I-API
data	I-API	I-API
,	I-API	I-API
0	I-API	I-API
,	I-API	I-API
data.Length	I-API	I-API
)	I-API	I-API
;	O	O
input.Position	O	O
=	O	O
0	O	O
;	O	O
GZipStream	O	O
gzip	O	O
=	O	O
new	O	O
GZipStream	B-API	O
(	I-API	O
input	I-API	O
,	I-API	O
CompressionMode.Decompress	I-API	B-API
,	I-API	O
true	I-API	O
)	I-API	O
;	O	O
MemoryStream	O	O
output	O	O
=	O	O
new	O	O
MemoryStream	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
byte	O	O
[	O	O
]	O	O
buff	O	O
=	O	O
new	O	O
byte	O	O
[	O	O
64	O	O
]	O	O
;	O	O
int	O	O
read	O	O
=	O	O
-1	O	O
;	O	O
read	O	O
=	O	O
gzip.Read	B-API	O
(	I-API	O
buff	I-API	O
,	I-API	O
0	I-API	O
,	I-API	O
buff.Length	I-API	O
)	I-API	O
;	O	O
while	O	O
(	O	O
read	O	O
0	O	O
)	O	O
{	O	O
output.Write	B-API	O
(	I-API	O
buff	I-API	O
,	I-API	O
0	I-API	O
,	I-API	O
read	I-API	O
)	I-API	O
;	O	O
read	O	O
=	O	O
gzip.Read	B-API	O
(	I-API	O
buff	I-API	O
,	I-API	O
0	I-API	O
,	I-API	O
buff.Length	I-API	O
)	I-API	O
;	O	O
}	O	O
gzip.Close	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
return	O	O
output.ToArray	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
}	O	O
Can	O	O
you	O	O
show	O	O
us	O	O
your	O	O
code	O	O
?	O	O
The	O	O
example	O	O
on	O	O
the	O	O
Python	O	O
docs	O	O
is	O	O
quite	O	O
straightforward	O	O
:	O	O
groups	O	O
=	O	O
[	O	O
]	O	O
uniquekeys	O	O
=	O	O
[	O	O
]	O	O
for	O	O
k	O	O
,	O	O
g	O	O
in	O	O
groupby	B-API	O
(	I-API	O
data	I-API	O
,	I-API	O
keyfunc	I-API	O
)	I-API	O
:	O	O
groups.append	B-API	B-API
(	I-API	O
list	I-API	O
(	I-API	O
g	I-API	O
)	I-API	O
)	O	O
#	O	O
Store	O	O
group	O	O
iterator	O	O
as	O	O
a	O	O
list	O	O
uniquekeys.append	B-API	B-API
(	I-API	I-API
k	I-API	I-API
)	I-API	I-API
So	O	O
in	O	O
your	O	O
case	O	O
,	O	O
data	O	O
is	O	O
a	O	O
list	O	O
of	O	O
nodes	O	O
,	O	O
keyfunc	O	O
is	O	O
where	O	O
the	O	O
logic	O	O
of	O	O
your	O	O
criteria	O	O
function	O	O
goes	O	O
and	O	O
then	O	O
groupby	B-API	B-API
(	I-API	I-API
)	I-API	I-API
groups	O	O
the	O	O
data	O	O
.	O	O
You	O	O
must	O	O
be	O	O
careful	O	O
to	O	O
sort	O	O
the	O	O
data	O	O
by	O	O
the	O	O
criteria	O	O
before	O	O
you	O	O
call	O	O
or	O	O
it	O	O
wo	O	O
n't	O	O
work	O	O
.	O	O
method	O	O
actually	O	O
just	O	O
iterates	O	O
through	O	O
a	O	O
list	O	O
and	O	O
whenever	O	O
the	O	O
key	O	O
changes	O	O
it	O	O
creates	O	O
a	O	O
new	O	O
group	O	O
.	O	O
You	O	O
may	O	O
find	O	O
the	O	O
solution	O	O
in	O	O
SQL	O	O
User	O	O
Defined	O	O
Function	O	O
to	O	O
Parse	O	O
a	O	O
Delimited	O	O
String	O	O
helpful	O	O
(	O	O
from	O	O
The	O	O
Code	O	O
Project	O	O
)	O	O
.	O	O
You	O	O
can	O	O
use	O	O
this	O	O
simple	O	O
logic	O	O
:	O	O
Declare	O	O
@	O	O
products	O	O
varchar	O	O
(	O	O
200	O	O
)	O	O
=	O	O
'1|20|3|343|44|6|8765'	O	O
Declare	O	O
@	O	O
individual	O	O
varchar	O	O
(	O	O
20	O	O
)	O	O
=	O	O
null	O	O
WHILE	O	O
LEN	O	O
(	O	O
@	O	O
products	O	O
)	O	O
0	O	O
BEGIN	O	O
IF	O	O
PATINDEX	O	O
(	O	O
'	O	O
%	O	O
|	O	O
%	O	O
'	O	O
,	O	O
@	O	O
products	O	O
)	O	O
0	O	O
BEGIN	O	O
SET	O	O
@	O	O
individual	O	O
=	O	O
SUBSTRING	B-API	O
(	I-API	O
@	I-API	O
products	I-API	O
,	I-API	O
0	I-API	O
,	I-API	O
)	I-API	O
PATINDEX	B-API	O
(	I-API	O
'	I-API	O
%	I-API	O
|	I-API	O
%	I-API	O
'	I-API	O
,	I-API	O
@	I-API	O
)	I-API	O
products	O	O
)	O	O
)	O	O
SELECT	O	O
@	O	O
individual	O	O
SET	O	O
@	O	O
products	O	O
=	O	O
SUBSTRING	B-API	O
(	I-API	O
@	I-API	O
products	I-API	O
,	I-API	O
LEN	B-API	O
(	I-API	O
@	I-API	O
individual	I-API	O
+	I-API	O
'|	I-API	O
'	I-API	O
)	I-API	O
+	O	O
1	O	O
,	O	O
LEN	B-API	O
(	I-API	O
@	I-API	O
products	I-API	O
)	I-API	O
)	O	O
END	O	O
ELSE	O	O
BEGIN	O	O
SET	O	O
@	O	O
individual	O	O
=	O	O
@	O	O
products	O	O
SET	O	O
@	O	O
products	O	O
=	O	O
NULL	O	O
SELECT	O	O
@	O	O
individual	O	O
END	O	O
END	O	O
Well	O	O
,	O	O
mine	O	O
is	O	O
n't	O	O
all	O	O
that	O	O
simpler	O	O
,	O	O
but	O	O
here	O	O
is	O	O
the	O	O
code	O	O
I	O	O
use	O	O
to	O	O
split	O	O
a	O	O
comma-delimited	O	O
input	O	O
variable	O	O
into	O	O
individual	O	O
values	O	O
,	O	O
and	O	O
put	O	O
it	O	O
into	O	O
a	O	O
table	O	O
variable	O	O
.	O	O
I	O	O
'm	O	O
sure	O	O
you	O	O
could	O	O
modify	O	O
this	O	O
slightly	O	O
to	O	O
split	O	O
based	O	O
on	O	O
a	O	O
space	O	O
and	O	O
then	O	O
to	O	O
do	O	O
a	O	O
basic	O	O
SELECT	O	O
query	O	O
against	O	O
that	O	O
table	O	O
variable	O	O
to	O	O
get	O	O
your	O	O
results	O	O
.	O	O
--	O	O
Create	O	O
temporary	O	O
table	O	O
to	O	O
parse	O	O
the	O	O
list	O	O
of	O	O
accounting	O	O
cycles	O	O
.	O	O
DECLARE	O	O
@	O	O
tblAccountingCycles	O	O
table	O	O
(	O	O
AccountingCycle	O	O
varchar	O	O
(	O	O
10	O	O
)	O	O
)	O	O
DECLARE	O	O
@	O	O
vchAccountingCycle	O	O
varchar	O	O
(	O	O
10	O	O
)	O	O
DECLARE	O	O
@	O	O
intPosition	O	O
int	O	O
SET	O	O
@	O	O
vchAccountingCycleIDs	O	O
=	O	O
LTRIM	B-API	O
(	I-API	O
RTRIM	B-API	O
(	I-API	O
@	I-API	O
vchAccountingCycleIDs	I-API	O
)	I-API	O
)	I-API	O
+	O	O
'	O	O
,	O	O
'	O	O
SET	O	O
@	O	O
intPosition	O	O
=	O	O
CHARINDEX	B-API	O
(	I-API	O
'	I-API	O
,	I-API	O
'	I-API	O
,	I-API	O
@	I-API	O
vchAccountingCycleIDs	I-API	O
,	I-API	O
1	I-API	O
)	I-API	O
IF	O	O
REPLACE	B-API	O
(	I-API	O
@	I-API	O
vchAccountingCycleIDs	I-API	O
,	I-API	O
'	I-API	O
,	I-API	O
'	I-API	O
,	I-API	O
''	I-API	O
)	I-API	O
''	O	O
BEGIN	O	O
WHILE	O	O
@	O	O
intPosition	O	O
0	O	O
BEGIN	O	O
SET	O	O
@	O	O
vchAccountingCycle	O	O
=	O	O
LTRIM	O	O
(	O	O
RTRIM	B-API	O
(	I-API	O
LEFT	B-API	O
(	I-API	O
@	I-API	O
vchAccountingCycleIDs	I-API	O
,	I-API	O
@	I-API	O
intPosition	I-API	O
-	I-API	O
1	I-API	O
)	I-API	O
)	I-API	O
)	O	O
IF	O	O
@	O	O
vchAccountingCycle	O	O
''	O	O
BEGIN	O	O
INSERT	O	O
INTO	O	O
@	O	O
tblAccountingCycles	O	O
(	O	O
AccountingCycle	O	O
)	O	O
VALUES	O	O
(	O	O
@	O	O
vchAccountingCycle	O	O
)	O	O
END	O	O
SET	O	O
@	O	O
vchAccountingCycleIDs	O	O
=	O	O
RIGHT	O	O
(	O	O
@	O	O
vchAccountingCycleIDs	O	O
,	O	O
LEN	B-API	O
(	I-API	O
@	I-API	O
vchAccountingCycleIDs	I-API	O
)	I-API	O
-	O	O
@	O	O
intPosition	O	O
)	O	O
SET	O	O
@	O	O
intPosition	O	O
=	O	O
CHARINDEX	B-API	O
(	I-API	O
'	I-API	O
,	I-API	O
'	I-API	O
,	I-API	O
@	I-API	O
vchAccountingCycleIDs	I-API	O
,	I-API	O
1	I-API	O
)	I-API	O
END	O	O
END	O	O
The	O	O
concept	O	O
is	O	O
pretty	O	O
much	O	O
the	O	O
same	O	O
.	O	O
One	O	O
other	O	O
alternative	O	O
is	O	O
to	O	O
leverage	O	O
the	O	O
.NET	O	O
compatibility	O	O
within	O	O
SQL	O	O
Server	O	O
2005	O	O
itself	O	O
.	O	O
You	O	O
can	O	O
essentially	O	O
write	O	O
yourself	O	O
a	O	O
simple	O	O
method	O	O
in	O	O
.NET	O	O
that	O	O
would	O	O
split	O	O
the	O	O
string	O	O
and	O	O
then	O	O
expose	O	O
that	O	O
as	O	O
a	O	O
stored	O	O
procedure/function	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
UDF	O	O
which	O	O
will	O	O
do	O	O
it	O	O
.	O	O
It	O	O
will	O	O
return	O	O
a	O	O
table	O	O
of	O	O
the	O	O
delimited	O	O
values	O	O
,	O	O
have	O	O
n't	O	O
tried	O	O
all	O	O
scenarios	O	O
on	O	O
it	O	O
but	O	O
your	O	O
example	O	O
works	O	O
fine	O	O
.	O	O
CREATE	O	O
FUNCTION	O	O
SplitString	O	O
(	O	O
--	O	O
Add	O	O
the	O	O
parameters	O	O
for	O	O
the	O	O
function	O	O
here	O	O
@	O	O
myString	O	O
,	O	O
@	O	O
deliminator	O	O
)	O	O
RETURNS	O	O
@	O	O
ReturnTable	O	O
TABLE	O	O
(	O	O
--	O	O
Add	O	O
the	O	O
column	O	O
definitions	O	O
for	O	O
the	O	O
TABLE	O	O
variable	O	O
here	O	O
[	O	O
id	O	O
]	O	O
[	O	O
int	O	O
]	O	O
NOT	O	O
NULL	O	O
,	O	O
[	O	O
part	O	O
]	O	O
NULL	O	O
)	O	O
ASBEGIN	O	O
Declare	O	O
@	O	O
iSpaces	O	O
int	O	O
Declare	O	O
@	O	O
part	O	O
--	O	O
initialize	O	O
spaces	O	O
Select	O	O
@	O	O
iSpaces	O	O
=	O	O
While	O	O
@	O	O
iSpaces	O	O
0	O	O
Begin	O	O
Select	O	O
@	O	O
part	O	O
=	O	O
)	O	O
Insert	O	O
Into	O	O
Select	O	O
@	O	O
part	O	O
Select	O	O
@	O	O
myString	O	O
=	O	O
+	O	O
-	O	O
)	O	O
Select	O	O
@	O	O
iSpaces	O	O
=	O	O
end	O	O
If	O	O
0	O	O
Insert	O	O
Into	O	O
@	O	O
ReturnTable	O	O
Select	O	O
@	O	O
myString	O	O
RETURN	O	O
varchar	O	O
(	O	O
500	O	O
)	O	O
varchar	O	O
(	O	O
10	O	O
)	O	O
IDENTITY	O	O
(	O	O
1,1	O	O
)	O	O
[	O	O
varchar	O	O
]	O	O
(	O	O
50	O	O
)	O	O
varchar	O	O
(	O	O
50	O	O
)	O	O
charindex	B-API	O
(	I-API	O
@	I-API	O
deliminator	I-API	O
,	I-API	O
@	I-API	O
myString,0	I-API	O
)	I-API	O
substring	B-API	O
(	I-API	O
@	I-API	O
myString,0	I-API	O
,	I-API	O
charindex	I-API	O
(	I-API	O
@	I-API	O
deliminator	I-API	O
,	I-API	O
@	I-API	O
myString,0	I-API	O
)	I-API	O
@	O	O
ReturnTable	O	O
(	O	O
part	O	O
)	O	O
substring	B-API	O
(	I-API	O
@	I-API	O
mystring	I-API	O
,	I-API	O
charindex	B-API	O
(	I-API	O
@	I-API	O
deliminator	I-API	O
,	I-API	O
@	I-API	O
myString,0	I-API	O
)	I-API	O
len	B-API	O
(	I-API	O
@	I-API	O
deliminator	I-API	O
)	I-API	O
,	O	O
len	B-API	O
(	I-API	O
@	I-API	O
myString	I-API	O
)	I-API	O
(	O	O
'	O	O
'	O	O
,	O	O
@	O	O
myString,0	O	O
)	O	O
charindex	B-API	O
(	I-API	O
@	I-API	O
deliminator	I-API	O
,	I-API	O
@	I-API	O
myString,0	I-API	O
)	I-API	O
len	B-API	O
(	I-API	O
@	I-API	O
myString	I-API	O
)	I-API	O
You	O	O
would	O	O
call	O	O
it	O	O
like	O	O
this	O	O
:	O	O
Select	O	O
*	O	O
From	O	O
(	O	O
'Hello	O	O
John	O	O
Smith	O	O
'	O	O
,	O	O
'	O	O
'	O	O
)	O	O
Edit	O	O
:	O	O
Updated	O	O
solution	O	O
to	O	O
handle	O	O
delimters	O	O
with	O	O
a	O	O
len1	O	O
as	O	O
in	O	O
:	O	O
select	O	O
*	O	O
From	O	O
SplitString	B-API	O
(	I-API	O
'Hello**John**Smith	I-API	O
'	I-API	O
,	I-API	O
'**	I-API	O
'	I-API	O
)	I-API	O
Try	O	O
this	O	O
:	O	O
CREATE	B-API	O
function	I-API	O
)	I-API	O
returns	I-API	O
@	I-API	O
t	I-API	O
table	I-API	O
(	I-API	O
Word	I-API	O
not	I-API	O
null	I-API	O
,	I-API	O
Position	I-API	O
int	I-API	O
not	I-API	O
null	I-API	O
)	I-API	O
as	O	O
begin	O	O
declare	O	O
@	O	O
pos	O	O
int	O	O
,	O	O
@	O	O
lpos	O	O
int	O	O
,	O	O
@	O	O
item	O	O
,	O	O
@	O	O
ignore	O	O
,	O	O
@	O	O
dl	O	O
int	O	O
,	O	O
@	O	O
a1	O	O
int	O	O
,	O	O
@	O	O
a2	O	O
int	O	O
,	O	O
@	O	O
z1	O	O
int	O	O
,	O	O
@	O	O
z2	O	O
int	O	O
,	O	O
@	O	O
n1	O	O
int	O	O
,	O	O
@	O	O
n2	O	O
int	O	O
,	O	O
@	O	O
c	O	O
,	O	O
@	O	O
a	O	O
smallin	O	O
select	O	O
@	O	O
a1	O	O
=	O	O
,	O	O
@	O	O
a2	O	O
=	O	O
,	O	O
@	O	O
z1	O	O
=	O	O
,	O	O
@	O	O
z2	O	O
=	O	O
,	O	O
@	O	O
n1	O	O
=	O	O
,	O	O
@	O	O
n2	O	O
=	O	O
set	O	O
@	O	O
ignore	O	O
=	O	O
'	O	O
''	O	O
''	O	O
'	O	O
set	O	O
@	O	O
pos	O	O
=	O	O
1	O	O
set	O	O
@	O	O
dl	O	O
=	O	O
set	O	O
@	O	O
lpos	O	O
=	O	O
1	O	O
set	O	O
@	O	O
item	O	O
=	O	O
''	O	O
while	O	O
(	O	O
@	O	O
pos	O	O
=	O	O
@	O	O
dl	O	O
)	O	O
begin	O	O
set	O	O
@	O	O
c	O	O
=	O	O
if	O	O
(	O	O
@	O	O
ignore	O	O
not	O	O
like	O	O
'	O	O
%	O	O
'	O	O
+	O	O
@	O	O
c	O	O
+	O	O
'	O	O
%	O	O
'	O	O
)	O	O
begin	O	O
set	O	O
@	O	O
a	O	O
=	O	O
if	O	O
and	O	O
(	O	O
@	O	O
a	O	O
=	O	O
@	O	O
z1	O	O
)	O	O
)	O	O
or	O	O
and	O	O
(	O	O
@	O	O
a	O	O
=	O	O
@	O	O
z2	O	O
)	O	O
)	O	O
or	O	O
and	O	O
(	O	O
@	O	O
a	O	O
=	O	O
@	O	O
n2	O	O
)	O	O
)	O	O
begin	O	O
set	O	O
@	O	O
item	O	O
=	O	O
@	O	O
item	O	O
+	O	O
@	O	O
c	O	O
end	O	O
else	O	O
if	O	O
(	O	O
@	O	O
item	O	O
''	O	O
)	O	O
begin	O	O
insert	O	O
into	O	O
@	O	O
t	O	O
values	O	O
(	O	O
@	O	O
item	O	O
)	O	O
set	O	O
@	O	O
item	O	O
=	O	O
''	O	O
end	O	O
end	O	O
set	O	O
@	O	O
pos	O	O
=	O	O
@	O	O
pos	O	O
+	O	O
1	O	O
end	O	O
if	O	O
(	O	O
@	O	O
item	O	O
''	O	O
)	O	O
begin	O	O
insert	O	O
into	O	O
@	O	O
t	O	O
values	O	O
(	O	O
@	O	O
item	O	O
)	O	O
end	O	O
SplitWordList	O	O
]	O	O
(	O	O
@	O	O
list	O	O
varchar	O	O
(	O	O
8000	O	O
)	O	O
varchar	O	O
(	O	O
50	O	O
)	O	O
identity	O	O
(	O	O
1,1	O	O
)	O	O
varchar	O	O
(	O	O
100	O	O
)	O	O
varchar	O	O
(	O	O
100	O	O
)	O	O
varchar	O	O
(	O	O
1	O	O
)	O	O
ascii	O	O
(	O	O
'a	O	O
'	O	O
)	O	O
ascii	B-API	O
(	I-API	O
'A	I-API	O
'	I-API	O
)	I-API	O
ascii	B-API	O
(	I-API	O
'z	I-API	O
'	I-API	O
)	I-API	O
ascii	B-API	O
(	I-API	O
'Z	I-API	O
'	I-API	O
)	I-API	O
ascii	B-API	O
(	I-API	O
'0	I-API	O
'	I-API	O
)	I-API	O
ascii	B-API	O
(	I-API	O
'9	I-API	O
'	I-API	O
)	I-API	O
datalength	B-API	O
(	I-API	O
@	I-API	O
list	I-API	O
)	I-API	O
(	O	O
@	O	O
list	O	O
,	O	O
@	O	O
pos	O	O
,	O	O
1	O	O
)	O	O
ascii	B-API	O
(	I-API	O
@	I-API	O
c	I-API	O
)	I-API	O
(	O	O
@	O	O
a	O	O
=	O	O
@	O	O
a1	O	O
)	O	O
(	O	O
@	O	O
a	O	O
=	O	O
@	O	O
a2	O	O
)	O	O
(	O	O
@	O	O
a	O	O
=	O	O
@	O	O
n1	O	O
)	O	O
Test	O	O
it	O	O
like	O	O
this	O	O
:	O	O
select	O	O
*	O	O
from	O	O
(	O	O
'Hello	O	O
John	O	O
Smith	O	O
'	O	O
)	O	O
I	O	O
do	O	O
n't	O	O
believe	O	O
SQL	O	O
Server	O	O
has	O	O
a	O	O
built-in	O	O
split	O	O
function	O	O
,	O	O
so	O	O
other	O	O
than	O	O
a	O	O
UDF	O	O
,	O	O
the	O	O
only	O	O
other	O	O
answer	O	O
I	O	O
know	O	O
is	O	O
to	O	O
hijack	O	O
the	O	O
PARSENAME	O	O
function	O	O
:	O	O
SELECT	B-API	O
PARSENAME	I-API	O
(	I-API	O
REPLACE	I-API	O
(	I-API	O
'Hello	I-API	O
John	I-API	O
Smith	I-API	O
'	I-API	O
,	I-API	O
'	I-API	O
'	I-API	O
,	I-API	O
'	I-API	O
.	I-API	O
'	I-API	O
)	I-API	O
,	O	O
2	O	O
)	O	O
PARSENAME	O	O
takes	O	O
a	O	O
string	O	O
and	O	O
splits	O	O
it	O	O
on	O	O
the	O	O
period	O	O
character	O	O
.	O	O
It	O	O
takes	O	O
a	O	O
number	O	O
as	O	O
its	O	O
second	O	O
argument	O	O
,	O	O
and	O	O
that	O	O
number	O	O
specifies	O	O
which	O	O
segment	O	O
of	O	O
the	O	O
string	O	O
to	O	O
return	O	O
(	O	O
working	O	O
from	O	O
back	O	O
to	O	O
front	O	O
)	O	O
.	O	O
SELECT	O	O
PARSENAME	O	O
(	O	O
REPLACE	O	O
(	O	O
'Hello	O	O
John	O	O
Smith	O	O
'	O	O
,	O	O
'	O	O
'	O	O
,	O	O
'	O	O
.	O	O
'	O	O
)	O	O
,	O	O
3	O	O
)	O	O
--	O	O
return	O	O
Hello	O	O
Obvious	O	O
problem	O	O
is	O	O
when	O	O
the	O	O
string	O	O
already	O	O
contains	O	O
a	O	O
period	O	O
.	O	O
I	O	O
still	O	O
think	O	O
using	O	O
a	O	O
UDF	O	O
is	O	O
the	O	O
best	O	O
way	O	O
...	O	O
any	O	O
other	O	O
suggestions	O	O
?	O	O
First	O	O
,	O	O
create	O	O
a	O	O
function	O	O
(	O	O
using	O	O
CTE	O	O
,	O	O
common	O	O
table	O	O
expression	O	O
does	O	O
away	O	O
with	O	O
the	O	O
need	O	O
for	O	O
a	O	O
temp	O	O
table	O	O
)	O	O
create	O	O
function	O	O
dbo.SplitString	O	O
(	O	O
@	O	O
str	O	O
nvarchar	B-API	O
(	I-API	O
4000	I-API	O
)	I-API	O
,	O	O
@	O	O
separator	O	O
char	B-API	O
(	I-API	O
1	I-API	O
)	I-API	O
)	O	O
returns	O	O
table	O	O
AS	O	O
return	O	O
(	O	O
with	O	O
tokens	O	O
(	O	O
p	O	O
,	O	O
a	O	O
,	O	O
b	O	O
)	O	O
AS	O	O
(	O	O
select	O	O
1	O	O
,	O	O
1	O	O
,	O	O
charindex	O	O
(	O	O
@	O	O
separator	O	O
,	O	O
@	O	O
str	O	O
)	O	O
union	O	O
all	O	O
select	O	O
p	O	O
+	O	O
1	O	O
,	O	O
b	O	O
+	O	O
1	O	O
,	O	O
charindex	O	O
(	O	O
@	O	O
separator	O	O
,	O	O
@	O	O
str	O	O
,	O	O
b	O	O
+	O	O
1	O	O
)	O	O
from	O	O
tokens	O	O
where	O	O
b	O	O
0	O	O
)	O	O
select	O	O
p-1	O	O
zeroBasedOccurance	O	O
,	O	O
substring	O	O
(	O	O
@	O	O
str	O	O
,	O	O
a	O	O
,	O	O
case	O	O
when	O	O
b	O	O
0	O	O
then	O	O
b-a	O	O
ELSE	O	O
4000	O	O
end	O	O
)	O	O
AS	O	O
s	O	O
from	O	O
tokens	O	O
)	O	O
GO	O	O
Then	O	O
,	O	O
use	O	O
it	O	O
as	O	O
any	O	O
table	O	O
(	O	O
or	O	O
modify	O	O
it	O	O
to	O	O
fit	O	O
within	O	O
your	O	O
existing	O	O
stored	O	O
proc	O	O
)	O	O
like	O	O
this	O	O
.	O	O
select	O	O
s	O	O
from	O	O
dbo.SplitString	O	O
(	O	O
'Hello	O	O
John	O	O
Smith	O	O
'	O	O
,	O	O
'	O	O
'	O	O
)	O	O
where	O	O
zeroBasedOccurance=1	O	O
Update	O	O
Previous	O	O
version	O	O
would	O	O
fail	O	O
for	O	O
input	O	O
string	O	O
longer	O	O
than	O	O
4000	O	O
chars	O	O
.	O	O
This	O	O
version	O	O
takes	O	O
care	O	O
of	O	O
the	O	O
limitation	O	O
:	O	O
create	O	O
function	O	O
dbo.SplitString	O	O
(	O	O
@	O	O
str	O	O
nvarchar	B-API	O
(	I-API	O
max	I-API	O
)	I-API	O
,	O	O
@	O	O
separator	O	O
char	B-API	O
(	I-API	O
1	I-API	O
)	I-API	O
)	O	O
returns	O	O
table	O	O
AS	O	O
return	O	O
(	O	O
with	O	O
tokens	O	O
(	O	O
p	O	O
,	O	O
a	O	O
,	O	O
b	O	O
)	O	O
AS	O	O
(	O	O
select	O	O
cast	B-API	O
(	I-API	O
1	I-API	O
as	I-API	O
bigint	I-API	O
)	I-API	O
,	O	O
cast	B-API	O
(	I-API	O
1	I-API	O
as	I-API	O
bigint	I-API	O
)	I-API	O
,	O	O
charindex	B-API	O
(	I-API	O
@	I-API	O
separator	I-API	O
,	I-API	O
@	I-API	O
str	I-API	O
)	I-API	O
union	O	O
all	O	O
select	O	O
p	O	O
+	O	O
1	O	O
,	O	O
b	O	O
+	O	O
1	O	O
,	O	O
charindex	B-API	O
(	I-API	O
@	I-API	O
separator	I-API	O
,	I-API	O
@	I-API	O
str	I-API	O
,	I-API	O
b	I-API	O
+	I-API	O
1	I-API	O
)	I-API	O
from	O	O
tokens	O	O
where	O	O
b	O	O
0	O	O
)	O	O
select	O	O
p-1	O	O
ItemIndex	O	O
,	O	O
substring	O	O
(	O	O
@	O	O
str	O	O
,	O	O
a	O	O
,	O	O
case	O	O
when	O	O
b	O	O
0	O	O
then	O	O
b-a	O	O
ELSE	O	O
LEN	B-API	O
(	I-API	O
@	I-API	O
str	I-API	O
)	I-API	O
end	O	O
)	O	O
AS	O	O
Item	O	O
from	O	O
tokens	O	O
)	O	O
;	O	O
GO	O	O
Usage	O	O
remains	O	O
the	O	O
same	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
a	O	O
generic	O	O
class	O	O
like	O	O
is	O	O
,	O	O
for	O	O
most	O	O
purposes	O	O
,	O	O
treated	O	O
externally	O	O
as	O	O
a	O	O
normal	O	O
class	O	O
.	O	O
e.g	O	O
.	O	O
when	O	O
you	O	O
say	O	O
Liststring	B-API	B-API
(	I-API	I-API
)	I-API	I-API
the	O	O
compiler	O	O
says	O	O
ListString	B-API	B-API
(	I-API	I-API
)	I-API	I-API
(	O	O
which	O	O
contains	O	O
strings	O	O
)	O	O
.	O	O
[	O	O
Technical	O	O
folk	O	O
:	O	O
this	O	O
is	O	O
an	O	O
extremely	O	O
plain-English-ified	O	O
version	O	O
of	O	O
what	O	O
's	O	O
going	O	O
on	O	O
]	O	O
Consequently	O	O
,	O	O
obviously	O	O
the	O	O
compiler	O	O
ca	O	O
n't	O	O
be	O	O
smart	O	O
enough	O	O
to	O	O
convert	O	O
a	O	O
ListString	O	O
to	O	O
a	O	O
ListObject	O	O
by	O	O
casting	O	O
the	O	O
items	O	O
of	O	O
its	O	O
internal	O	O
collection	O	O
.	O	O
That	O	O
's	O	O
why	O	O
there	O	O
's	O	O
extension	O	O
methods	O	O
for	O	O
IEnumerable	O	O
like	O	O
Convert	B-API	B-API
(	I-API	I-API
)	I-API	I-API
that	O	O
allow	O	O
you	O	O
to	O	O
easily	O	O
supply	O	O
conversion	O	O
for	O	O
the	O	O
items	O	O
stored	O	O
inside	O	O
a	O	O
collection	O	O
,	O	O
which	O	O
could	O	O
be	O	O
as	O	O
simple	O	O
as	O	O
casting	O	O
from	O	O
one	O	O
to	O	O
another	O	O
.	O	O
Think	O	O
of	O	O
it	O	O
this	O	O
way	O	O
,	O	O
if	O	O
you	O	O
were	O	O
to	O	O
do	O	O
such	O	O
a	O	O
cast	O	O
,	O	O
and	O	O
then	O	O
add	O	O
an	O	O
object	O	O
of	O	O
type	O	O
Foo	O	O
to	O	O
the	O	O
list	O	O
,	O	O
the	O	O
list	O	O
of	O	O
strings	O	O
is	O	O
no	O	O
longer	O	O
consistent	O	O
.	O	O
If	O	O
you	O	O
were	O	O
to	O	O
iterate	O	O
the	O	O
first	O	O
reference	O	O
,	O	O
you	O	O
would	O	O
get	O	O
a	O	O
class	O	O
cast	O	O
exception	O	O
because	O	O
once	O	O
you	O	O
hit	O	O
the	O	O
Foo	O	O
instance	O	O
,	O	O
the	O	O
Foo	O	O
could	O	O
not	O	O
be	O	O
converted	O	O
to	O	O
string	O	O
!	O	O
As	O	O
a	O	O
side	O	O
note	O	O
,	O	O
I	O	O
think	O	O
it	O	O
would	O	O
be	O	O
more	O	O
significant	O	O
whether	O	O
or	O	O
not	O	O
you	O	O
can	O	O
do	O	O
the	O	O
reverse	O	O
cast	O	O
:	O	O
Listobject	O	O
ol	O	O
=	O	O
new	O	O
;	O	O
Liststring	O	O
sl	O	O
;	O	O
sl	O	O
=	O	O
Listobject	B-API	O
(	I-API	O
)	I-API	O
I	O	O
have	O	O
n't	O	O
used	O	O
C	O	O
#	O	O
in	O	O
a	O	O
while	O	O
,	O	O
so	O	O
I	O	O
do	O	O
n't	O	O
know	O	O
if	O	O
that	O	O
is	O	O
legal	O	O
,	O	O
but	O	O
that	O	O
sort	O	O
of	O	O
cast	O	O
is	O	O
actually	O	O
(	O	O
potentially	O	O
)	O	O
useful	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
you	O	O
are	O	O
going	O	O
from	O	O
a	O	O
more	O	O
general	O	O
class	O	O
(	O	O
object	O	O
)	O	O
to	O	O
a	O	O
more	O	O
specific	O	O
class	O	O
(	O	O
string	O	O
)	O	O
that	O	O
extends	O	O
from	O	O
the	O	O
general	O	O
one	O	O
.	O	O
In	O	O
this	O	O
way	O	O
,	O	O
if	O	O
you	O	O
add	O	O
to	O	O
the	O	O
list	O	O
of	O	O
strings	O	O
,	O	O
you	O	O
are	O	O
not	O	O
violating	O	O
the	O	O
list	O	O
of	O	O
objects	O	O
.	O	O
Does	O	O
anybody	O	O
know	O	O
or	O	O
can	O	O
test	O	O
if	O	O
such	O	O
a	O	O
cast	O	O
is	O	O
legal	O	O
in	O	O
C	O	O
#	O	O
?	O	O
Mike	O	O
-	O	O
I	O	O
believe	O	O
contravariance	O	O
is	O	O
n't	O	O
allowed	O	O
in	O	O
C	O	O
#	O	O
either	O	O
See	O	O
Generic	O	O
type	O	O
parameter	O	O
variance	O	O
in	O	O
the	O	O
CLR	O	O
for	O	O
some	O	O
more	O	O
info	O	O
.	O	O
This	O	O
has	O	O
a	O	O
lot	O	O
to	O	O
do	O	O
with	O	O
covariance	O	O
,	O	O
e.g.	O	O
,	O	O
generic	O	O
types	O	O
are	O	O
considered	O	O
as	O	O
parameters	O	O
,	O	O
and	O	O
if	O	O
the	O	O
parameters	O	O
do	O	O
not	O	O
resolve	O	O
properly	O	O
to	O	O
a	O	O
more	O	O
specific	O	O
type	O	O
then	O	O
the	O	O
operation	O	O
fails	O	O
.	O	O
The	O	O
implication	O	O
of	O	O
such	O	O
is	O	O
that	O	O
you	O	O
really	O	O
can	O	O
not	O	O
cast	O	O
to	O	O
a	O	O
more	O	O
general	O	O
type	O	O
like	O	O
object	O	O
.	O	O
And	O	O
as	O	O
stated	O	O
by	O	O
Rex	O	O
,	O	O
the	O	O
List	O	O
object	O	O
wo	O	O
n't	O	O
convert	O	O
each	O	O
object	O	O
for	O	O
you	O	O
.	O	O
You	O	O
might	O	O
want	O	O
to	O	O
try	O	O
the	O	O
ff	O	O
code	O	O
instead	O	O
:	O	O
Liststring	O	O
sl	O	O
=	O	O
new	O	O
;	O	O
//populate	O	O
slListobject	O	O
ol	O	O
=	O	O
new	O	O
Liststring	B-API	B-API
(	I-API	I-API
)	I-API	I-API
Listobject	B-API	B-API
(	I-API	I-API
sl	I-API	I-API
)	I-API	I-API
or	O	O
:	O	O
Listobject	O	O
ol	O	O
=	O	O
new	O	O
Listobject	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	I-API	O
ol.AddRange	B-API	B-API
(	I-API	I-API
sl	I-API	I-API
)	I-API	I-API
ol	O	O
will	O	O
(	O	O
theoretically	O	O
)	O	O
copy	O	O
all	O	O
the	O	O
contents	O	O
of	O	O
sl	O	O
without	O	O
problems	O	O
.	O	O
If	O	O
you	O	O
're	O	O
using	O	O
.NET	O	O
3.5	O	O
have	O	O
a	O	O
look	O	O
at	O	O
the	O	O
Enumerable.Cast	B-API	B-API
method	O	O
.	O	O
It	O	O
's	O	O
an	O	O
extension	O	O
method	O	O
so	O	O
you	O	O
can	O	O
call	O	O
it	O	O
directly	O	O
on	O	O
the	O	O
List	O	O
.	O	O
Liststring	O	O
sl	O	O
=	O	O
new	O	O
Liststring	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
IEnumerableobject	O	O
ol	O	O
;	O	O
ol	O	O
=	O	O
sl.Castobject	B-API	B-API
(	I-API	I-API
)	I-API	I-API
;	O	O
It	O	O
's	O	O
not	O	O
exactly	O	O
what	O	O
you	O	O
asked	O	O
for	O	O
but	O	O
should	O	O
do	O	O
the	O	O
trick	O	O
.	O	O
Edit	O	O
:	O	O
As	O	O
noted	O	O
by	O	O
Zooba	O	O
,	O	O
you	O	O
can	O	O
then	O	O
call	O	O
ol.ToList	B-API	B-API
(	I-API	I-API
)	I-API	I-API
to	O	O
get	O	O
a	O	O
List	O	O
This	O	O
has	O	O
to	O	O
do	O	O
with	O	O
how	O	O
data	O	O
bindings	O	O
are	O	O
set	O	O
up	O	O
in	O	O
the	O	O
dotnet	O	O
framework	O	O
,	O	O
especially	O	O
the	O	O
.	O	O
On	O	O
a	O	O
high	O	O
level	O	O
it	O	O
means	O	O
that	O	O
if	O	O
you	O	O
have	O	O
n't	O	O
specified	O	O
otherwise	O	O
each	O	O
form	O	O
and	O	O
all	O	O
the	O	O
controls	O	O
of	O	O
the	O	O
form	O	O
share	O	O
the	O	O
same	O	O
.	O	O
When	O	O
you	O	O
are	O	O
setting	O	O
the	O	O
property	O	O
the	O	O
will	O	O
use	O	O
the	O	O
to	O	O
get	O	O
a	O	O
that	O	O
wraps	O	O
the	O	O
list	O	O
.	O	O
The	O	O
keeps	O	O
track	O	O
of	O	O
such	O	O
things	O	O
as	O	O
the	O	O
current	O	O
selected	O	O
position	O	O
in	O	O
the	O	O
list	O	O
.	O	O
When	O	O
you	O	O
set	O	O
the	O	O
of	O	O
the	O	O
second	O	O
it	O	O
will	O	O
use	O	O
the	O	O
same	O	O
(	O	O
the	O	O
forms	O	O
)	O	O
which	O	O
will	O	O
yield	O	O
a	O	O
reference	O	O
to	O	O
the	O	O
same	O	O
as	O	O
above	O	O
used	O	O
to	O	O
set	O	O
up	O	O
the	O	O
data	O	O
bindings	O	O
.	O	O
To	O	O
get	O	O
a	O	O
more	O	O
detailed	O	O
explanation	O	O
see	O	O
BindingContext	O	O
.	O	O
It	O	O
's	O	O
called	O	O
alpha	O	O
blending	O	O
.	O	O
In	O	O
psuedocode	O	O
,	O	O
assuming	O	O
the	O	O
background	O	O
color	O	O
(	O	O
blend	O	O
)	O	O
always	O	O
has	O	O
255	O	O
alpha	O	O
.	O	O
Also	O	O
assumes	O	O
alpha	O	O
is	O	O
0-255	O	O
.	O	O
r	O	O
=	O	O
+	O	O
(	O	O
1	O	O
-	O	O
g	O	O
=	O	O
+	O	O
(	O	O
1	O	O
-	O	O
b	O	O
=	O	O
+	O	O
(	O	O
1	O	O
-	O	O
alpha=argb.alpha	B-API	B-API
(	I-API	I-API
)	I-API	I-API
(	O	O
alpha/255	O	O
)	O	O
*argb.r	B-API	O
(	I-API	O
)	I-API	O
alpha/255	O	O
)	O	O
*blend.r	O	B-API
(	O	I-API
)	O	I-API
(	O	O
alpha/255	O	O
)	O	O
*argb.g	O	O
(	O	O
)	O	O
alpha/255	O	O
)	O	O
*blend.g	O	B-API
(	O	I-API
)	O	I-API
(	O	O
alpha/255	O	O
)	O	O
*argb.b	O	O
(	O	O
)	O	O
alpha/255	O	O
)	O	O
*blend.b	O	B-API
(	O	I-API
)	O	I-API
note	O	O
:	O	O
you	O	O
probably	O	O
need	O	O
to	O	O
be	O	O
a	O	O
bit	O	O
(	O	O
more	O	O
)	O	O
careful	O	O
about	O	O
floating-point/int	O	O
math	O	O
and	O	O
rounding	O	O
issues	O	O
,	O	O
depending	O	O
on	O	O
language	O	O
.	O	O
Cast	O	O
intermediates	O	O
accordingly	O	O
Edited	O	O
to	O	O
add	O	O
:	O	O
If	O	O
you	O	O
do	O	O
n't	O	O
have	O	O
a	O	O
background	O	O
color	O	O
with	O	O
an	O	O
alpha	O	O
of	O	O
255	O	O
,	O	O
the	O	O
algebra	O	O
gets	O	O
alot	O	O
more	O	O
complicated	O	O
.	O	O
I	O	O
've	O	O
done	O	O
it	O	O
before	O	O
and	O	O
it	O	O
's	O	O
a	O	O
fun	O	O
exercise	O	O
left	O	O
to	O	O
the	O	O
reader	O	O
(	O	O
if	O	O
you	O	O
really	O	O
need	O	O
to	O	O
know	O	O
,	O	O
ask	O	O
another	O	O
question	O	O
:	O	O
)	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
what	O	O
color	O	O
C	O	O
blends	O	O
into	O	O
some	O	O
background	O	O
the	O	O
same	O	O
as	O	O
blending	O	O
A	O	O
,	O	O
then	O	O
blending	O	O
B	O	O
.	O	O
This	O	O
is	O	O
sort	O	O
of	O	O
like	O	O
calculating	O	O
A+B	O	O
(	O	O
which	O	O
is	O	O
n't	O	O
the	O	O
same	O	O
as	O	O
B+A	O	O
)	O	O
.	O	O
if	O	O
you	O	O
do	O	O
n't	O	O
need	O	O
to	O	O
know	O	O
this	O	O
pre-render	O	O
,	O	O
you	O	O
could	O	O
always	O	O
use	O	O
the	O	O
win32	O	B-API
method	O	O
of	O	O
getpixel	O	O
,	O	O
I	O	O
believe	O	O
.	O	O
Note	O	O
:	O	O
typing	O	O
on	O	O
iPhone	O	O
in	O	O
the	O	O
middle	O	O
of	O	O
Missouri	O	O
with	O	O
no	O	O
inet	O	O
access	O	O
.	O	O
Will	O	O
look	O	O
up	O	O
real	O	O
win32	O	O
example	O	O
and	O	O
see	O	O
if	O	O
there	O	O
is	O	O
a	O	O
.net	O	O
equivalent	O	O
.	O	O
In	O	O
case	O	O
anyone	O	O
cares	O	O
,	O	O
and	O	O
does	O	O
n't	O	O
want	O	O
to	O	O
use	O	O
the	O	O
(	O	O
excellent	O	O
)	O	O
answer	O	O
posted	O	O
above	O	O
,	O	O
you	O	O
can	O	O
get	O	O
the	O	O
color	O	O
value	O	O
of	O	O
a	O	O
pixel	O	O
in	O	O
.Net	O	O
via	O	O
this	O	O
link	O	O
MSDN	O	O
example	O	O
try	O	O
libpcre	O	O
If	O	O
you	O	O
're	O	O
stuck	O	O
on	O	O
windows	O	O
they	O	O
have	O	O
a	O	O
windows	O	O
port	O	O
which	O	O
should	O	O
work	O	O
.	O	O
I	O	O
know	O	O
e-texteditor	O	O
uses	O	O
it	O	O
,	O	O
so	O	O
at	O	O
least	O	O
that	O	O
's	O	O
proof	O	O
it	O	O
works	O	O
:	O	O
-	O	O
)	O	O
The	O	O
GNU	O	O
C	O	O
Library	O	O
supports	O	O
regular	O	O
expressions	O	O
.	O	O
It	O	O
's	O	O
open	O	O
,	O	O
and	O	O
the	O	O
RE	O	O
code	O	O
seems	O	O
to	O	O
be	O	O
easily	O	O
extractable	O	O
.	O	O
The	O	O
GNU	O	O
C	O	O
library	O	O
regular	O	O
expressions	O	O
facility	O	O
(	O	O
regcomp	B-API	O
(	I-API	O
)	I-API	O
,	O	O
regexec	B-API	O
(	I-API	O
)	I-API	O
and	O	O
friends	O	O
)	O	O
is	O	O
broken	O	O
.	O	O
Use	O	O
libetre	O	O
instead	O	O
;	O	O
the	O	O
function	O	O
signatures	O	O
match	O	O
the	O	O
ones	O	O
provided	O	O
by	O	O
glibc	O	O
.	O	O
http	O	O
:	O	O
//laurikari.net/tre/	O	O
If	O	O
you	O	O
use	O	O
Visual	O	B-API
Studio	O	I-API
you	O	O
can	O	O
use	O	O
Visual	O	O
C++	O	O
2008	O	O
Feature	O	O
Pack	O	O
Release	O	O
,	O	O
this	O	O
implements	O	O
some	O	O
of	O	O
TR1	O	O
,	O	O
and	O	O
includes	O	O
regular	O	O
expression	O	O
parsing	O	O
.	O	O
Get	O	O
it	O	O
You	O	O
can	O	O
use	O	O
this	O	O
program	O	O
,	O	O
Handle	O	O
,	O	O
to	O	O
find	O	O
which	O	O
process	O	O
has	O	O
the	O	O
lock	O	O
on	O	O
your	O	O
file	O	O
.	O	O
It	O	O
's	O	O
a	O	O
command-line	O	O
tool	O	O
,	O	O
so	O	O
I	O	O
guess	O	O
you	O	O
use	O	O
the	O	O
output	O	O
from	O	O
that	O	O
...	O	O
I	O	O
'm	O	O
not	O	O
sure	O	O
about	O	O
finding	O	O
it	O	O
programmatically	O	O
.	O	O
If	O	O
deleting	O	O
the	O	O
file	O	O
can	O	O
wait	O	O
,	O	O
you	O	O
could	O	O
specify	O	O
it	O	O
for	O	O
deletion	O	O
when	O	O
your	O	O
computer	O	O
next	O	O
starts	O	O
up	O	O
:	O	O
Start	O	O
REGEDT32	B-API	O
or	O	O
REGEDIT	B-API	O
and	O	O
navigate	O	O
to	O	O
:	O	O
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session	O	O
Manager	O	O
W2K	O	O
and	O	O
WXP	O	O
W2K	O	O
:	O	O
EditAdd	O	O
Value	O	O
...	O	O
Data	O	O
Type	O	O
:	O	O
Value	O	O
Name	O	O
:	O	O
OK	O	O
WXP	O	O
:	O	O
EditNewMulti-String	O	O
Valueenter	O	O
In	O	O
the	O	O
Data	O	O
area	O	O
,	O	O
enter	O	O
``	B-API	O
\	I-API	O
?	I-API	O
?	I-API	O
\	I-API	O
''	I-API	O
+	B-API	O
to	O	O
be	O	O
deleted	O	O
.	O	O
LFNs	O	O
may	O	O
be	O	O
entered	O	O
without	O	O
being	O	O
embedded	O	O
in	O	O
quotes	O	O
.	O	O
To	O	O
delete	O	O
C	B-API	O
:	I-API	O
\Long	I-API	O
Directory	B-API	O
Name\Long	B-API	O
File	B-API	O
,	O	O
enter	O	O
the	O	O
following	O	O
data	O	O
:	O	O
\	O	O
?	O	O
?	O	O
\C	O	O
:	O	O
\Long	O	O
Directory	O	O
Name\Long	O	O
File	O	O
Name.exe	O	O
Then	O	O
press	O	O
OK	O	O
.	O	O
The	O	O
``	O	O
destination	O	O
file	O	O
name	O	O
''	O	O
is	O	O
a	O	O
null	O	B-API
(	O	I-API
zero	O	I-API
)	O	I-API
string	O	O
.	O	O
It	O	O
is	O	O
entered	O	O
as	O	O
follows	O	O
:	O	O
W2K	O	O
:	O	O
EditBinaryselect	O	O
Data	O	O
Format	O	O
:	O	O
Hexclick	O	O
at	O	O
the	O	O
end	O	O
of	O	O
the	O	O
hex	O	O
stringenter	O	O
0000	O	O
(	O	O
four	O	O
zeros	O	O
)	O	O
OK	O	O
WXP	O	O
:	O	O
Right-click	O	O
the	O	O
valuechoose	O	O
``	O	O
Modify	O	O
Binary	O	O
Data	O	O
''	O	O
click	O	O
at	O	O
the	O	O
end	O	O
of	O	O
the	O	O
hex	O	O
stringenter	O	O
0000	O	O
(	O	O
four	O	O
zeros	O	O
)	O	O
OK	O	O
Close	O	O
and	O	O
reboot	O	O
to	O	O
delete	O	O
the	O	O
file	O	O
.	O	O
(	O	O
Shamelessly	O	O
stolen	O	O
from	O	O
some	O	O
random	O	O
forum	O	O
,	O	O
for	O	O
posterity	O	O
's	O	O
sake	O	O
.	O	O
)	O	O
Killing	O	O
other	O	O
processes	O	O
is	O	O
not	O	O
a	O	O
healthy	O	O
thing	O	O
to	O	O
do	O	O
.	O	O
If	O	O
your	O	O
scenario	O	O
involves	O	O
something	O	O
like	O	O
uninstallation	O	O
,	O	O
you	O	O
could	O	O
use	O	O
the	O	O
API	O	O
function	O	O
to	O	O
mark	O	O
the	O	O
file	O	O
for	O	O
deletion	O	O
upon	O	O
next	O	O
reboot	O	O
.	O	O
If	O	O
it	O	O
appears	O	O
that	O	O
you	O	O
really	O	O
need	O	O
to	O	O
delete	O	O
a	O	O
file	O	O
in	O	O
use	O	O
by	O	O
another	O	O
process	O	O
,	O	O
I	O	O
'd	O	O
recommend	O	O
re-considering	O	O
the	O	O
actual	O	O
problem	O	O
before	O	O
considering	O	O
any	O	O
solutions	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
do	O	O
it	O	O
programatically	O	O
.	O	O
I	O	O
'm	O	O
not	O	O
sure	O	O
...	O	O
and	O	O
I	O	O
'd	O	O
really	O	O
recommend	O	O
against	O	O
it	O	O
.	O	O
If	O	O
you	O	O
're	O	O
just	O	O
troubleshooting	O	O
stuff	O	O
on	O	O
your	O	O
own	O	O
machine	O	O
,	O	O
SysInternals	O	O
Process	O	O
Explorer	O	O
can	O	O
help	O	O
you	O	O
Run	O	O
it	O	O
,	O	O
use	O	O
the	O	O
Find	O	O
Handle	O	O
command	O	O
(	O	O
I	O	O
think	O	O
it	O	O
's	O	O
either	O	O
in	O	O
the	O	O
find	O	O
or	O	O
handle	O	O
menu	O	O
)	O	O
,	O	O
and	O	O
search	O	O
for	O	O
the	O	O
name	O	O
of	O	O
your	O	O
file	O	O
.	O	O
Once	O	O
the	O	O
handle	B-API	O
(	I-API	O
s	I-API	O
)	O	O
is	O	O
found	O	O
,	O	O
you	O	O
can	O	O
forcibly	O	O
close	O	O
them	O	O
.	O	O
You	O	O
can	O	O
then	O	O
delete	O	O
the	O	O
file	O	O
and	O	O
so	O	O
on	O	O
.	O	O
Beware	O	O
,	O	O
doing	O	O
this	O	O
may	O	O
cause	O	O
the	O	O
program	O	O
which	O	O
owns	O	O
the	O	O
handles	O	O
to	O	O
behave	O	O
strangely	O	O
,	O	O
as	O	O
you	O	O
've	O	O
just	O	O
pulled	O	O
the	O	O
proverbial	O	O
rug	O	O
out	O	O
from	O	O
under	O	O
it	O	O
,	O	O
but	O	O
it	O	O
works	O	O
well	O	O
when	O	O
you	O	O
are	O	O
debugging	O	O
your	O	O
own	O	O
errant	O	O
code	O	O
,	O	O
or	O	O
when	O	O
visual	O	O
studio	O	O
/	O	O
windows	O	O
explorer	O	O
is	O	O
being	O	O
crap	O	O
and	O	O
not	O	O
releasing	O	O
file	O	O
handles	O	O
even	O	O
though	O	O
you	O	O
told	O	O
them	O	O
to	O	O
close	O	O
the	O	O
file	O	O
ages	O	O
ago	O	O
...	O	O
sigh	O	O
:	O	O
-	O	O
)	O	O
Oh	O	O
,	O	O
one	O	O
big	O	O
hack	O	O
I	O	O
employed	O	O
years	O	O
ago	O	O
,	O	O
is	O	O
that	O	O
Windows	O	O
wo	O	O
n't	O	O
let	O	O
you	O	O
delete	O	O
files	O	O
,	O	O
but	O	O
it	O	O
does	O	O
let	O	O
you	O	O
move	O	O
them	O	O
.	O	O
Pseudo-sort-of-code	O	O
:	O	O
mv	O	O
%	O	O
WINDIR	O	O
%	O	O
\System32\	O	O
%	O	O
WINDIR\System32\mfc42.dll.old	O	O
Install	O	O
new	O	O
mfc42.dll	O	O
Tell	O	O
user	O	O
to	O	O
save	O	O
work	O	O
and	O	O
restart	O	O
applications	O	O
When	O	O
the	O	O
applications	O	O
restarted	O	O
(	O	O
note	O	O
we	O	O
did	O	O
n't	O	O
need	O	O
to	O	O
reboot	O	O
the	O	O
machine	O	O
)	O	O
,	O	O
they	O	O
loaded	O	O
the	O	O
new	O	O
mfc42.dll	O	O
,	O	O
and	O	O
all	O	O
was	O	O
well	O	O
.	O	O
That	O	O
,	O	O
coupled	O	O
with	O	O
to	O	O
delete	O	O
the	O	O
old	O	O
one	O	O
the	O	O
next	O	O
time	O	O
the	O	O
whole	O	O
system	O	O
restarted	O	O
,	O	O
worked	O	O
pretty	O	O
well	O	O
.	O	O
The	O	O
typical	O	O
method	O	O
is	O	O
as	O	O
follows	O	O
.	O	O
You	O	O
've	O	O
said	O	O
you	O	O
want	O	O
to	O	O
do	O	O
this	O	O
in	O	O
C	O	O
#	O	O
so	O	O
here	O	O
goes	O	O
...	O	O
If	O	O
you	O	O
do	O	O
n't	O	O
know	O	O
which	O	O
process	O	O
has	O	O
the	O	O
file	O	O
locked	O	O
,	O	O
you	O	O
'll	O	O
need	O	O
to	O	O
examine	O	O
each	O	O
process	O	O
's	O	O
handle	O	O
list	O	O
,	O	O
and	O	O
query	O	O
each	O	O
handle	O	O
to	O	O
determine	O	O
if	O	O
it	O	O
identifies	O	O
the	O	O
locked	O	O
file	O	O
.	O	O
Doing	O	O
this	O	O
in	O	O
C	O	O
#	O	O
will	O	O
likely	O	O
require	O	O
P/Invoke	O	O
or	O	O
an	O	O
intermediary	O	O
C++/CLI	O	O
to	O	O
call	O	O
the	O	O
native	O	O
APIs	O	O
you	O	O
'll	O	O
need	O	O
.	O	O
Once	O	O
you	O	O
've	O	O
figured	O	O
out	O	O
which	O	O
process	O	O
(	O	O
es	O	O
)	O	O
have	O	O
the	O	O
file	O	O
locked	O	O
,	O	O
you	O	O
'll	O	O
need	O	O
to	O	O
safely	O	O
inject	O	O
a	O	O
small	O	O
native	O	O
DLL	O	O
into	O	O
the	O	O
process	O	O
(	O	O
you	O	O
can	O	O
also	O	O
inject	O	O
a	O	O
managed	O	O
DLL	O	O
,	O	O
but	O	O
this	O	O
is	O	O
messier	O	O
,	O	O
as	O	O
you	O	O
then	O	O
have	O	O
to	O	O
start	O	O
or	O	O
attach	O	O
to	O	O
the	O	O
.NET	O	O
runtime	O	O
)	O	O
.	O	O
That	O	O
bootstrap	O	O
DLL	O	O
then	O	O
closes	O	O
the	O	O
handle	O	O
using	O	O
CloseHandle	O	O
etc	O	O
.	O	O
Essentially	O	O
:	O	O
the	O	O
way	O	O
to	O	O
unlock	O	O
a	O	O
``	O	O
locked	O	O
''	O	O
file	O	O
is	O	O
to	O	O
inject	O	O
a	O	O
DLL	O	O
into	O	O
the	O	O
offending	O	O
process	O	O
's	O	O
address	O	O
space	O	O
and	O	O
close	O	O
it	O	O
yourself	O	O
.	O	O
You	O	O
can	O	O
do	O	O
this	O	O
using	O	O
native	O	O
or	O	O
managed	O	O
code	O	O
.	O	O
No	O	O
matter	O	O
what	O	O
,	O	O
you	O	O
're	O	O
going	O	O
to	O	O
need	O	O
a	O	O
small	O	O
amount	O	O
of	O	O
native	O	O
code	O	O
or	O	O
at	O	O
least	O	O
P/Invoke	O	O
into	O	O
the	O	O
same	O	O
.	O	O
Helpful	O	O
links	O	O
:	O	O
http	O	O
:	O	O
//www.codeproject.com/KB/threads/winspy.aspx	O	O
http	O	O
:	O	O
//damianblog.com/2008/07/02/net-code-injection/	O	O
Good	O	O
luck	O	O
!	O	O
Someone	O	O
correct	O	O
me	O	O
if	O	O
I	O	O
'm	O	O
wrong	O	O
,	O	O
but	O	O
I	O	O
do	O	O
n't	O	O
think	O	O
that	O	O
AppSettings	O	O
is	O	O
typically	O	O
meant	O	O
to	O	O
be	O	O
used	O	O
for	O	O
these	O	O
type	O	O
of	O	O
configuration	O	O
settings	O	O
.	O	O
Normally	O	O
you	O	O
would	O	O
only	O	O
put	O	O
in	O	O
settings	O	O
that	O	O
remain	O	O
fairly	O	O
static	O	O
(	O	O
database	O	O
connection	O	O
strings	O	O
,	O	O
file	O	O
paths	O	O
,	O	O
etc.	O	O
)	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
store	O	O
customizable	O	O
user	O	O
settings	O	O
,	O	O
it	O	O
would	O	O
be	O	O
better	O	O
to	O	O
create	O	O
a	O	O
separate	O	O
preferences	O	O
file	O	O
,	O	O
or	O	O
ideally	O	O
store	O	O
those	O	O
settings	O	O
in	O	O
a	O	O
database	O	O
.	O	O
Could	O	O
I	O	O
ask	O	O
why	O	O
you	O	O
're	O	O
not	O	O
saving	O	O
the	O	O
user	O	O
's	O	O
settings	O	O
in	O	O
a	O	O
database	O	O
?	O	O
Generally	O	O
,	O	O
I	O	O
save	O	O
application	O	O
settings	O	O
that	O	O
are	O	O
changed	O	O
very	O	O
infrequently	O	O
in	O	O
the	O	O
appSettings	O	O
section	O	O
(	O	O
the	O	O
default	O	O
email	O	O
address	O	O
error	O	O
logs	O	O
are	O	O
sent	O	O
to	O	O
,	O	O
the	O	O
number	O	O
of	O	O
minutes	O	O
after	O	O
which	O	O
you	O	O
are	O	O
automatically	O	O
logged	O	O
out	O	O
,	O	O
etc	O	O
.	O	O
)	O	O
The	O	O
scope	O	O
of	O	O
this	O	O
really	O	O
is	O	O
at	O	O
the	O	O
application	O	O
,	O	O
not	O	O
at	O	O
the	O	O
user	O	O
,	O	O
and	O	O
is	O	O
generally	O	O
used	O	O
for	O	O
deployment	O	O
settings	O	O
.	O	O
one	O	O
thing	O	O
I	O	O
would	O	O
look	O	O
at	O	O
doing	O	O
is	O	O
caching	O	O
the	O	O
appsettings	O	O
on	O	O
a	O	O
read	O	O
,	O	O
then	O	O
flushing	O	O
the	O	O
settings	O	O
from	O	O
the	O	O
cache	O	O
on	O	O
the	O	O
write	O	O
which	O	O
should	O	O
minimize	O	O
the	O	O
amount	O	O
of	O	O
actual	O	O
load	O	O
the	O	O
server	O	O
has	O	O
to	O	O
deal	O	O
with	O	O
for	O	O
processing	O	O
the	O	O
appSettings	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
possible	O	O
,	O	O
look	O	O
at	O	O
breaking	O	O
the	O	O
appSettings	O	O
up	O	O
into	O	O
configSections	O	O
so	O	O
you	O	O
can	O	O
read	O	O
write	O	O
and	O	O
cache	O	O
related	O	O
settings	O	O
.	O	O
Having	O	O
said	O	O
all	O	O
that	O	O
,	O	O
I	O	O
would	O	O
seriously	O	O
consider	O	O
looking	O	O
at	O	O
storing	O	O
these	O	O
values	O	O
in	O	O
a	O	O
database	O	O
as	O	O
you	O	O
seem	O	O
to	O	O
actually	O	O
be	O	O
storing	O	O
user	O	O
preferences	O	O
,	O	O
and	O	O
not	O	O
application	O	O
settings	O	O
.	O	O
I	O	O
should	O	O
probably	O	O
clarify	O	O
a	O	O
few	O	O
points	O	O
.	O	O
This	O	O
is	O	O
not	O	O
a	O	O
web	O	O
application	O	O
,	O	O
so	O	O
connecting	O	O
a	O	O
database	O	O
to	O	O
the	O	O
application	O	O
might	O	O
be	O	O
overkill	O	O
simply	O	O
for	O	O
storing	O	O
configuration	O	O
settings	O	O
.	O	O
This	O	O
is	O	O
a	O	O
Windows	O	O
Forms	O	O
application	O	O
.	O	O
According	O	O
to	O	O
the	O	O
MSDN	O	O
documention	O	O
,	O	O
the	O	O
ConfigurationManager	O	O
is	O	O
for	O	O
storing	O	O
not	O	O
just	O	O
application	O	O
level	O	O
settings	O	O
,	O	O
but	O	O
user	O	O
settings	O	O
as	O	O
well	O	O
.	O	O
(	O	O
Especially	O	O
important	O	O
if	O	O
,	O	O
for	O	O
instance	O	O
,	O	O
the	O	O
application	O	O
is	O	O
installed	O	O
as	O	O
a	O	O
partial-trust	O	O
application	O	O
.	O	O
)	O	O
Check	O	O
out	O	O
SQLite	O	O
,	O	O
it	O	O
seems	O	O
like	O	O
a	O	O
good	O	O
option	O	O
for	O	O
this	O	O
particular	O	O
scenario	O	O
.	O	O
I	O	O
would	O	O
not	O	O
use	O	O
config	O	O
files	O	O
for	O	O
storing	O	O
user	O	O
data	O	O
.	O	O
Use	O	O
a	O	O
db	O	O
.	O	O
since	O	O
you	O	O
're	O	O
using	O	O
a	O	O
winforms	O	O
app	O	O
,	O	O
if	O	O
it	O	O
's	O	O
in	O	O
.net	O	O
2.0	O	O
there	O	O
's	O	O
actually	O	O
a	O	O
user	O	O
settings	O	O
system	O	O
(	O	O
called	O	O
Properties	O	O
)	O	O
that	O	O
is	O	O
designed	O	O
for	O	O
this	O	O
purpose	O	O
.	O	O
This	O	O
article	O	O
on	O	O
MSDN	O	O
has	O	O
a	O	O
pretty	O	O
good	O	O
introduction	O	O
into	O	O
this	O	O
If	O	O
you	O	O
're	O	O
still	O	O
worried	O	O
about	O	O
performance	O	O
then	O	O
take	O	O
a	O	O
look	O	O
at	O	O
SQL	O	O
Compact	O	O
Edition	O	O
which	O	O
is	O	O
similar	O	O
to	O	O
SQLite	O	O
but	O	O
is	O	O
the	O	O
Microsoft	O	O
offering	O	O
which	O	O
I	O	O
've	O	O
found	O	O
plays	O	O
very	O	O
nicely	O	O
with	O	O
winforms	O	O
and	O	O
there	O	O
's	O	O
even	O	O
the	O	O
ability	O	O
to	O	O
make	O	O
it	O	O
work	O	O
with	O	O
Linq	O	O
Dylan	O	O
,	O	O
Do	O	O
n't	O	O
use	O	O
the	O	O
application	O	O
config	O	O
file	O	O
for	O	O
this	O	O
purpose	O	O
,	O	O
use	O	O
a	O	O
SQL	O	O
DB	O	O
(	O	O
SQLite	O	O
,	O	O
MySQL	O	O
,	O	O
MSSQL	O	O
,	O	O
whatever	O	O
)	O	O
because	O	O
you	O	O
'll	O	O
have	O	O
to	O	O
worry	O	O
less	O	O
about	O	O
concurrency	O	O
issues	O	O
during	O	O
reads	O	O
and	O	O
writes	O	O
to	O	O
the	O	O
config	O	O
file	O	O
.	O	O
You	O	O
'll	O	O
also	O	O
have	O	O
better	O	O
flexibility	O	O
in	O	O
the	O	O
type	O	O
of	O	O
data	O	O
you	O	O
want	O	O
to	O	O
store	O	O
.	O	O
The	O	O
appSettings	O	O
section	O	O
is	O	O
just	O	O
a	O	O
key/value	O	O
list	O	O
which	O	O
you	O	O
may	O	O
outgrow	O	O
as	O	O
time	O	O
passes	O	O
and	O	O
as	O	O
the	O	O
app	O	O
matures	O	O
.	O	O
You	O	O
could	O	O
use	O	O
custom	O	O
config	O	O
sections	O	O
but	O	O
then	O	O
you	O	O
're	O	O
into	O	O
a	O	O
new	O	O
problem	O	O
area	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
the	O	O
design	O	O
.	O	O
The	O	O
appSettings	O	O
is	O	O
n't	O	O
really	O	O
meant	O	O
for	O	O
what	O	O
you	O	O
are	O	O
trying	O	O
to	O	O
do	O	O
.	O	O
When	O	O
your	O	O
.NET	O	O
application	O	O
starts	O	O
,	O	O
it	O	O
reads	O	O
in	O	O
the	O	O
app.config	O	O
file	O	O
,	O	O
and	O	O
caches	O	O
its	O	O
contents	O	O
in	O	O
memory	O	O
.	O	O
For	O	O
that	O	O
reason	O	O
,	O	O
after	O	O
you	O	O
write	O	O
to	O	O
the	O	O
app.config	O	O
file	O	O
,	O	O
you	O	O
'll	O	O
have	O	O
to	O	O
somehow	O	O
force	O	O
the	O	O
runtime	O	O
to	O	O
re-parse	O	O
the	O	O
app.config	O	O
file	O	O
so	O	O
it	O	O
can	O	O
cache	O	O
the	O	O
settings	O	O
again	O	O
.	O	O
This	O	O
is	O	O
unnecessary	O	O
The	O	O
best	O	O
approach	O	O
would	O	O
be	O	O
to	O	O
use	O	O
a	O	O
database	O	O
to	O	O
store	O	O
your	O	O
configuration	O	O
settings	O	O
.	O	O
Barring	O	O
the	O	O
use	O	O
of	O	O
a	O	O
database	O	O
,	O	O
you	O	O
could	O	O
easily	O	O
setup	O	O
an	O	O
external	O	O
XML	O	O
configuration	O	O
file	O	O
.	O	O
When	O	O
your	O	O
application	O	O
starts	O	O
,	O	O
you	O	O
could	O	O
cache	O	O
its	O	O
contents	O	O
in	O	O
a	O	O
NameValueCollection	O	O
object	O	O
or	O	O
HashTable	O	O
object	O	O
.	O	O
As	O	O
you	O	O
change/add	O	O
settings	O	O
,	O	O
you	O	O
would	O	O
do	O	O
it	O	O
to	O	O
that	O	O
cached	O	O
copy	O	O
.	O	O
When	O	O
your	O	O
application	O	O
shuts	O	O
down	O	O
,	O	O
or	O	O
at	O	O
an	O	O
appropriate	O	O
time	O	O
interval	O	O
,	O	O
you	O	O
can	O	O
write	O	O
the	O	O
cache	O	O
contents	O	O
back	O	O
out	O	O
to	O	O
file	O	O
.	O	O
It	O	O
might	O	O
be	O	O
worth	O	O
checking	O	O
out	O	O
what	O	O
some	O	O
of	O	O
the	O	O
other	O	O
guys	O	O
are	O	O
doing	O	O
in	O	O
this	O	O
space	O	O
and	O	O
not	O	O
necessarily	O	O
in	O	O
the	O	O
C	O	O
#	O	O
arena	O	O
either	O	O
.	O	O
This	O	O
is	O	O
a	O	O
library	O	O
written	O	O
in	O	O
c	O	O
#	O	O
SVN	O	O
also	O	O
has	O	O
a	O	O
binary	O	O
diff	O	O
algorithm	O	O
and	O	O
I	O	O
know	O	O
there	O	O
's	O	O
an	O	O
implementation	O	O
in	O	O
python	O	O
although	O	O
I	O	O
could	O	O
n't	O	O
find	O	O
it	O	O
with	O	O
a	O	O
quick	O	O
search	O	O
.	O	O
They	O	O
might	O	O
give	O	O
you	O	O
some	O	O
ideas	O	O
on	O	O
where	O	O
to	O	O
improve	O	O
your	O	O
own	O	O
algorithm	O	O
Sorry	O	O
I	O	O
could	O	O
n't	O	O
be	O	O
more	O	O
help	O	O
.	O	O
I	O	O
would	O	O
definately	O	O
keep	O	O
looking	O	O
at	O	O
xdelta	O	O
because	O	O
I	O	O
have	O	O
used	O	O
it	O	O
a	O	O
number	O	O
of	O	O
times	O	O
to	O	O
produce	O	O
quality	O	O
diffs	O	O
on	O	O
600MB+	O	O
ISO	O	O
files	O	O
we	O	O
have	O	O
generated	O	O
for	O	O
distributing	O	O
our	O	O
products	O	O
and	O	O
it	O	O
performs	O	O
very	O	O
well	O	O
.	O	O
If	O	O
this	O	O
is	O	O
for	O	O
installation	O	O
or	O	O
distribution	O	O
,	O	O
have	O	O
you	O	O
considered	O	O
using	O	O
the	O	O
Windows	O	O
Installer	O	O
SDK	O	O
?	O	O
It	O	O
has	O	O
the	O	O
ability	O	O
to	O	O
patch	O	O
binary	O	O
files	O	O
.	O	O
http	O	O
:	O	O
//msdn.microsoft.com/en-us/library/aa370578	O	O
(	O	O
VS.85	O	O
)	O	O
.aspx	O	O
Yes	O	O
they	O	O
should	O	O
,	O	O
only	O	O
leads	O	O
to	O	O
confusion	O	O
otherwise	O	O
.	O	O
I	O	O
'd	O	O
say	O	O
yes	O	O
.	O	O
First	O	O
,	O	O
it	O	O
will	O	O
be	O	O
easier	O	O
to	O	O
find	O	O
the	O	O
actual	O	O
code	O	O
files	O	O
by	O	O
following	O	O
down	O	O
the	O	O
namespaces	O	O
(	O	O
say	O	O
,	O	O
when	O	O
somebody	O	O
e-mails	O	O
you	O	O
a	O	O
naked	O	O
exception	O	O
call	O	O
stack	O	O
)	O	O
.	O	O
If	O	O
you	O	O
let	O	O
your	O	O
folders	O	O
go	O	O
out	O	O
of	O	O
sync	O	O
with	O	O
namespaces	O	O
,	O	O
finding	O	O
files	O	O
in	O	O
big	O	O
codebases	O	O
becomes	O	O
getting	O	O
tiring	O	O
.	O	O
Second	O	O
,	O	O
VS	O	O
will	O	O
generate	O	O
new	O	O
classes	O	O
you	O	O
create	O	O
in	O	O
folders	O	O
with	O	O
the	O	O
same	O	O
namespace	O	O
of	O	O
its	O	O
parent	O	O
folder	O	O
structure	O	O
.	O	O
If	O	O
you	O	O
decide	O	O
to	O	O
swim	O	O
against	O	O
this	O	O
,	O	O
it	O	O
will	O	O
be	O	O
just	O	O
one	O	O
more	O	O
plumbing	O	O
job	O	O
to	O	O
do	O	O
daily	O	O
when	O	O
adding	O	O
new	O	O
files	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
this	O	O
goes	O	O
without	O	O
saying	O	O
that	O	O
one	O	O
should	O	O
be	O	O
conservative	O	O
about	O	O
how	O	O
deep	O	O
xis	O	O
folder/namespace	O	O
hierarchy	O	O
goes	O	O
.	O	O
I	O	O
think	O	O
the	O	O
standard	O	O
,	O	O
within	O	O
.NET	O	O
,	O	O
is	O	O
to	O	O
try	O	O
to	O	O
do	O	O
it	O	O
when	O	O
possible	O	O
,	O	O
but	O	O
not	O	O
to	O	O
create	O	O
unnecessarily	O	O
deep	O	O
structures	O	O
just	O	O
to	O	O
adhere	O	O
to	O	O
it	O	O
as	O	O
a	O	O
hard	O	O
rule	O	O
.	O	O
None	O	O
of	O	O
my	O	O
projects	O	O
follow	O	O
the	O	O
namespace	O	O
==	O	O
structure	O	O
rule	O	O
100	O	O
%	O	O
of	O	O
the	O	O
time	O	O
,	O	O
sometimes	O	O
its	O	O
just	O	O
cleaner/better	O	O
to	O	O
break	O	O
out	O	O
from	O	O
such	O	O
rules	O	O
.	O	O
In	O	O
Java	O	B-API
you	O	O
do	O	O
n't	O	O
have	O	O
a	O	O
choice	O	O
.	O	O
I	O	O
'd	O	O
call	O	O
that	O	O
a	O	O
classic	O	O
case	O	O
of	O	O
what	O	O
works	O	O
in	O	O
theory	O	O
vs	O	O
what	O	O
works	O	O
in	O	O
practice	O	O
.	O	O
Also	O	O
,	O	O
note	O	O
that	O	O
if	O	O
you	O	O
use	O	O
the	O	O
built-in	O	O
templates	O	O
to	O	O
add	O	O
classes	O	O
to	O	O
a	O	O
folder	O	O
,	O	O
it	O	O
will	O	O
by	O	O
default	O	O
be	O	O
put	O	O
in	O	O
a	O	O
namespace	O	O
that	O	O
reflects	O	O
the	O	O
folder	O	O
hierarchy	O	O
.	O	O
The	O	O
classes	O	O
will	O	O
be	O	O
easier	O	O
to	O	O
find	O	O
and	O	O
that	O	O
alone	O	O
should	O	O
be	O	O
reasons	O	O
good	O	O
enough	O	O
.	O	O
The	O	O
rules	O	O
we	O	O
follow	O	O
are	O	O
:	O	O
Project/assembly	O	O
name	O	O
is	O	O
the	O	O
same	O	O
as	O	O
the	O	O
root	O	O
namespace	O	O
,	O	O
except	O	O
for	O	O
the	O	O
.dll	O	O
ending	O	O
Only	O	O
exception	O	O
to	O	O
the	O	O
above	O	O
rule	O	O
is	O	O
a	O	O
project	O	O
with	O	O
a	O	O
.Core	O	O
ending	O	O
,	O	O
the	O	O
.Core	O	O
is	O	O
stripped	O	O
off	O	O
Folders	O	O
equals	O	O
namespaces	O	O
One	O	O
type	O	O
per	O	O
file	O	O
(	O	O
class	O	O
,	O	O
struct	O	O
,	O	O
enum	O	O
,	O	O
delegate	O	O
,	O	O
etc	O	O
.	O	O
)	O	O
makes	O	O
it	O	O
easy	O	O
to	O	O
find	O	O
the	O	O
right	O	O
file	O	O
I	O	O
found	O	O
that	O	O
if	O	O
you	O	O
append	O	O
the	O	O
last	O	O
modified	O	O
timestamp	O	O
of	O	O
the	O	O
file	O	O
onto	O	O
the	O	O
end	O	O
of	O	O
the	O	O
URL	O	O
the	O	O
browser	O	O
will	O	O
request	O	O
the	O	O
files	O	O
when	O	O
it	O	O
is	O	O
modified	O	O
.	O	O
For	O	O
example	O	O
in	O	O
PHP	O	O
:	O	O
function	O	O
urlmtime	B-API	O
(	I-API	O
$	I-API	O
url	I-API	O
)	I-API	O
{	O	O
$	O	O
parsed_url	O	O
=	O	O
parse_url	B-API	B-API
(	I-API	I-API
$	I-API	I-API
url	I-API	I-API
)	I-API	I-API
;	O	O
$	O	O
path	O	O
=	O	O
$	O	O
parsed_url	O	O
[	O	O
'path	O	O
'	O	O
]	O	O
;	O	O
if	O	O
(	O	O
$	O	O
path	O	O
[	O	O
0	O	O
]	O	O
==	O	O
``	O	O
/	O	O
''	O	O
)	O	O
{	O	O
$	O	O
filename	O	O
=	O	O
$	O	O
_SERVER	O	O
[	O	O
'DOCUMENT_ROOT	O	O
'	O	O
]	O	O
.	O	O
``	O	O
/	O	O
''	O	O
.	O	O
$	O	O
path	O	O
;	O	O
}	O	O
else	O	O
{	O	O
$	O	O
filename	O	O
=	O	O
$	O	O
path	O	O
;	O	O
}	O	O
if	O	O
(	O	O
!	O	O
file_exists	B-API	O
(	I-API	O
$	I-API	O
filename	I-API	O
)	I-API	O
)	O	O
{	O	O
//	O	O
If	O	O
not	O	O
a	O	O
file	O	O
then	O	O
use	O	O
the	O	O
current	O	O
time	O	O
$	O	O
lastModified	O	O
=	O	O
date	B-API	B-API
(	I-API	I-API
'YmdHis	I-API	I-API
'	I-API	I-API
)	I-API	I-API
;	O	O
}	O	O
else	O	O
{	O	O
$	O	O
lastModified	O	O
=	O	O
date	B-API	O
(	I-API	O
'YmdHis	I-API	O
'	I-API	O
,	I-API	O
filemtime	I-API	B-API
(	I-API	I-API
$	I-API	I-API
filename	I-API	I-API
)	I-API	I-API
)	I-API	I-API
;	O	O
}	O	O
if	O	O
(	O	O
strpos	B-API	O
(	I-API	O
$	I-API	O
url	I-API	O
,	I-API	O
'	I-API	O
?	I-API	O
'	I-API	O
)	I-API	O
===	O	O
false	O	O
)	O	O
{	O	O
$	O	O
url	O	O
.=	O	O
'	O	O
?	O	O
ts=	O	O
'	O	O
.	O	O
$	O	O
lastModified	O	O
;	O	O
}	O	O
else	O	O
{	O	O
$	O	O
url	O	O
.=	O	O
'ts=	O	O
'	O	O
.	O	O
$	O	O
lastModified	O	O
;	O	O
}	O	O
return	O	O
$	O	O
url	O	O
;	O	O
}	O	O
function	O	O
include_css	B-API	O
(	I-API	O
$	I-API	O
css_url	I-API	O
,	I-API	O
$	I-API	O
media='all	I-API	O
'	I-API	O
)	I-API	O
{	O	O
//	O	O
According	O	O
to	O	O
Yahoo	O	O
,	O	O
using	O	O
link	O	O
allows	O	O
for	O	O
progressive	O	O
//	O	O
rendering	O	O
in	O	O
IE	O	O
where	O	O
as	O	O
@	O	O
import	O	O
url	B-API	O
(	I-API	O
$	I-API	O
css_url	I-API	O
)	I-API	O
does	O	O
not	O	O
echo	O	O
'link	O	O
rel=	O	O
''	O	O
stylesheet	O	O
''	O	O
type=	O	O
''	O	O
text/css	O	O
''	O	O
media=	O	O
''	O	O
'	O	O
.	O	O
$	O	O
media	O	O
.	O	O
'	O	O
''	O	O
href=	O	O
''	O	O
'	O	O
.	O	O
urlmtime	B-API	B-API
(	I-API	I-API
$	I-API	I-API
css_url	I-API	I-API
)	I-API	I-API
.	O	O
'	O	O
''	O	O
'	O	O
.	O	O
``	O	O
\n	O	O
''	O	O
;	O	O
}	O	O
function	O	O
include_javascript	B-API	O
(	I-API	O
$	I-API	O
javascript_url	I-API	O
)	I-API	O
{	O	O
echo	O	O
'script	O	O
type=	O	O
''	O	O
text/javascript	O	O
''	O	O
src=	O	O
''	O	O
'	O	O
.	O	O
urlmtime	B-API	B-API
(	I-API	I-API
$	I-API	I-API
javascript_url	I-API	I-API
)	I-API	I-API
.	O	O
'	O	O
''	O	O
/script	O	O
'	O	O
.	O	O
``	O	O
\n	O	O
''	O	O
;	O	O
}	O	O
Some	O	O
solutions	O	O
I	O	O
have	O	O
seen	O	O
involve	O	O
adding	O	O
a	O	O
version	O	O
number	O	O
to	O	O
the	O	O
end	O	O
of	O	O
the	O	O
file	O	O
in	O	O
the	O	O
form	O	O
of	O	O
a	O	O
query	O	O
string	O	O
.	O	O
script	O	O
type=	O	O
''	O	O
text/javascript	O	O
''	O	O
src=	O	O
''	O	O
funkycode.js	O	O
?	O	O
v1	O	O
''	O	O
You	O	O
could	O	O
use	O	O
the	O	O
SVN	O	O
revision	O	O
number	O	O
to	O	O
automate	O	O
this	O	O
for	O	O
you	O	O
by	O	O
including	O	O
the	O	O
word	O	O
LastChangedRevision	O	O
in	O	O
your	O	O
html	O	O
file	O	O
after	O	O
where	O	O
v1	O	O
appears	O	O
above	O	O
.	O	O
You	O	O
must	O	O
also	O	O
setup	O	O
your	O	O
repository	O	O
to	O	O
do	O	O
this	O	O
.	O	O
I	O	O
hope	O	O
this	O	O
further	O	O
clarifies	O	O
my	O	O
answer	O	O
?	O	O
Firefox	O	O
also	O	O
allows	O	O
pressing	O	O
CTRL	O	O
+	O	O
R	O	O
to	O	O
reload	O	O
everything	O	O
on	O	O
a	O	O
particular	O	O
page	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
it	O	O
is	O	O
better	O	O
to	O	O
make	O	O
the	O	O
version	O	O
number	O	O
part	O	O
of	O	O
the	O	O
file	O	O
itself	O	O
.	O	O
e.g	O	O
.	O	O
myscript.1.2.3.js	O	O
You	O	O
can	O	O
set	O	O
your	O	O
webserver	O	O
to	O	O
cache	O	O
this	O	O
file	O	O
forever	O	O
,	O	O
and	O	O
just	O	O
add	O	O
a	O	O
new	O	O
js	O	O
file	O	O
when	O	O
you	O	O
have	O	O
a	O	O
new	O	O
version	O	O
.	O	O
is	O	O
this	O	O
a	O	O
console	O	O
app	O	O
or	O	O
a	O	O
winforms	O	O
app	O	O
?	O	O
If	O	O
it	O	O
's	O	O
a	O	O
.NET	O	B-API
1.1	O	I-API
console	O	O
app	O	O
this	O	O
is	O	O
,	O	O
sadly	O	O
,	O	O
by	O	O
design	O	O
--	O	O
it	O	O
's	O	O
confirmed	O	O
by	O	O
a	O	O
MSFT	O	O
dev	O	O
in	O	O
the	O	O
second	O	O
blog	O	O
post	O	O
you	O	O
referenced	O	O
:	O	O
BTW	O	O
,	O	O
on	O	O
my	O	O
1.1	O	O
machine	O	O
the	O	O
example	O	O
from	O	O
MSDN	O	O
does	O	O
have	O	O
the	O	O
expected	O	O
output	O	O
;	O	O
it	O	O
's	O	O
just	O	O
that	O	O
the	O	O
second	O	O
line	O	O
does	O	O
n't	O	O
show	O	O
up	O	O
until	O	O
after	O	O
you	O	O
've	O	O
attached	O	O
a	O	O
debugger	O	O
(	O	O
or	O	O
not	O	O
)	O	O
.	O	O
In	O	O
v2	O	O
we	O	O
've	O	O
flipped	O	O
things	O	O
around	O	O
so	O	O
that	O	O
the	O	O
UnhandledException	B-API	O
event	O	O
fires	O	O
before	O	O
the	O	O
debugger	O	O
attaches	O	O
,	O	O
which	O	O
seems	O	O
to	O	O
be	O	O
what	O	O
most	O	O
people	O	O
expect	O	O
.	O	O
Sounds	O	O
like	O	O
.NET	O	O
2.0	O	O
does	O	O
this	O	O
better	O	O
(	O	O
thank	O	O
goodness	O	O
)	O	O
,	O	O
but	O	O
honestly	O	O
,	O	O
I	O	O
never	O	O
had	O	O
time	O	O
to	O	O
go	O	O
back	O	O
and	O	O
check	O	O
.	O	O
It	O	O
's	O	O
a	O	O
WinForms	O	O
app	O	O
.	O	O
The	O	O
exceptions	O	O
that	O	O
are	O	O
caught	O	O
by	O	O
Application.ThreadException	B-API	O
work	O	O
fine	O	O
,	O	O
and	O	O
I	O	O
do	O	O
n't	O	O
get	O	O
the	O	O
ugly	O	O
.NET	O	O
exception	O	O
box	B-API	O
(	I-API	O
OK	I-API	O
to	I-API	O
terminate	I-API	O
,	I-API	O
cancel	I-API	O
to	I-API	O
debug	I-API	O
?	I-API	O
who	I-API	O
came	I-API	O
up	I-API	O
with	I-API	O
that	I-API	O
?	I-API	O
?	I-API	O
)	I-API	O
.	O	O
I	O	O
was	O	O
getting	O	O
some	O	O
exceptions	O	O
that	O	O
were	O	O
n't	O	O
being	O	O
caught	O	O
by	O	O
that	O	O
and	O	O
ended	O	O
up	O	O
going	O	O
to	O	O
the	O	O
AppDomain.UnhandledException	B-API	B-API
event	O	O
that	O	O
were	O	O
causing	O	O
problems	O	O
.	O	O
I	O	O
think	O	O
I	O	O
've	O	O
caught	O	O
most	O	O
of	O	O
those	O	O
exceptions	O	O
and	O	O
I	O	O
am	O	O
displaying	O	O
them	O	O
in	O	O
our	O	O
nice	O	O
error	O	O
box	O	O
now	O	O
.	O	O
So	O	O
I	O	O
'll	O	O
just	O	O
have	O	O
to	O	O
hope	O	O
there	O	O
are	O	O
not	O	O
some	O	O
other	O	O
circumstances	O	O
that	O	O
would	O	O
cause	O	O
exceptions	O	O
to	O	O
not	O	O
be	O	O
caught	O	O
by	O	O
the	O	O
Application.ThreadException	B-API	O
handler	O	O
.	O	O
Oh	O	O
,	O	O
in	O	O
WinForms	O	O
you	O	O
definitely	O	O
should	O	O
be	O	O
able	O	O
to	O	O
get	O	O
it	O	O
to	O	O
work	O	O
.	O	O
The	O	O
only	O	O
thing	O	O
you	O	O
have	O	O
to	O	O
watch	O	O
out	O	O
for	O	O
is	O	O
things	O	O
happening	O	O
on	O	O
different	O	O
threads	O	O
.	O	O
I	O	O
have	O	O
an	O	O
old	O	O
CodeProject	O	O
article	O	O
here	O	O
which	O	O
should	O	O
help	O	O
:	O	O
http	O	O
:	O	O
//www.codeproject.com/KB/exception/ExceptionHandling.aspx	O	O
AppDomain.UnhandledException	B-API	B-API
is	O	O
an	O	O
event	O	O
,	O	O
not	O	O
a	O	O
global	O	O
exception	O	O
handler	O	O
.	O	O
This	O	O
means	O	O
,	O	O
by	O	O
the	O	O
time	O	O
it	O	O
is	O	O
raised	O	O
,	O	O
your	O	O
application	O	O
is	O	O
already	O	O
on	O	O
its	O	O
way	O	O
down	O	O
the	O	O
drain	O	O
,	O	O
and	O	O
there	O	O
is	O	O
nothing	O	O
you	O	O
can	O	O
do	O	O
about	O	O
it	O	O
,	O	O
except	O	O
for	O	O
doing	O	O
cleanup	O	O
and	O	O
error	O	O
logging	O	O
.	O	O
What	O	O
happened	O	O
behind	O	O
the	O	O
scenes	O	O
is	O	O
this	O	O
:	O	O
The	O	O
framework	O	O
detected	O	O
the	O	O
exception	O	O
,	O	O
walked	O	O
up	O	O
the	O	O
call	O	O
stack	O	O
to	O	O
the	O	O
very	O	O
top	O	O
,	O	O
found	O	O
no	O	O
handlers	O	O
that	O	O
would	O	O
recover	O	O
from	O	O
the	O	O
error	O	O
,	O	O
so	O	O
was	O	O
unable	O	O
to	O	O
determine	O	O
if	O	O
it	O	O
was	O	O
safe	O	O
to	O	O
continue	O	O
execution	O	O
.	O	O
So	O	O
,	O	O
it	O	O
started	O	O
the	O	O
shutdown	O	O
sequence	O	O
,	O	O
and	O	O
fired	O	O
up	O	O
this	O	O
event	O	O
as	O	O
a	O	O
courtesy	O	O
to	O	O
you	O	O
so	O	O
you	O	O
can	O	O
pay	O	O
your	O	O
respects	O	O
to	O	O
your	O	O
already-doomed	O	O
process	O	O
.	O	O
This	O	O
happens	O	O
when	O	O
an	O	O
exception	O	O
is	O	O
left	O	O
unhandled	O	O
in	O	O
the	O	O
main	O	O
thread	O	O
.	O	O
There	O	O
is	O	O
no	O	O
single-point	O	O
solution	O	O
to	O	O
this	O	O
kind	O	O
of	O	O
error	O	O
.	O	O
You	O	O
need	O	O
to	O	O
put	O	O
a	O	O
real	O	O
exception	O	O
handler	O	O
(	O	O
a	O	O
catch	O	O
block	O	O
)	O	O
upstream	O	O
of	O	O
all	O	O
places	O	O
where	O	O
this	O	O
error	O	O
occurs	O	O
and	O	O
forward	O	O
it	O	O
to	O	O
(	O	O
for	O	O
example	O	O
)	O	O
a	O	O
global	O	O
handler	O	O
method/class	O	O
that	O	O
will	O	O
determine	O	O
if	O	O
it	O	O
is	O	O
safe	O	O
to	O	O
simply	O	O
report	O	O
and	O	O
continue	O	O
,	O	O
based	O	O
on	O	O
exception	O	O
type	O	O
and/or	O	O
content	O	O
.	O	O
Edit	O	O
:	O	O
It	O	O
is	O	O
possible	O	O
to	O	O
disable	O	O
(	O	O
=hack	O	O
)	O	O
the	O	O
error-reporting	O	O
mechanism	O	O
built	O	O
into	O	O
Windows	O	O
so	O	O
the	O	O
mandatory	O	O
``	O	O
crash	O	O
and	O	O
burn	O	O
''	O	O
dialog	O	O
does	O	O
not	O	O
get	O	O
displayed	O	O
when	O	O
your	O	O
app	O	O
goes	O	O
down	O	O
.	O	O
However	O	O
,	O	O
this	O	O
becomes	O	O
effective	O	O
for	O	O
all	O	O
the	O	O
applications	O	O
in	O	O
the	O	O
system	O	O
,	O	O
not	O	O
just	O	O
your	O	O
own	O	O
.	O	O
One	O	O
method	O	O
you	O	O
can	O	O
used	O	O
to	O	O
obtain	O	O
this	O	O
option	O	O
is	O	O
by	O	O
placing	O	O
a	O	O
``	O	O
CheckBox	O	O
''	O	O
object	O	O
and	O	O
changing	O	O
its	O	O
``	O	O
Appearance	O	O
''	O	O
from	O	O
``	O	O
Normal	O	O
''	O	O
to	O	O
``	O	O
Button	O	O
''	O	O
this	O	O
will	O	O
give	O	O
you	O	O
the	O	O
same	O	O
functionality	O	O
that	O	O
I	O	O
believe	O	O
you	O	O
are	O	O
looking	O	O
for	O	O
.	O	O
Yes	O	O
,	O	O
I	O	O
thought	O	O
about	O	O
that	O	O
,	O	O
but	O	O
I	O	O
soon	O	O
figured	O	O
out	O	O
that	O	O
another	O	O
Domain-Specific-Language	O	O
(	O	O
DSL	O	O
)	O	O
would	O	O
be	O	O
a	O	O
bit	O	O
too	O	O
much	O	O
.	O	O
Essentially	O	O
,	O	O
they	O	O
need	O	O
to	O	O
interact	O	O
with	O	O
my	O	O
gamestate	O	O
in	O	O
possibly	O	O
unpredictable	O	O
ways	O	O
.	O	O
For	O	O
example	O	O
,	O	O
a	O	O
card	O	O
could	O	O
have	O	O
a	O	O
rule	O	O
``	O	O
When	O	O
this	O	O
cards	O	O
enter	O	O
play	O	O
,	O	O
all	O	O
your	O	O
undead	O	O
minions	O	O
gain	O	O
+3	O	O
attack	O	O
against	O	O
flying	O	O
enemies	O	O
,	O	O
except	O	O
when	O	O
the	O	O
enemy	O	O
is	O	O
blessed	O	O
''	O	O
.	O	O
As	O	O
trading	O	O
card	O	O
games	O	O
are	O	O
turn	O	O
based	O	O
,	O	O
the	O	O
GameState	O	O
Manager	O	O
will	O	O
fire	O	O
OnStageX	O	O
events	O	O
and	O	O
let	O	O
the	O	O
cards	O	O
modify	O	O
other	O	O
cards	O	O
or	O	O
the	O	O
GameState	O	O
in	O	O
whatever	O	O
way	O	O
the	O	O
card	O	O
needs	O	O
.	O	O
If	O	O
I	O	O
try	O	O
to	O	O
create	O	O
a	O	O
DSL	O	O
,	O	O
I	O	O
have	O	O
to	O	O
implement	O	O
a	O	O
rather	O	O
large	O	O
feature	O	O
set	O	O
and	O	O
possibly	O	O
constantly	O	O
update	O	O
it	O	O
,	O	O
which	O	O
shifts	O	O
the	O	O
maintenance	O	O
work	O	O
to	O	O
another	O	O
part	O	O
without	O	O
actually	O	O
removing	O	O
it	O	O
.	O	O
That	O	O
's	O	O
why	O	O
I	O	O
wanted	O	O
to	O	O
stay	O	O
with	O	O
a	O	O
``	O	O
real	O	O
''	O	O
.NET	O	O
language	O	O
to	O	O
essentially	O	O
be	O	O
able	O	O
to	O	O
just	O	O
fire	O	O
the	O	O
event	O	O
and	O	O
let	O	O
the	O	O
card	O	O
manipulate	O	O
the	O	O
gamestate	O	O
in	O	O
whatever	O	O
way	O	O
(	O	O
within	O	O
the	O	O
limits	O	O
of	O	O
the	O	O
code	O	O
access	O	O
security	O	O
)	O	O
.	O	O
Oleg	O	O
Shilo	O	O
's	O	O
C	O	O
#	O	O
Script	O	O
solution	O	O
(	O	O
at	O	O
The	O	O
Code	O	O
Project	O	O
)	O	O
really	O	O
is	O	O
a	O	O
great	O	O
introduction	O	O
to	O	O
providing	O	O
script	O	O
abilities	O	O
in	O	O
your	O	O
application	O	O
.	O	O
A	O	O
different	O	O
approach	O	O
would	O	O
be	O	O
to	O	O
consider	O	O
a	O	O
language	O	O
that	O	O
is	O	O
specifically	O	O
built	O	O
for	O	O
scripting	O	O
,	O	O
such	O	O
as	O	O
IronRuby	O	O
,	O	O
IronPython	O	O
,	O	O
or	O	O
Lua	O	O
.	O	O
IronPython	O	O
and	O	O
IronRuby	O	O
are	O	O
both	O	O
available	O	O
today	O	O
.	O	O
For	O	O
a	O	O
guide	O	O
to	O	O
embedding	O	O
IronPython	O	O
read	O	O
How	O	O
to	O	O
embed	O	O
IronPython	O	O
script	O	O
support	O	O
in	O	O
your	O	O
existing	O	O
app	O	O
in	O	O
10	O	O
easy	O	O
steps	O	O
.	O	O
Lua	O	O
is	O	O
a	O	O
scripting	O	O
language	O	O
commonly	O	O
used	O	O
in	O	O
games	O	O
.	O	O
There	O	O
is	O	O
a	O	O
Lua	O	O
compiler	O	O
for	O	O
.NET	O	O
,	O	O
available	O	O
from	O	O
CodePlex	O	O
--	O	O
http	O	O
:	O	O
//www.codeplex.com/Nua	O	O
That	O	O
codebase	O	O
is	O	O
a	O	O
great	O	O
read	O	O
if	O	O
you	O	O
want	O	O
to	O	O
learn	O	O
about	O	O
building	O	O
a	O	O
compiler	O	O
in	O	O
.NET	O	B-API
.	O	O
A	O	O
different	O	O
angle	O	O
altogether	O	O
is	O	O
to	O	O
try	O	O
PowerShell	O	O
.	O	O
There	O	O
are	O	O
numerous	O	O
examples	O	O
of	O	O
embedding	O	O
PowerShell	O	O
into	O	O
an	O	O
application	O	O
--	O	O
here	O	O
's	O	O
a	O	O
thorough	O	O
project	O	O
on	O	O
the	O	O
topic	O	O
:	O	O
Powershell	O	O
Tunnel	O	O
You	O	O
might	O	O
be	O	O
able	O	O
to	O	O
use	O	O
IronRuby	O	O
for	O	O
that	O	O
.	O	O
Otherwise	O	O
I	O	O
'd	O	O
suggest	O	O
you	O	O
have	O	O
a	O	O
directory	O	O
where	O	O
you	O	O
place	O	O
precompiled	O	O
assemblies	O	O
.	O	O
Then	O	O
you	O	O
could	O	O
have	O	O
a	O	O
reference	O	O
in	O	O
the	O	O
DB	O	O
to	O	O
the	O	O
assembly	O	O
and	O	O
class	O	O
,	O	O
and	O	O
use	O	O
reflection	O	O
to	O	O
load	O	O
the	O	O
proper	O	O
assemblies	O	O
at	O	O
runtime	O	O
.	O	O
If	O	O
you	O	O
really	O	O
want	O	O
to	O	O
compile	O	O
at	O	O
run-time	O	O
you	O	O
could	O	O
use	O	O
the	O	O
CodeDOM	O	B-API
,	O	O
then	O	O
you	O	O
could	O	O
use	O	O
reflection	O	O
to	O	O
load	O	O
the	O	O
dynamic	O	O
assembly	O	O
.	O	O
MSDN	O	O
article	O	O
which	O	O
might	O	O
help	O	O
.	O	O
You	O	O
could	O	O
use	O	O
any	O	O
of	O	O
the	O	O
DLR	O	O
languages	O	O
,	O	O
which	O	O
provide	O	O
a	O	O
way	O	O
to	O	O
really	O	O
easily	O	O
host	O	O
your	O	O
own	O	O
scripting	O	O
platform	O	O
.	O	O
However	O	O
,	O	O
you	O	O
do	O	O
n't	O	O
have	O	O
to	O	O
use	O	O
a	O	O
scripting	O	O
language	O	O
for	O	O
this	O	O
.	O	O
You	O	O
could	O	O
use	O	O
C	O	B-API
#	O	I-API
and	O	O
compile	O	O
it	O	O
with	O	O
the	O	O
C	O	O
#	O	O
code	O	O
provider	O	O
.	O	O
As	O	O
long	O	O
as	O	O
you	O	O
load	O	O
it	O	O
in	O	O
its	O	O
own	O	O
AppDomain	O	O
,	O	O
you	O	O
can	O	O
load	O	O
and	O	O
unload	O	O
it	O	O
to	O	O
your	O	O
heart	O	O
's	O	O
content	O	O
.	O	O
If	O	O
you	O	O
do	O	O
n't	O	O
want	O	O
to	O	O
use	O	O
the	O	O
DLR	O	O
you	O	O
can	O	O
use	O	O
Boo	O	O
(	O	O
which	O	O
has	O	O
an	O	O
interpreter	O	O
)	O	O
or	O	O
you	O	O
could	O	O
consider	O	O
the	O	O
Script.NET	B-API	O
(	I-API	O
S	I-API	O
#	I-API	O
)	I-API	O
project	O	O
on	O	O
CodePlex	O	B-API
.	O	O
With	O	O
the	O	O
Boo	O	O
solution	O	O
you	O	O
can	O	O
choose	O	O
between	O	O
compiled	O	O
scripts	O	O
or	O	O
using	O	O
the	O	O
interpreter	O	O
,	O	O
and	O	O
Boo	O	O
makes	O	O
a	O	O
nice	O	O
scripting	O	O
language	O	O
,	O	O
has	O	O
a	O	O
flexible	O	O
syntax	O	O
and	O	O
an	O	O
extensible	O	O
language	O	O
via	O	O
its	O	O
open	O	O
compiler	O	O
architecture	O	O
.	O	O
Script.NET	O	O
looks	O	O
nice	O	O
too	O	O
,	O	O
though	O	O
,	O	O
and	O	O
you	O	O
could	O	O
easily	O	O
extend	O	O
that	O	O
language	O	O
as	O	O
well	O	O
as	O	O
its	O	O
an	O	O
open	O	O
source	O	O
project	O	O
and	O	O
uses	O	O
a	O	O
very	O	O
friendly	O	O
Compiler	O	O
Generator	B-API	O
(	I-API	O
Irony.net	I-API	O
)	I-API	O
.	O	O
As	O	O
far	O	O
as	O	O
I	O	O
can	O	O
tell	O	O
Python	O	O
,	O	O
up	O	O
through	O	O
2.5	O	O
,	O	O
only	O	O
supports	O	O
hexadecimal	O	O
octal	O	O
literals	O	O
.	O	O
I	O	O
did	O	O
find	O	O
some	O	O
discussions	O	O
about	O	O
adding	O	O
binary	O	O
to	O	O
future	O	O
versions	O	O
but	O	O
nothing	O	O
definite	O	O
.	O	O
I	O	O
am	O	O
pretty	O	O
sure	O	O
this	O	O
is	O	O
one	O	O
of	O	O
the	O	O
things	O	O
due	O	O
to	O	O
change	O	O
in	O	O
Python	O	O
3.0	O	O
with	O	O
perhaps	O	O
bin	O	O
(	O	O
)	O	O
to	O	O
go	O	O
with	O	O
hex	B-API	O
(	I-API	O
)	I-API	O
and	O	O
oct	B-API	O
(	I-API	O
)	I-API	O
.	O	O
EDIT	O	O
:	O	O
lbrandy	O	O
's	O	O
answer	O	O
is	O	O
correct	O	O
in	O	O
all	O	O
cases	O	O
.	O	O
print	O	O
int	B-API	B-API
(	I-API	I-API
'01010101111',2	I-API	I-API
)	I-API	I-API
687	O	O
print	O	O
int	B-API	O
(	I-API	O
'11111111',2	I-API	O
)	I-API	O
255	O	O
Another	O	O
way	O	O
.	O	O
break	O	O
would	O	O
stop	O	O
the	O	O
foreach	O	O
loop	O	O
completely	O	O
,	O	O
continue	O	O
would	O	O
skip	O	O
to	O	O
the	O	O
next	O	O
DataRow	O	O
will	O	O
exit	O	O
the	O	O
loop	O	O
completely	O	O
,	O	O
will	O	O
just	O	O
skip	O	O
the	O	O
current	O	O
iteration	O	O
.	O	O
For	O	O
example	O	O
:	O	O
for	O	O
(	O	O
int	O	O
i	O	O
=	O	O
0	O	O
;	O	O
i	O	O
10	O	O
;	O	O
i++	O	O
)	O	O
{	O	O
if	O	B-API
(	O	I-API
i	O	I-API
==	O	I-API
0	O	I-API
)	O	I-API
break	O	O
;	O	O
(	O	O
i	O	O
)	O	O
;	O	O
}	O	O
The	O	O
break	O	O
will	O	O
cause	O	O
the	O	O
loop	O	O
to	O	O
exit	O	O
on	O	O
the	O	O
first	O	O
iteration	O	O
-	O	O
will	O	O
never	O	O
be	O	O
executed	O	O
.	O	O
This	O	O
here	O	O
:	O	O
for	O	O
(	O	O
int	O	O
i	B-API	O
=	B-API	O
;	O	O
i	O	O
10	O	O
;	O	O
i++	O	O
)	O	O
{	O	O
if	O	O
(	O	O
i	O	O
==	O	O
0	O	O
)	O	O
continue	O	O
;	O	O
(	O	O
i	O	O
)	O	O
;	O	O
}	O	O
Will	O	O
not	O	O
execute	O	O
DoSomeThingWith	O	O
for	O	O
i	O	O
=	O	O
0	O	O
,	O	O
but	O	O
the	O	O
loop	O	O
will	O	O
continue	O	O
and	O	O
DoSomeThingWith	O	O
will	O	O
be	O	O
executed	O	O
for	O	O
i	B-API	O
=	B-API	O
to	O	O
i	B-API	O
=	B-API	O
.	O	O
A	O	O
really	O	O
easy	O	O
way	O	O
to	O	O
understand	O	O
this	O	O
is	O	O
to	O	O
place	O	O
the	O	O
word	O	O
``	O	O
loop	O	O
''	O	O
after	O	O
each	O	O
of	O	O
the	O	O
keywords	O	O
.	O	O
The	O	O
terms	O	O
now	O	O
make	O	O
sense	O	O
if	O	O
they	O	O
are	O	O
just	O	O
read	O	O
like	O	O
everyday	O	O
phrases	O	O
.	O	O
break	O	O
loop	O	O
-	O	O
looping	O	O
is	O	O
broken	O	O
and	O	O
stops	O	O
continue	O	O
loop	O	O
-	O	O
loop	O	O
continues	O	O
to	O	O
execute	O	O
with	O	O
the	O	O
next	O	O
iteration	O	O
There	O	O
are	O	O
more	O	O
than	O	O
a	O	O
few	O	O
people	O	O
who	O	O
do	O	O
n't	O	O
like	O	O
and	O	O
.	O	O
The	O	O
latest	O	O
complaint	O	O
I	O	O
saw	O	O
about	O	O
them	O	O
was	O	O
in	O	O
JavaScript	O	O
:	O	O
The	O	O
Good	O	O
Parts	O	O
by	O	O
Douglas	O	O
Crockford	O	O
.	O	O
But	O	O
I	O	O
find	O	O
that	O	O
sometimes	O	O
using	O	O
one	O	O
of	O	O
them	O	O
really	O	O
simplifies	O	O
things	O	O
,	O	O
especially	O	O
if	O	O
your	O	O
language	O	O
does	O	O
n't	O	O
include	O	O
a	O	O
or	O	O
style	O	O
of	O	O
loop	O	O
.	O	O
I	O	O
tend	O	O
to	O	O
use	O	O
in	O	O
loops	O	O
that	O	O
are	O	O
searching	O	O
a	O	O
list	O	O
for	O	O
something	O	O
.	O	O
Once	O	O
found	O	O
,	O	O
there	O	O
's	O	O
no	O	O
point	O	O
in	O	O
continuing	O	O
,	O	O
so	O	O
you	O	O
might	O	O
as	O	O
well	O	O
quit	O	O
.	O	O
I	O	O
use	O	O
when	O	O
doing	O	O
something	O	O
with	O	O
most	O	O
elements	O	O
of	O	O
a	O	O
list	O	O
,	O	O
but	O	O
still	O	O
want	O	O
to	O	O
skip	O	O
over	O	O
a	O	O
few	O	O
.	O	O
The	O	O
statement	O	O
also	O	O
comes	O	O
in	O	O
handy	O	O
when	O	O
polling	O	O
for	O	O
a	O	O
valid	O	O
response	O	O
from	O	O
somebody	O	O
or	O	O
something	O	O
.	O	O
Instead	O	O
of	O	O
:	O	O
Ask	O	O
a	O	O
questionWhile	O	O
the	O	O
answer	O	O
is	O	O
invalid	O	O
:	O	O
Ask	O	O
the	O	O
You	O	O
could	O	O
eliminate	O	O
some	O	O
duplication	O	O
and	O	O
use	O	O
:	O	O
While	O	O
True	O	O
:	O	O
Ask	O	O
a	O	O
question	O	O
If	O	O
the	O	O
answer	O	O
is	O	O
valid	O	O
:	O	O
The	O	O
loop	O	O
that	O	O
I	O	O
mentioned	O	O
before	O	O
is	O	O
the	O	O
more	O	O
elegant	O	O
solution	O	O
for	O	O
that	O	O
particular	O	O
problem	O	O
:	O	O
Do	O	O
:	O	O
Ask	O	O
a	O	O
question	O	O
Until	O	O
the	O	O
answer	O	O
is	O	O
No	O	O
duplication	O	O
,	O	O
and	O	O
no	O	O
needed	O	O
either	O	O
.	O	O
Ruby	O	O
unfortunately	O	O
is	O	O
a	O	O
bit	O	O
different	O	O
.	O	O
PS	O	O
:	O	O
My	O	O
memory	O	O
is	O	O
a	O	O
bit	O	O
hazy	O	O
on	O	O
this	O	O
so	O	O
apologies	O	O
if	O	O
I	O	O
'm	O	O
wrong	O	O
instead	O	O
of	O	O
break/continue	O	O
,	O	O
it	O	O
has	O	O
break/next	O	O
,	O	O
which	O	O
behave	O	O
the	O	O
same	O	O
in	O	O
terms	O	O
of	O	O
loops	O	O
Loops	O	O
(	O	O
like	O	O
everything	O	O
else	O	O
)	O	O
are	O	O
expressions	O	O
,	O	O
and	O	O
``	O	O
return	O	O
''	O	O
the	O	O
last	O	O
thing	O	O
that	O	O
they	O	O
did	O	O
.	O	O
Most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
getting	O	O
the	O	O
return	O	O
value	O	O
from	O	O
a	O	O
loop	O	O
is	O	O
pointless	O	O
,	O	O
so	O	O
everyone	O	O
just	O	O
does	O	O
this	O	O
a	B-API	O
=	B-API	O
5while	B-API	O
a	B-API	O
10	B-API	O
a	B-API	O
+	B-API	O
You	O	O
can	O	O
however	O	O
do	O	O
this	O	O
a	B-API	O
=	B-API	O
5b	B-API	O
=	B-API	O
while	B-API	O
a	B-API	O
10	B-API	O
a	B-API	O
+	B-API	O
1end	B-API	O
#	B-API	O
b	B-API	O
is	B-API	O
now	B-API	O
HOWEVER	O	O
,	O	O
a	O	O
lot	O	O
of	O	O
ruby	O	O
code	O	O
'emulates	O	O
'	O	O
a	O	O
loop	O	O
by	O	O
using	O	O
a	O	O
block	O	O
.	O	O
The	O	O
canonical	O	O
example	O	O
is	O	O
10.times	B-API	O
do	B-API	O
|x|	B-API	O
puts	B-API	O
As	O	O
it	O	O
is	O	O
much	O	O
more	O	O
common	O	O
for	O	O
people	O	O
to	O	O
want	O	O
to	O	O
do	O	O
things	O	O
with	O	O
the	O	O
result	O	O
of	O	O
a	O	O
block	O	O
,	O	O
this	O	O
is	O	O
where	O	O
it	O	O
gets	O	O
messy	O	O
.	O	O
break/next	O	O
mean	O	O
different	O	O
things	O	O
in	O	O
the	O	O
context	O	O
of	O	O
a	O	O
block	O	O
.	O	O
break	O	O
will	O	O
jump	O	O
out	O	O
of	O	O
the	O	O
code	O	O
that	O	O
called	O	O
the	O	O
block	O	O
next	O	O
will	O	O
skip	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
code	O	O
in	O	O
the	O	O
block	O	O
,	O	O
and	O	O
'return	O	O
'	O	O
what	O	O
you	O	O
specify	O	O
to	O	O
the	O	O
caller	O	O
of	O	O
the	O	O
block	O	O
.	O	O
This	O	O
does	O	O
n't	O	O
make	O	O
any	O	O
sense	O	O
without	O	O
examples	O	O
.	O	O
def	O	B-API
timesten	O	O
10.times	O	O
{	O	O
|t|	O	O
puts	O	O
yield	O	O
t	O	O
}	O	O
endtimesten	O	O
do	O	O
|x|	O	O
x	O	O
*	O	O
2end	O	O
#	O	O
will	O	O
print2468	O	O
...	O	O
and	O	O
so	O	O
ontimesten	O	O
do	O	O
|x|	O	O
break	O	O
x	O	O
*	O	O
2end	O	O
#	O	O
wo	O	O
n't	O	O
print	O	O
anything	O	O
.	O	O
The	O	O
break	O	O
jumps	O	O
out	O	O
of	O	O
the	O	O
timesten	O	O
function	O	O
entirely	O	O
,	O	O
and	O	O
the	O	O
call	O	O
to	O	O
`puts`	O	O
inside	O	O
it	O	O
gets	O	O
skippedtimesten	O	O
do	O	O
|x|	O	O
break	O	O
5	O	O
x	O	O
*	O	O
2end	O	O
#	O	O
This	O	O
is	O	O
the	O	O
same	O	O
as	O	O
above	O	O
.	O	O
it	O	O
's	O	O
``	O	O
returning	O	O
''	O	O
5	O	O
,	O	O
but	O	O
nobody	O	O
is	O	O
catching	O	O
it	O	O
.	O	O
If	O	O
you	O	O
did	O	O
a	O	O
=	O	O
timesten	O	O
...	O	O
then	O	O
a	O	O
would	O	O
get	O	O
assigned	O	O
to	O	O
5timeste	O	O
do	O	O
|x|	O	O
next	O	O
5	O	O
x	O	O
*	O	O
2end	O	O
#	O	O
this	O	O
would	O	O
print555	O	O
...	O	O
and	O	O
so	O	O
on	O	O
,	O	O
because	O	O
'next	O	O
5	O	O
'	O	O
skips	O	O
the	O	O
'x	O	O
*	O	O
2	O	O
'	O	O
and	O	O
'returns	O	O
'	O	O
So	O	O
yeah	O	O
.	O	O
Ruby	O	O
is	O	O
awesome	O	O
,	O	O
but	O	O
it	O	O
has	O	O
some	O	O
awful	O	O
corner-cases	O	O
.	O	O
This	O	O
is	O	O
the	O	O
second	O	O
worst	O	O
one	O	O
I	O	O
've	O	O
seen	O	O
in	O	O
my	O	O
years	O	O
of	O	O
using	O	O
it	O	O
:	O	O
-	O	O
)	O	O
I	O	O
like	O	O
MbUnit	O	O
,	O	O
er	O	O
,	O	O
Gallio	O	O
.	O	O
Most	O	O
importantly	O	O
to	O	O
me	O	O
is	O	O
having	O	O
good	O	O
tools	O	O
support	O	O
inside	O	O
Visual	O	O
Studio	O	O
.	O	O
For	O	O
that	O	O
I	O	O
use	O	O
Resharper	O	O
,	O	O
which	O	O
has	O	O
an	O	O
MbUnit	O	O
test	O	O
runner	O	O
.	O	O
A	O	O
lot	O	O
of	O	O
folks	O	O
seem	O	O
to	O	O
like	O	O
TestDriven.NET	B-API	B-API
as	O	O
their	O	O
test	O	O
runner	O	O
as	O	O
well	O	O
.	O	O
I	O	O
like	O	O
TestDriven.NET	B-API	O
(	O	O
even	O	O
though	O	O
I	O	O
use	O	O
ReSharper	O	O
)	O	O
and	O	O
I	O	O
'm	O	O
pretty	O	O
happy	O	O
with	O	O
XUnit.net	B-API	O
.	O	O
It	O	O
uses	O	O
Facts	O	O
instead	O	O
of	O	O
Tests	O	O
which	O	O
many	O	O
people	O	O
dislike	O	O
but	O	O
I	O	O
like	O	O
the	O	O
difference	O	O
in	O	O
terminology	O	O
.	O	O
It	O	O
's	O	O
useful	O	O
to	O	O
think	O	O
of	O	O
a	O	O
collection	O	O
of	O	O
automatically	O	O
provable	O	O
Facts	O	O
about	O	O
your	O	O
software	O	O
and	O	O
see	O	O
which	O	O
ones	O	O
you	O	O
violate	O	O
when	O	O
you	O	O
make	O	O
a	O	O
change	O	O
.	O	O
Be	O	O
aware	O	O
that	O	O
Visual	O	O
Studio	O	O
2008	O	O
Professional	O	O
(	O	O
and	O	O
above	O	O
)	O	O
now	O	O
comes	O	O
with	O	O
integrated	O	O
Unit	O	O
Testing	O	O
(	O	O
it	O	O
used	O	O
to	O	O
be	O	O
available	O	O
only	O	O
with	O	O
the	O	O
Team	O	O
System	O	O
Editions	O	O
)	O	O
and	O	O
may	O	O
be	O	O
suitable	O	O
for	O	O
your	O	O
needs	O	O
.	O	O
There	O	O
are	O	O
so	O	O
many	O	O
it	O	O
's	O	O
crazy	O	O
.	O	O
Crazy	O	O
good	O	O
,	O	O
I	O	O
guess	O	O
.	O	O
For	O	O
the	O	O
conservative	O	O
types	O	O
(	O	O
me	O	O
)	O	O
,	O	O
NUnit	O	B-API
is	O	O
still	O	O
available	O	O
and	O	O
still	O	O
more	O	O
than	O	O
capable	O	O
.	O	O
For	O	O
the	O	O
Microsoft-types	O	O
,	O	O
MSTest	O	B-API
is	O	O
adequate	O	O
,	O	O
but	O	O
slow	O	O
and	O	O
clunky	O	O
compared	O	O
to	O	O
Nunit	O	O
.	O	O
It	O	O
also	O	O
lacks	O	O
code	O	O
coverage	O	O
without	O	O
paying	O	O
the	O	O
big	O	O
bucks	O	O
for	O	O
the	O	O
pricey	O	O
versions	O	O
of	O	O
Visual	O	O
Studio	O	O
.	O	O
There	O	O
's	O	O
also	O	O
MbUnit	O	O
.	O	O
It	O	O
's	O	O
like	O	O
NUnit	O	B-API
,	O	O
but	O	O
has	O	O
nifty	O	O
features	O	O
like	O	O
RowTest	B-API	O
(	O	O
run	O	O
the	O	O
same	O	O
test	O	O
with	O	O
different	O	O
parameters	O	O
)	O	O
and	O	O
Rollback	B-API	O
(	O	O
put	O	O
the	O	O
database	O	O
back	O	O
like	O	O
you	O	O
found	O	O
it	O	O
after	O	O
a	O	O
test	O	O
)	O	O
And	O	O
finally	O	O
,	O	O
xUnit.net	B-API	O
is	O	O
the	O	O
trendy	O	O
option	O	O
with	O	O
some	O	O
attitude	O	O
.	O	O
Oh	O	O
,	O	O
and	O	O
TestDriven.NET	B-API	B-API
will	O	O
give	O	O
you	O	O
IDE	O	O
integration	O	O
for	O	O
both	O	O
Nunit	O	O
and	O	O
MBunit	O	O
.	O	O
I	O	O
'm	O	O
sure	O	O
they	O	O
're	O	O
all	O	O
just	O	O
fine	O	O
.	O	O
I	O	O
'd	O	O
steer	O	O
away	O	O
from	O	O
MSTest	O	O
though	O	O
,	O	O
unless	O	O
you	O	O
just	O	O
enjoy	O	O
the	O	O
convenience	O	O
of	O	O
having	O	O
everything	O	O
in	O	O
one	O	O
IDE	O	O
out	O	O
of	O	O
the	O	O
box	O	O
.	O	O
Scott	O	O
Hanselman	O	O
has	O	O
a	O	O
podcast	O	O
on	O	O
this	O	O
very	O	O
topic	O	O
.	O	O
xUnit.net	B-API	O
looks	O	O
like	O	O
it	O	O
provides	O	O
a	O	O
slightly	O	O
different	O	O
approach	O	O
to	O	O
N/MB/MS/Unit	O	O
,	O	O
which	O	O
is	O	O
interesting	O	O
.	O	O
In	O	O
my	O	O
search	O	O
for	O	O
an	O	O
rspec-like	O	O
solution	O	O
(	O	O
because	O	O
I	O	O
LOVE	O	O
the	O	O
rspec	O	O
)	O	O
,	O	O
I	O	O
also	O	O
came	O	O
across	O	O
NSpec	O	O
,	O	O
which	O	O
looks	O	O
a	O	O
bit	O	O
wordy	O	O
,	O	O
but	O	O
combined	O	O
with	O	O
the	O	O
NSpec	O	O
Extensions	O	O
addon	O	O
to	O	O
use	O	O
C	O	O
#	O	O
3	O	O
extension	O	O
methods	O	O
,	O	O
it	O	O
looks	O	O
pretty	O	O
nice	O	O
.	O	O
We	O	O
use	O	O
NUnit	O	B-API
and	O	O
MBUnit	O	B-API
here	O	O
.	O	O
We	O	O
use	O	O
TestDriven.NET	B-API	B-API
to	O	O
run	O	O
the	O	O
unit	O	O
tests	O	O
from	O	O
within	O	O
Visual	O	B-API
Studio	O	I-API
.	O	O
We	O	O
use	O	O
the	O	O
excellent	O	O
,	O	O
highly	O	O
recommended	O	O
RhinoMocks	O	O
as	O	O
a	O	O
mock	O	O
framework	O	O
.	O	O
I	O	O
used	O	O
to	O	O
use	O	O
NUnit	O	B-API
,	O	O
but	O	O
I	O	O
switched	O	O
to	O	O
MbUnit	O	B-API
since	O	O
it	O	O
has	O	O
more	O	O
features	O	O
.	O	O
I	O	O
love	O	O
RowTest	O	O
.	O	O
It	O	O
lets	O	O
you	O	O
parametrize	O	O
your	O	O
tests	O	O
.	O	O
NUnit	O	O
does	O	O
have	O	O
a	O	O
litter	O	O
bit	O	O
better	O	O
tool	O	O
support	O	O
though	O	O
.	O	O
I	O	O
am	O	O
using	O	O
ReSharper	O	O
to	O	O
run	O	O
MbUnit	O	O
Tests	O	O
.	O	O
I	O	O
've	O	O
had	O	O
problems	O	O
with	O	O
TestDriven.NET	B-API	O
running	O	O
my	O	O
SetUp	O	O
methods	O	O
for	O	O
MbUnit	O	O
.	O	O
No	O	O
,	O	O
you	O	O
were	O	O
not	O	O
dreaming	O	O
.	O	O
Python	O	O
has	O	O
a	O	O
pretty	O	O
excellent	O	O
list	O	O
comprehension	O	O
system	O	O
that	O	O
lets	O	O
you	O	O
manipulate	O	O
lists	O	O
pretty	O	O
elegantly	O	O
,	O	O
and	O	O
depending	O	O
on	O	O
exactly	O	O
what	O	O
you	O	O
want	O	O
to	O	O
accomplish	O	O
,	O	O
this	O	O
can	O	O
be	O	O
done	O	O
a	O	O
couple	O	O
of	O	O
ways	O	O
.	O	O
In	O	O
essence	O	O
,	O	O
what	O	O
you	O	O
're	O	O
doing	O	O
is	O	O
saying	O	O
``	O	O
For	O	O
item	O	O
in	O	O
list	O	O
if	O	O
criteria.matches	O	O
''	O	O
,	O	O
and	O	O
from	O	O
that	O	O
you	O	O
can	O	O
just	O	O
iterate	O	O
through	O	O
the	O	O
results	O	O
or	O	O
dump	O	O
the	O	O
results	O	O
into	O	O
a	O	O
new	O	O
list	O	O
.	O	O
I	O	O
'm	O	O
going	O	O
to	O	O
crib	O	O
an	O	O
example	O	O
from	O	O
Dive	O	O
Into	O	O
Python	O	B-API
here	O	O
,	O	O
because	O	O
it	O	O
's	O	O
pretty	O	O
elegant	O	O
and	O	O
they	O	O
're	O	O
smarter	O	O
than	O	O
I	O	O
am	O	O
.	O	O
Here	O	O
they	O	O
're	O	O
getting	O	O
a	O	O
list	O	O
of	O	O
files	O	O
in	O	O
a	O	O
directory	O	O
,	O	O
then	O	O
filtering	O	O
the	O	O
list	O	O
for	O	O
all	O	O
files	O	O
that	O	O
match	O	O
a	O	O
regular	O	O
expression	O	O
criteria	O	O
.	O	O
files	O	O
=	O	O
os.listdir	B-API	B-API
(	I-API	I-API
path	I-API	I-API
)	I-API	I-API
test	O	O
=	O	O
re.compile	B-API	B-API
(	I-API	I-API
``	I-API	I-API
test\.py	I-API	I-API
$	I-API	I-API
''	I-API	I-API
,	I-API	I-API
re.IGNORCASE	I-API	I-API
)	I-API	I-API
files	O	O
=	O	O
[	O	O
f	O	O
for	O	O
f	O	O
in	O	O
files	O	O
if	O	O
test.search	B-API	B-API
(	I-API	I-API
f	I-API	I-API
)	I-API	I-API
]	O	O
You	O	O
could	O	O
do	O	O
this	O	O
without	O	O
regular	O	O
expressions	O	O
,	O	O
for	O	O
your	O	O
example	O	O
,	O	O
for	O	O
anything	O	O
where	O	O
your	O	O
expression	O	O
at	O	O
the	O	O
end	O	O
returns	O	O
true	O	O
for	O	O
a	O	O
match	O	O
.	O	O
There	O	O
are	O	O
other	O	O
options	O	O
like	O	O
using	O	O
the	O	O
filter	B-API	O
(	I-API	O
)	I-API	O
function	O	O
,	O	O
but	O	O
if	O	O
I	O	O
were	O	O
going	O	O
to	O	O
choose	O	O
,	O	O
I	O	O
'd	O	O
go	O	O
with	O	O
this	O	O
.	O	O
Eric	O	O
Sipple	O	O
I	O	O
think	O	O
:	O	O
#	O	O
!	O	O
/bin/pythonbar	O	O
in	O	O
dict	B-API	O
(	I-API	O
Foo	I-API	O
)	I-API	O
Is	O	O
what	O	O
you	O	O
are	O	O
thinking	O	O
of	O	O
.	O	O
When	O	O
trying	O	O
to	O	O
see	O	O
if	O	O
a	O	O
certain	O	O
key	O	O
exists	O	O
within	O	O
a	O	O
dictionary	O	O
in	O	O
python	O	O
(	O	O
python	O	O
's	O	O
version	O	O
of	O	O
a	O	O
hash	O	O
table	O	O
)	O	O
there	O	O
are	O	O
two	O	O
ways	O	O
to	O	O
check	O	O
.	O	O
First	O	O
is	O	O
the	O	O
has_key	B-API	B-API
(	I-API	I-API
)	I-API	I-API
method	O	O
attached	O	O
to	O	O
the	O	O
dictionary	O	O
and	O	O
second	O	O
is	O	O
the	O	O
example	O	O
given	O	O
above	O	O
.	O	O
It	O	O
will	O	O
return	O	O
a	O	O
boolean	O	O
value	O	O
.	O	O
That	O	O
should	O	O
answer	O	O
your	O	O
question	O	O
.	O	O
And	O	O
now	O	O
a	O	O
little	O	O
off	O	O
topic	O	O
to	O	O
tie	O	O
this	O	O
in	O	O
to	O	O
the	O	O
list	O	O
comprehension	O	O
answer	O	O
previously	O	O
given	O	O
(	O	O
for	O	O
a	O	O
bit	O	O
more	O	O
clarity	O	O
)	O	O
.	O	O
List	O	O
Comprehensions	O	O
construct	O	O
a	O	O
list	O	O
from	O	O
a	O	O
basic	O	O
for	O	O
loop	O	O
with	O	O
modifiers	O	O
.	O	O
As	O	O
an	O	O
example	O	O
(	O	O
to	O	O
clarify	O	O
slightly	O	O
)	O	O
,	O	O
a	O	O
way	O	O
to	O	O
use	O	O
the	O	O
in	O	O
language	O	O
construct	O	O
in	O	O
a	O	O
_list	O	O
comprehension_	O	O
:	O	O
Say	O	O
you	O	O
have	O	O
a	O	O
two	O	O
dimensional	O	O
dictionary	O	O
and	O	O
you	O	O
only	O	O
want	O	O
the	O	O
second	O	O
dimension	O	O
dictionaries	O	O
which	O	O
contain	O	O
the	O	O
key	O	O
.	O	O
A	O	O
relatively	O	O
straightforward	O	O
way	O	O
to	O	O
do	O	O
so	O	O
would	O	O
be	O	O
to	O	O
use	O	O
a	O	O
list	O	O
comprehension	O	O
with	O	O
a	O	O
conditional	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
!	O	O
/bin/pythonbaz	O	O
=	O	O
for	O	O
key	O	O
,	O	O
value	O	O
in	O	O
foo	O	O
if	O	O
bar	O	O
in	O	O
(	O	O
[	O	O
(	O	O
key	O	O
,	O	O
value	O	O
)	O	O
Note	O	O
the	O	O
if	O	O
bar	O	O
in	O	O
at	O	O
the	O	O
end	O	O
of	O	O
the	O	O
statement	O	O
,	O	O
this	O	O
is	O	O
a	O	O
modifying	O	O
clause	O	O
which	O	O
tells	O	O
the	O	O
list	O	O
comprehension	O	O
to	O	O
only	O	O
keep	O	O
those	O	O
key-value	O	O
pairs	O	O
which	O	O
meet	O	O
the	O	O
conditional	O	O
.	O	O
In	O	O
this	O	O
case	O	O
is	O	O
a	O	O
new	O	O
dictionary	O	O
which	O	O
contains	O	O
only	O	O
the	O	O
dictionaries	O	O
from	O	O
foo	O	O
which	O	O
contain	O	O
bar	O	O
(	O	O
Hopefully	O	O
I	O	O
did	O	O
n't	O	O
miss	O	O
anything	O	O
in	O	O
that	O	O
code	O	O
example	O	O
...	O	O
you	O	O
may	O	O
have	O	O
to	O	O
take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
list	O	O
comprehension	O	O
documentation	O	O
found	O	O
in	O	O
docs.python.org	O	O
tutorials	O	O
and	O	O
at	O	O
secnetix.de	O	O
,	O	O
both	O	O
sites	O	O
are	O	O
good	O	O
references	O	O
if	O	O
you	O	O
have	O	O
questions	O	O
in	O	O
the	O	O
future	O	O
.	O	O
)	O	O
.	O	O
Are	O	O
you	O	O
looking	O	O
to	O	O
get	O	O
a	O	O
list	O	O
of	O	O
objects	O	O
that	O	O
have	O	O
a	O	O
certain	O	O
attribute	O	O
?	O	O
If	O	O
so	O	O
,	O	O
a	O	O
list	O	O
comprehension	O	O
is	O	O
the	O	O
right	O	O
way	O	O
to	O	O
do	O	O
this	O	O
.	O	O
result	O	O
=	O	O
[	O	O
obj	O	O
for	O	O
obj	O	O
in	O	O
listOfObjs	O	O
if	O	O
(	O	O
obj	O	O
,	O	O
'attributeName	O	O
'	O	O
)	O	O

[0x7FFD166670E3] ANOMALY: use of REX.w is meaningless (default operand size is 64)
