Using	O
the	O
3.5	O
compiler	O
you	O
can	O
use	O
an	O
Extension	O
Method	O
:	O
public	B-API
static	B-API
void	B-API
{	B-API
//	B-API
(	O
this	O
string	B-API
s	I-API
)	O
You	O
can	O
use	O
this	O
on	O
a	O
CLR	O
2.0	O
targeted	O
project	O
(	O
3.5	O
compiler	O
)	O
by	O
including	O
this	O
hack	O
:	O
namespace	O
System.Runtime.CompilerServices	B-API
{	O
]	O
public	O
sealed	O
class	O
ExtensionAttribute	O
:	O
Attribute	B-API
{	I-API
AttributeUsage	I-API
(	B-API
AttributeTargets.Method	B-API
|	O
AttributeTargets.Class	B-API
|	O
AttributeTargets.Assembly	B-API
)	O
It	O
sounds	O
like	O
you	O
're	O
talking	O
about	O
C	O
#	O
's	O
Extension	O
Methods	O
.	O
You	O
add	O
functionality	O
to	O
existing	O
classes	O
by	O
inserting	O
the	O
``	O
this	O
''	O
keyword	O
before	O
the	O
first	O
parameter	O
.	O
The	O
method	O
has	O
to	O
be	O
a	O
static	O
method	O
in	O
a	O
static	O
class	O
.	O
Strings	O
in	O
.NET	O
already	O
have	O
a	O
``	O
Trim	O
''	O
method	O
,	O
so	O
I	O
'll	O
use	O
another	O
example.public	O
static	O
class	O
MyStringEtensions	O
{	O
public	O
static	O
bool	O
ContainsMabster	O
(	O
this	O
string	O
s	O
)	O
{	O
return	O
s.Contains	B-API
(	I-API
``	I-API
Mabster	I-API
''	I-API
)	I-API
;	O
}	O
}	O
So	O
now	O
every	O
string	O
has	O
a	O
tremendously	O
useful	O
ContainsMabster	O
method	O
,	O
which	O
I	O
can	O
use	O
like	O
this	O
:	O
if	O
(	O
``	O
Why	O
hello	O
there	O
,	O
Mabster	O
!	O
``	O
.ContainsMabster	B-API
(	I-API
)	I-API
)	O
{	O
/*	O
...	O
*/	O
}	O
Note	O
that	O
you	O
can	O
also	O
add	O
extension	O
methods	O
to	O
interfaces	O
(	O
eg	O
IList	O
)	O
,	O
which	O
means	O
that	O
any	O
class	O
implementing	O
that	O
interface	O
will	O
also	O
pick	O
up	O
that	O
new	O
method	O
.	O
Any	O
extra	O
parameters	O
you	O
declare	O
in	O
the	O
extension	O
method	O
(	O
after	O
the	O
first	O
``	O
this	O
''	O
parameter	O
)	O
are	O
treated	O
as	O
normal	O
parameters	O
.	O
I	O
'm	O
not	O
a	O
Java	O
developer	O
,	O
but	O
just	O
from	O
the	O
sound	O
of	O
it	O
,	O
it	O
seems	O
like	O
an	O
is	O
called	O
for	O
if	O
you	O
do	O
n't	O
want	O
null	O
to	O
be	O
an	O
allowed	O
value	O
,	O
and	O
the	O
would	O
be	O
thrown	O
if	O
you	O
were	O
trying	O
to	O
use	O
a	O
variable	O
that	O
turns	O
out	O
to	O
be	O
null	O
.	O
If	O
it	O
's	O
a	O
setter	O
method	O
and	O
null	O
is	O
being	O
passed	O
to	O
it	O
,	O
I	O
think	O
it	O
would	O
make	O
more	O
sense	O
to	O
throw	O
an	O
IllegalArgumentException	B-API
.	O
A	O
NullPointerException	B-API
seems	O
to	O
make	O
more	O
sense	O
in	O
the	O
case	O
where	O
you	O
're	O
attempting	O
to	O
actually	O
use	O
the	O
null	O
.	O
So	O
,	O
if	O
you	O
're	O
using	O
it	O
and	O
it	O
's	O
null	O
,	O
NullPointer	O
.	O
If	O
it	O
's	O
being	O
passed	O
in	O
and	O
it	O
's	O
null	O
,	O
IllegalArgument	B-API
.	O
I	O
think	O
you	O
should	O
definitely	O
throw	O
a	O
IllegalArgumentException	B-API
and	O
thus	O
fail-fast	O
.	O
Let	O
other	O
developers	O
know	O
by	O
marking	O
it	O
in	O
the	O
JavaDocs	O
and	O
also	O
define	O
constraints	O
on	O
your	O
methods	O
,	O
so	O
that	O
they	O
see	O
what	O
happens	O
when	O
they	O
pass	O
an	O
invalid	O
objects	O
.	O
I	O
wrote	O
about	O
this	O
a	O
couple	O
of	O
weeks	O
ago	O
,	O
if	O
you	O
want	O
to	O
follow	O
up	O
.	O
I	O
tend	O
to	O
follow	O
the	O
design	O
of	O
JDK	O
libraries	O
,	O
especially	O
Collections	O
and	O
Concurrency	O
(	O
Joshua	O
Bloch	O
,	O
Doug	O
Lea	O
,	O
those	O
guys	O
know	O
how	O
to	O
design	O
solid	O
APIs	O
)	O
.	O
Anyway	O
,	O
many	O
APIs	O
in	O
the	O
JDK	O
pro-actively	O
throws	O
.	O
For	O
example	O
,	O
the	O
Javadoc	O
for	O
states	O
:	O
@	O
throws	O
NullPointerException	B-API
if	O
the	O
key	O
is	O
null	O
and	O
this	O
map	O
does	O
not	O
permit	O
null	O
keys	O
(	O
optional	O
)	O
.	O
It	O
's	O
perfectly	O
valid	O
to	O
throw	O
your	O
own	O
NPE	O
.	O
The	O
convention	O
is	O
to	O
include	O
the	O
parameter	O
name	O
which	O
was	O
null	O
in	O
the	O
message	O
of	O
the	O
exception	O
.	O
The	O
pattern	O
goes	O
:	O
public	O
void	O
someMethod	O
(	O
Object	O
mustNotBeNull	O
)	O
{	O
if	O
(	O
mustNotBeNull	O
==	O
null	O
)	O
{	O
throw	O
new	O
NullPointerException	B-API
(	O
``	O
mustNotBeNull	O
must	O
not	O
be	O
null	O
''	O
)	O
;	O
}	O
}	O
Whatever	O
you	O
do	O
,	O
do	O
n't	O
allow	O
a	O
bad	O
value	O
to	O
get	O
set	O
and	O
throw	O
an	O
exception	O
later	O
when	O
other	O
code	O
attempts	O
to	O
use	O
it	O
.	O
That	O
makes	O
debugging	O
a	O
nightmare	O
.	O
You	O
should	O
always	O
the	O
follow	O
the	O
``	O
fail-fast	O
''	O
principle	O
.	O
I	O
've	O
tried	O
finding	O
the	O
ultimate	O
compiler	O
call	O
earlier	O
and	O
I	O
gave	O
up	O
.	O
There	O
's	O
quite	O
a	O
number	O
of	O
layers	O
of	O
interfaces	O
and	O
virtual	O
classes	O
for	O
my	O
patience	O
.	O
I	O
do	O
n't	O
think	O
the	O
source	O
reader	O
part	O
of	O
the	O
compiler	O
ends	O
up	O
with	O
a	O
DOM	O
tree	O
,	O
but	O
intuitively	O
I	O
would	O
agree	O
with	O
you	O
.	O
The	O
work	O
necessary	O
to	O
transform	O
the	O
DOM	O
to	O
IL	O
should	O
be	O
much	O
less	O
than	O
reading	O
C	O
#	O
source	O
code	O
.	O
There	O
is	O
no	O
pure	O
CSS/HTML	O
way	O
to	O
achieve	O
this	O
,	O
as	O
far	O
as	O
I	O
know	O
.	O
Your	O
best	O
bet	O
would	O
be	O
to	O
do	O
it	O
in	O
pre-processing	O
(	O
if	O
list	O
length	O
>	O
150	O
,	O
split	O
into	O
3	O
columns	O
,	O
esle	O
if	O
>	O
70	O
,	O
split	O
into	O
2	O
columns	O
,	O
else	O
1	O
)	O
.	O
The	O
other	O
option	O
,	O
using	O
JavaScript	O
(	O
I	O
'm	O
not	O
familiar	O
with	O
the	O
jQuery	O
library	O
specifically	O
)	O
would	O
be	O
to	O
iterate	O
through	O
lists	O
,	O
probably	O
based	O
on	O
them	O
being	O
a	O
certain	O
class	O
,	O
count	O
the	O
number	O
of	O
children	O
,	O
and	O
if	O
it	O
is	O
a	O
high	O
enough	O
number	O
,	O
dynamically	O
create	O
a	O
new	O
list	O
after	O
the	O
first	O
,	O
transferring	O
some	O
number	O
of	O
list	O
items	O
to	O
the	O
new	O
list	O
.	O
As	O
far	O
as	O
implementing	O
the	O
columns	O
,	O
you	O
could	O
probably	O
float	O
them	O
left	O
,	O
followed	O
by	O
an	O
element	O
that	O
had	O
the	O
style	O
or	O
.	O
CSS	O
:	O
ul.column	O
{	O
float	O
:	O
left	O
;	O
width:50	O
%	O
;	O
}	O
div.clear	B-API
{	I-API
clear	I-API
:	I-API
both	O
;	O
}	O
HTML	O
:	O
ul	O
class=	O
''	O
column	O
''	O
liItem	O
1/li	O
liItem	O
2/li	O
!	O
--	O
...	O
--	O
liItem	O
49/li	O
liItem	O
50/li	O
/ul	O
ul	O
class=	O
''	O
column	O
''	O
liItem	O
51/li	O
liItem	O
52/li	O
!	O
--	O
...	O
--	O
liItem	O
99/li	O
liItem	O
100/li	O
/ul	O
div	O
class=	O
''	O
clear	O
''	O
/	O
So	O
I	O
dug	O
up	O
this	O
article	O
from	O
A	O
List	O
Apart	O
CSS	O
Swag	O
:	O
Multi-Column	O
Lists	O
.	O
I	O
ended	O
up	O
using	O
the	O
first	O
solution	O
,	O
it	O
's	O
not	O
the	O
best	O
but	O
the	O
others	O
require	O
either	O
using	O
complex	O
HTML	O
that	O
ca	O
n't	O
be	O
generated	O
dynamically	O
,	O
or	O
creating	O
a	O
lot	O
of	O
custom	O
classes	O
,	O
which	O
could	O
be	O
done	O
but	O
would	O
require	O
loads	O
of	O
in-line	O
styling	O
and	O
possibly	O
a	O
huge	O
page	O
.	O
Other	O
solutions	O
are	O
still	O
welcome	O
though	O
.	O
If	O
Safari	O
and	O
Firefox	O
support	O
is	O
good	O
enough	O
for	O
you	O
,	O
there	O
is	O
a	O
CSS	O
solution	O
:	O
UL	B-API
{	I-API
column-count:3	I-API
;	I-API
-moz-column-count:3	I-API
;	I-API
-webkit-column-count:3	I-API
;	I-API
column-gap:2em	I-API
;	I-API
-moz-column-gap:2em	I-API
;	O
I	O
'm	O
not	O
sure	O
about	O
Opera	O
.	O
Yes	O
it	O
is	O
,	O
try	O
it	O
out	O
in	O
a	O
test	O
.	O
You	O
will	O
see	O
``	O
long	O
''	O
printed	O
.	O
It	O
is	O
widening	O
because	O
Java	O
will	O
choose	O
to	O
widen	O
the	O
int	O
into	O
a	O
long	O
before	O
it	O
chooses	O
to	O
autobox	O
it	O
to	O
an	O
Integer	O
,	O
so	O
the	O
hello	O
(	O
long	O
)	O
method	O
is	O
chosen	O
to	O
be	O
called	O
.	O
Edit	O
:	O
the	O
original	O
post	O
being	O
referenced	O
.	O
Further	O
Edit	O
:	O
The	O
reason	O
the	O
second	O
option	O
would	O
print	O
Integer	O
is	O
because	O
there	O
is	O
no	O
``	O
widening	O
''	O
into	O
a	O
larger	O
primitive	O
as	O
an	O
option	O
,	O
so	O
it	O
MUST	O
box	O
it	O
up	O
,	O
thus	O
Integer	O
is	O
the	O
only	O
option	O
.	O
Furthermore	O
,	O
java	O
will	O
only	O
autobox	O
to	O
the	O
original	O
type	O
,	O
so	O
it	O
would	O
give	O
a	O
compiler	O
error	O
if	O
you	O
leave	O
the	O
hello	O
(	O
Long	O
)	O
and	O
removed	O
hello	O
(	O
Integer	O
)	O
.	O
In	O
the	O
first	O
case	O
,	O
you	O
have	O
a	O
widening	O
conversion	O
happening	O
.	O
This	O
can	O
be	O
see	O
when	O
runinng	O
the	O
``	O
javap	O
''	O
utility	O
program	O
(	O
included	O
w/	O
the	O
JDK	O
)	O
,	O
on	O
the	O
compiled	O
class	O
:	O
public	O
static	O
void	O
;	O
Code	O
:	O
0	O
:	O
iconst_	O
5	O
1	O
:	O
istore_	O
1	O
2	O
:	O
iload_	O
1	O
3	O
:	O
i2l	O
4	O
:	O
invokestatic	O
#	O
6	O
;	O
//Method	O
V	O
7	O
:	O
main	O
(	O
java.lang.String	B-API
[	I-API
]	I-API
)	O
hello	O
:	O
(	O
J	O
)	O
Clearly	O
,	O
you	O
see	O
the	O
I2L	O
,	O
which	O
is	O
the	O
mnemonic	O
for	O
the	O
widening	O
Integer-To-Long	O
bytecode	O
instruction	O
.	O
See	O
reference	O
here	O
.	O
And	O
in	O
the	O
other	O
case	O
,	O
replacing	O
the	O
``	O
long	O
x	O
''	O
with	O
the	O
object	O
``	O
Long	O
x	O
''	O
signature	O
,	O
you	O
'll	O
have	O
this	O
code	O
in	O
the	O
main	O
method	O
:	O
public	O
static	O
void	O
;	O
Code	O
:	O
0	O
:	O
iconst_	O
5	O
1	O
:	O
istore_	O
1	O
2	O
:	O
iload_	O
1	O
3	O
:	O
invokestatic	O
#	O
6	O
;	O
//Metho	O
Ljava/lang/Integer	B-API
;	O
6	O
:	O
invokestatic	O
#	O
7	O
;	O
//Method	O
V	O
9	O
:	O
main	O
(	O
java.lang.String	B-API
[	I-API
]	I-API
)	O
java/lang/Integer.valueOf	B-API
:	I-API
(	I-API
I	I-API
)	I-API
hello	O
:	O
(	O
Ljava/lang/Integer	O
;	O
)	O
So	O
you	O
see	O
the	O
compiler	O
has	O
created	O
the	O
instruction	O
Integer.valueOf	B-API
(	I-API
int	I-API
)	I-API
,	O
to	O
box	O
the	O
primitive	O
inside	O
the	O
wrapper	O
.	O
Another	O
interesting	O
thing	O
with	O
this	O
example	O
is	O
the	O
method	O
overloading	O
.	O
The	O
combination	O
of	O
type	O
widening	O
and	O
method	O
overloading	O
only	O
working	O
because	O
the	O
compiler	O
has	O
to	O
make	O
a	O
decision	O
of	O
which	O
method	O
to	O
choose	O
.	O
Consider	O
the	O
following	O
example	O
:	O
public	O
static	O
void	O
hello	O
(	O
Collection	O
x	O
)	O
{	O
System.out.println	B-API
(	I-API
``	I-API
Collection	I-API
''	I-API
)	I-API
;	O
}	O
public	O
static	O
void	O
hello	O
(	O
List	O
x	O
)	O
{	O
System.out.println	B-API
(	I-API
``	I-API
List	I-API
''	I-API
)	I-API
;	O
}	O
public	O
static	O
void	O
main	O
(	O
String	B-API
[	I-API
]	I-API
args	I-API
)	I-API
{	O
Collection	B-API
col	I-API
=	I-API
new	I-API
ArrayList	I-API
(	I-API
)	I-API
;	O
hello	O
(	O
col	O
)	O
;	O
}	O
It	O
does	O
n't	O
use	O
the	O
run-time	O
type	O
which	O
is	O
List	O
,	O
it	O
uses	O
the	O
compile-time	O
type	O
which	O
is	O
Collection	B-API
and	O
thus	O
prints	O
``	O
Collection	B-API
''	O
.	O
I	O
encourage	O
your	O
to	O
read	O
Effective	O
Java	O
,	O
which	O
opened	O
my	O
eyes	O
to	O
some	O
corner	O
cases	O
of	O
the	O
JLS	O
.	O
ZOiqZQIbRMC	O
You	O
'd	O
be	O
looking	O
to	O
static	O
link	O
(	O
as	O
opposed	O
to	O
dynamically	O
link	O
)	O
I	O
'm	O
not	O
sure	O
how	O
many	O
of	O
the	O
MS	O
redistributables	O
statically	O
link	O
in	O
.	O
If	O
you	O
are	O
looking	O
to	O
find	O
out	O
which	O
dll	O
's	O
your	O
target	O
machine	O
is	O
missing	O
then	O
use	O
depends.exe	O
which	O
used	O
to	O
come	O
with	O
MSDev	O
,	O
but	O
can	O
also	O
be	O
found	O
here	O
.	O
Testing	O
this	O
on	O
a	O
few	O
target	O
machines	O
should	O
tell	O
you	O
which	O
dll	O
's	O
you	O
need	O
to	O
package	O
with	O
your	O
application	O
.	O
You	O
need	O
to	O
set	O
the	O
run-time	O
library	O
(	O
Under	O
C/C++	O
-	O
Code	O
Generation	O
)	O
for	O
ALL	O
projects	O
to	O
static	O
linkage	O
,	O
which	O
correlates	O
to	O
the	O
following	O
default	O
building	O
configurations	O
:	O
Multithreaded	O
Debug/Release	O
Singlethreaded	O
Debug/Release	O
As	O
opposed	O
to	O
the	O
``	O
DLL	O
''	O
versions	O
of	O
those	O
libraries	O
.	O
Even	O
if	O
you	O
do	O
that	O
,	O
depending	O
on	O
the	O
libraries	O
you	O
're	O
using	O
,	O
you	O
might	O
have	O
to	O
install	O
a	O
Merge	O
Module/framework/etc	O
.	O
It	O
depends	O
on	O
whether	O
static	O
LIB	O
versions	O
of	O
your	O
dependencies	O
are	O
available	O
.	O
Check	O
out	O
the	O
open	O
source	O
project	O
LMMS	O
.	O
It	O
's	O
a	O
music	O
studio	O
for	O
Linux	O
that	O
includes	O
the	O
ability	O
to	O
use	O
MIDI	O
keyboards	O
with	O
software	O
instruments	O
.	O
If	O
you	O
dig	O
around	O
in	O
source	O
files	O
with	O
'midi	O
'	O
in	O
the	O
name	O
,	O
you	O
'll	O
probably	O
find	O
what	O
you	O
're	O
looking	O
for	O
.	O
This	O
is	O
part	O
of	O
a	O
solution	O
I	O
use	O
on	O
a	O
local	O
intranet	O
.	O
Some	O
of	O
the	O
variables	O
you	O
will	O
have	O
to	O
collect	O
yourself	O
as	O
I	O
pull	O
them	O
from	O
a	O
database	O
but	O
you	O
may	O
pull	O
them	O
from	O
somewhere	O
else	O
.	O
The	O
only	O
extra	O
but	O
I	O
've	O
got	O
in	O
there	O
is	O
a	O
function	O
called	O
getMimeType	B-API
which	O
connects	O
to	O
the	O
database	O
and	O
pulls	O
back	O
the	O
correct	O
mine	O
type	O
based	O
on	O
file	O
extension	O
.	O
This	O
defaults	O
to	O
application/octet-stream	O
if	O
none	O
is	O
found	O
.	O
//	O
Clear	O
the	O
response	O
buffer	O
incase	O
there	O
is	O
anything	O
already	O
in	O
;	O
Response.Buffer	B-API
=	I-API
true	I-API
;	O
//	O
Read	O
the	O
original	O
file	O
from	O
diskFileStream	B-API
myFileStream	I-API
=	I-API
new	I-API
;	O
long	O
FileSize	O
=	O
myFileStream.Length	B-API
;	O
byte	O
[	O
]	O
Buffer	B-API
=	I-API
new	I-API
;	O
//	O
Tell	O
the	O
browse	O
stuff	O
about	O
the	O
)	O
;	O
Response.ContentType	B-API
=	O
;	O
//	O
Send	O
the	O
data	O
to	O
the	O
it.Response.Clear	B-API
(	I-API
)	I-API
(	O
sPath	O
,	O
FileMode.Open	B-API
)	O
[	O
(	O
int	O
)	O
FileSize	O
]	O
;	O
myFileStream.Read	B-API
(	I-API
Buffer	I-API
,	I-API
0	I-API
,	I-API
(	I-API
int	I-API
)	I-API
FileSize	I-API
)	I-API
;	O
myFileStream.Close	B-API
(	I-API
)	I-API
(	O
``	O
Content-Length	O
''	O
,	O
FileSize.ToString	B-API
(	I-API
)	I-API
;	O
Response.AddHeader	B-API
(	I-API
)	I-API
``	O
Content-Disposition	O
''	O
,	O
``	O
inline	O
;	O
filename=	O
''	O
+	O
sFilename.Replace	B-API
(	I-API
``	I-API
``	I-API
,	I-API
''	I-API
_	I-API
''	I-API
)	I-API
(	O
sExtention	O
,	O
oConnection	O
)	O
browserResponse.BinaryWrite	B-API
(	I-API
Buffer	I-API
)	I-API
;	O
Response.End	B-API
(	I-API
)	I-API
LINQ	O
turns	O
into	O
method	O
calls	O
like	O
the	O
code	O
you	O
have	O
.	O
In	O
other	O
words	O
,	O
there	O
should	O
be	O
no	O
difference	O
.	O
However	O
,	O
in	O
your	O
two	O
pieces	O
of	O
code	O
you	O
are	O
not	O
calling	O
.ToList	O
in	O
the	O
first	O
,	O
so	O
the	O
first	O
piece	O
of	O
code	O
will	O
produce	O
an	O
enumerable	O
data	O
source	O
,	O
but	O
if	O
you	O
call	O
.ToList	B-API
on	O
it	O
,	O
the	O
two	O
should	O
be	O
the	O
same	O
.	O
Other	O
than	O
the	O
ToList	O
difference	O
,	O
#	O
2	O
is	O
a	O
lot	O
more	O
readable	O
and	O
natural	O
IMO	O
Why	O
are	O
pointers	O
such	O
a	O
leading	O
factor	O
of	O
confusion	O
for	O
many	O
new	O
,	O
and	O
even	O
old	O
,	O
college	O
level	O
students	O
in	O
the	O
C/C++	O
language	O
?	O
The	O
concept	O
of	O
a	O
placeholder	O
for	O
a	O
value	O
-	O
variables	O
-	O
maps	O
onto	O
something	O
we	O
're	O
taught	O
in	O
school	O
-	O
algebra	O
.	O
There	O
is	O
n't	O
an	O
existing	O
parallel	O
you	O
can	O
draw	O
without	O
understanding	O
how	O
memory	O
is	O
physically	O
laid	O
out	O
within	O
a	O
computer	O
,	O
and	O
no	O
one	O
thinks	O
about	O
this	O
kind	O
of	O
thing	O
until	O
they	O
're	O
dealing	O
with	O
low	O
level	O
things	O
-	O
at	O
the	O
C/C++/byte	O
communications	O
level	O
.	O
Are	O
there	O
any	O
tools	O
or	O
thought	O
processes	O
that	O
helped	O
you	O
understand	O
how	O
pointers	O
work	O
at	O
the	O
variable	O
,	O
function	O
,	O
and	O
beyond	O
level	O
?	O
Addresses	O
boxes	O
.	O
I	O
remember	O
when	O
I	O
was	O
learning	O
to	O
program	O
BASIC	O
into	O
microcomputers	O
,	O
there	O
were	O
these	O
pretty	O
books	O
with	O
games	O
in	O
them	O
,	O
and	O
sometimes	O
you	O
had	O
to	O
poke	O
values	O
into	O
particular	O
addresses	O
.	O
They	O
had	O
a	O
picture	O
of	O
a	O
bunch	O
of	O
boxes	O
,	O
incrementally	O
labelled	O
with	O
0	O
,	O
1	O
,	O
2	O
...	O
and	O
it	O
was	O
explained	O
that	O
only	O
one	O
small	O
thing	O
(	O
a	O
byte	O
)	O
could	O
fit	O
in	O
these	O
boxes	O
,	O
and	O
there	O
were	O
a	O
lot	O
of	O
them	O
-	O
some	O
computers	O
had	O
as	O
many	O
as	O
65535	O
!	O
They	O
were	O
next	O
to	O
each	O
other	O
,	O
and	O
they	O
all	O
had	O
an	O
address	O
.	O
What	O
are	O
some	O
good	O
practice	O
things	O
that	O
can	O
be	O
done	O
to	O
bring	O
somebody	O
to	O
the	O
level	O
of	O
,	O
``	O
Ah-hah	O
,	O
I	O
got	O
it	O
,	O
''	O
without	O
getting	O
them	O
bogged	O
down	O
in	O
the	O
overall	O
concept	O
?	O
Basically	O
,	O
drill	O
like	O
scenarios	O
.	O
For	O
a	O
drill	O
?	O
Make	O
a	O
struct	O
:	O
struct	O
{	O
char	O
a	O
;	O
char	O
b	O
;	O
char	O
c	O
;	O
char	O
d	O
;	O
}	O
mystruct	O
;	O
mystruct.a	O
=	O
'r	O
'	O
;	O
mystruct.b	O
=	O
's	O
'	O
;	O
mystruct.c	O
=	O
't	O
'	O
;	O
mystruct.d	O
=	O
'u	O
'	O
;	O
char*	O
my_pointer	O
;	O
my_pointer	O
=	O
mystruct.b	O
;	O
cout	O
'Start	O
:	O
my_pointer	O
=	O
'	O
*my_pointer	O
endl	O
;	O
my_pointer++	O
;	O
cout	O
'After	O
:	O
my_pointer	O
=	O
'	O
*my_pointer	O
endl	O
;	O
my_pointer	O
=	O
mystruct.a	O
;	O
cout	O
'Then	O
:	O
my_pointer	O
=	O
'	O
*my_pointer	O
endl	O
;	O
my_pointer	O
=	O
my_pointer	O
+	O
3	O
;	O
cout	O
'End	O
:	O
my_pointer	O
=	O
'	O
*my_pointer	O
endl	O
;	O
Same	O
example	O
as	O
above	O
,	O
except	O
in	O
C	O
:	O
//	O
Same	O
example	O
as	O
above	O
,	O
except	O
in	O
C	O
:	O
struct	O
{	O
char	O
a	O
;	O
char	O
b	O
;	O
char	O
c	O
;	O
char	O
d	O
;	O
}	O
mystruct	O
;	O
mystruct.a	O
=	O
'r	O
'	O
;	O
mystruct.b	O
=	O
's	O
'	O
;	O
mystruct.c	O
=	O
't	O
'	O
;	O
mystruct.d	O
=	O
'u	O
'	O
;	O
char*	O
my_pointer	O
;	O
my_pointer	O
=	O
mystruct.b	O
;	O
printf	O
(	O
``	O
Start	O
:	O
my_pointer	O
=	O
%	O
c\n	O
''	O
,	O
*my_pointer	O
)	O
;	O
my_pointer++	O
;	O
printf	O
(	O
``	O
After	O
:	O
my_pointer	O
=	O
%	O
c\n	O
''	O
,	O
*my_pointer	O
)	O
;	O
my_pointer	O
=	O
mystruct.a	O
;	O
printf	O
(	O
``	O
Then	O
:	O
my_pointer	O
=	O
%	O
c\n	O
''	O
,	O
*my_pointer	O
)	O
;	O
my_pointer	O
=	O
my_pointer	O
+	O
3	O
;	O
printf	O
(	O
``	O
End	O
:	O
my_pointer	O
=	O
%	O
c\n	O
''	O
,	O
*my_pointer	O
)	O
;	O
Output	O
:	O
Start	O
:	O
my_pointer	O
=	O
s	O
After	O
:	O
my_pointer	O
=	O
t	O
Then	O
:	O
my_pointer	O
=	O
r	O
End	O
:	O
my_pointer	O
=	O
u	O
Perhaps	O
that	O
explains	O
some	O
of	O
the	O
basics	O
through	O
example	O
?	O
I	O
do	O
n't	O
think	O
pointers	O
as	O
a	O
concept	O
are	O
particularly	O
tricky	O
-	O
most	O
students	O
'	O
mental	O
models	O
map	O
to	O
something	O
like	O
this	O
and	O
some	O
quick	O
box	O
sketches	O
can	O
help	O
.	O
The	O
difficulty	O
,	O
at	O
least	O
that	O
which	O
I	O
've	O
experienced	O
in	O
the	O
past	O
and	O
seen	O
others	O
deal	O
with	O
,	O
is	O
that	O
the	O
management	O
of	O
pointers	O
in	O
C/C++	O
can	O
be	O
unncessarily	O
convoluted	O
.	O
I	O
do	O
n't	O
see	O
what	O
is	O
so	O
confusing	O
about	O
pointers	O
.	O
They	O
point	O
to	O
a	O
location	O
in	O
memory	O
,	O
that	O
is	O
it	O
stores	O
the	O
memory	O
address	O
.	O
In	O
C/C++	O
you	O
can	O
specify	O
the	O
type	O
the	O
pointer	O
points	O
to	O
.	O
For	O
example	O
:	O
int*	B-API
Says	O
that	O
my_int_pointer	O
contains	O
the	O
address	O
to	O
a	O
location	O
that	O
contains	O
an	O
int	O
.	O
The	O
problem	O
with	O
pointers	O
is	O
that	O
they	O
point	O
to	O
a	O
location	O
in	O
memory	O
,	O
so	O
it	O
is	O
easy	O
to	O
trail	O
off	O
into	O
some	O
location	O
you	O
should	O
not	O
be	O
in	O
.	O
As	O
proof	O
look	O
at	O
the	O
numerous	O
security	O
holes	O
in	O
C/C++	O
applications	O
from	O
buffer	O
overflow	O
(	O
incrementing	O
the	O
pointer	O
past	O
the	O
allocated	O
boundary	O
)	O
.	O
The	O
reason	O
pointers	O
seem	O
to	O
confuse	O
so	O
many	O
people	O
is	O
that	O
they	O
mostly	O
come	O
with	O
little	O
or	O
no	O
background	O
in	O
computer	O
architecture	O
.	O
Since	O
many	O
do	O
n't	O
seem	O
to	O
have	O
an	O
idea	O
of	O
how	O
computers	O
(	O
the	O
machine	O
)	O
is	O
actually	O
implemented	O
-	O
working	O
in	O
C/C++	O
seems	O
alien	O
.	O
A	O
drill	O
is	O
to	O
ask	O
them	O
to	O
implement	O
a	O
simple	O
bytecode	O
based	O
virtual	O
machine	O
(	O
in	O
any	O
language	O
they	O
chose	O
,	O
python	O
works	O
great	O
for	O
this	O
)	O
with	O
an	O
instruction	O
set	O
focussed	O
on	O
pointer	O
operations	O
(	O
load	O
,	O
store	O
,	O
direct/indirect	O
addressing	O
)	O
.	O
Then	O
ask	O
them	O
to	O
write	O
simple	O
programs	O
for	O
that	O
instruction	O
set	O
.	O
Anything	O
requiring	O
slightly	O
more	O
than	O
simple	O
addition	O
is	O
going	O
to	O
involve	O
pointers	O
and	O
they	O
are	O
sure	O
to	O
get	O
it	O
.	O
I	O
think	O
that	O
the	O
main	O
reason	O
that	O
people	O
have	O
trouble	O
with	O
it	O
is	O
because	O
it	O
's	O
generally	O
not	O
taught	O
in	O
an	O
interesting	O
and	O
engaging	O
manner	O
.	O
I	O
'd	O
like	O
to	O
see	O
a	O
lecturer	O
get	O
10	O
volunteers	O
from	O
the	O
crowd	O
and	O
give	O
them	O
a	O
1	O
meter	O
ruler	O
each	O
,	O
get	O
them	O
to	O
stand	O
around	O
in	O
a	O
certain	O
configuration	O
and	O
use	O
the	O
rulers	O
to	O
point	O
at	O
each	O
other	O
.	O
Then	O
show	O
pointer	O
arithmetic	O
by	O
moving	O
people	O
around	O
(	O
and	O
where	O
they	O
point	O
their	O
rulers	O
)	O
.	O
It	O
'd	O
be	O
a	O
simple	O
but	O
effective	O
(	O
and	O
above	O
all	O
memorable	O
)	O
way	O
of	O
showing	O
the	O
concepts	O
without	O
getting	O
too	O
bogged	O
down	O
in	O
the	O
mechanics	O
.	O
Once	O
you	O
get	O
to	O
C	O
and	O
C++	O
it	O
seems	O
to	O
get	O
harder	O
for	O
some	O
people	O
.	O
I	O
'm	O
not	O
sure	O
if	O
this	O
is	O
because	O
they	O
are	O
finally	O
putting	O
theory	O
that	O
they	O
do	O
n't	O
properly	O
grasp	O
into	O
practice	O
or	O
because	O
pointer	O
manipulation	O
is	O
inherently	O
harder	O
in	O
those	O
languages	O
.	O
I	O
ca	O
n't	O
remember	O
my	O
own	O
transition	O
that	O
well	O
,	O
but	O
I	O
knew	O
pointers	O
in	O
Pascal	O
and	O
then	O
moved	O
to	O
C	O
and	O
got	O
totally	O
lost	O
.	O
Pointers	O
is	O
a	O
concept	O
t	O
at	O
for	O
many	O
can	O
be	O
confusing	O
at	O
first	O
,	O
in	O
particular	O
when	O
it	O
comes	O
to	O
copying	O
pointer	O
values	O
around	O
and	O
still	O
referencing	O
the	O
same	O
memory	O
block	O
.	O
I	O
've	O
found	O
that	O
the	O
best	O
analogy	O
is	O
to	O
consider	O
the	O
pointer	O
as	O
a	O
piece	O
of	O
paper	O
with	O
a	O
house	O
address	O
on	O
it	O
,	O
and	O
the	O
memory	O
block	O
it	O
references	O
as	O
the	O
actual	O
house	O
.	O
All	O
sorts	O
of	O
operations	O
can	O
thus	O
be	O
easily	O
explained	O
.	O
I	O
've	O
added	O
some	O
Delphi	O
code	O
down	O
below	O
,	O
and	O
some	O
comments	O
where	O
appropriate	O
.	O
I	O
chose	O
Delphi	O
since	O
my	O
other	O
main	O
programming	O
language	O
,	O
C	O
#	O
,	O
does	O
not	O
exhibit	O
things	O
like	O
memory	O
leaks	O
in	O
the	O
same	O
way	O
.	O
If	O
you	O
only	O
wish	O
to	O
learn	O
the	O
high-level	O
concept	O
of	O
pointers	O
,	O
then	O
you	O
should	O
ignore	O
the	O
parts	O
labelled	O
``	O
Memory	O
layout	O
''	O
in	O
the	O
explanation	O
below	O
.	O
They	O
are	O
intended	O
to	O
give	O
examples	O
of	O
what	O
memory	O
could	O
look	O
like	O
after	O
operations	O
,	O
but	O
they	O
are	O
more	O
low-level	O
in	O
nature	O
.	O
However	O
,	O
in	O
order	O
to	O
accurately	O
explain	O
how	O
buffer	O
overruns	O
really	O
work	O
,	O
it	O
was	O
important	O
that	O
I	O
added	O
these	O
diagrams	O
.	O
Disclaimer	O
:	O
For	O
all	O
intents	O
and	O
purposes	O
,	O
this	O
explanation	O
and	O
the	O
example	O
memory	O
layouts	O
are	O
vastly	O
simplified	O
.	O
There	O
's	O
more	O
overhead	O
and	O
a	O
lot	O
more	O
details	O
you	O
would	O
need	O
to	O
know	O
if	O
you	O
need	O
to	O
deal	O
with	O
memory	O
on	O
a	O
low-level	O
basis	O
.	O
However	O
,	O
for	O
the	O
intents	O
of	O
explaining	O
memory	O
and	O
pointers	O
,	O
it	O
is	O
accurate	O
enough	O
.	O
Let	O
's	O
assume	O
the	O
THouse	O
class	O
used	O
below	O
looks	O
like	O
this	O
:	O
type	O
THouse	O
=	O
class	O
private	O
FName	O
:	O
array	O
[	O
0..9	O
]	O
of	O
Char	O
;	O
public	O
constructor	O
Create	O
(	O
name	O
:	O
PChar	O
)	O
;	O
end	O
;	O
When	O
you	O
initialize	O
the	O
house	O
object	O
,	O
the	O
name	O
given	O
to	O
the	O
constructor	O
is	O
copied	O
into	O
the	O
private	O
field	O
FName	O
.	O
There	O
is	O
a	O
reason	O
it	O
is	O
defined	O
as	O
a	O
fixed-size	O
array	O
.	O
In	O
memory	O
,	O
there	O
will	O
be	O
some	O
overhead	O
associated	O
with	O
the	O
house	O
allocation	O
,	O
I	O
'll	O
illustrate	O
this	O
below	O
like	O
this	O
:	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
^	O
^	O
|	O
|	O
|	O
+-	O
the	O
FName	O
array	O
|	O
+-	O
overhead	O
The	O
``	O
tttt	O
''	O
area	O
is	O
overhead	O
,	O
there	O
will	O
typically	O
be	O
more	O
of	O
this	O
for	O
various	O
types	O
of	O
runtimes	O
and	O
languages	O
,	O
like	O
8	O
or	O
12	O
bytes	O
.	O
It	O
is	O
imperative	O
that	O
whatever	O
values	O
are	O
stored	O
in	O
this	O
area	O
never	O
gets	O
changed	O
by	O
anything	O
other	O
than	O
the	O
memory	O
allocator	O
or	O
the	O
core	O
system	O
routines	O
,	O
or	O
you	O
risk	O
crashing	O
the	O
program	O
.	O
Allocate	O
memory	O
Get	O
an	O
entrepreneur	O
to	O
build	O
your	O
house	O
,	O
and	O
give	O
you	O
the	O
address	O
to	O
the	O
house	O
.	O
In	O
contrast	O
to	O
the	O
real	O
world	O
,	O
memory	O
allocation	O
can	O
not	O
be	O
told	O
where	O
to	O
allocate	O
,	O
but	O
will	O
find	O
a	O
suitable	O
spot	O
with	O
enough	O
room	O
,	O
and	O
report	O
back	O
the	O
address	O
to	O
the	O
allocated	O
memory	O
.	O
In	O
other	O
words	O
,	O
the	O
entrepreneur	O
will	O
choose	O
the	O
spot	O
.	O
THouse.Create	O
(	O
'My	O
house	O
'	O
)	O
;	O
Memory	O
layout	O
:	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
1234My	O
house	O
Keep	O
a	O
variable	O
with	O
the	O
address	O
Write	O
the	O
address	O
to	O
your	O
new	O
house	O
down	O
on	O
a	O
piece	O
of	O
paper	O
.	O
This	O
paper	O
will	O
serve	O
as	O
your	O
reference	O
to	O
your	O
house	O
.	O
Without	O
this	O
piece	O
of	O
paper	O
,	O
you	O
're	O
lost	O
,	O
and	O
can	O
not	O
find	O
the	O
house	O
,	O
unless	O
you	O
're	O
already	O
in	O
it	O
.	O
var	O
h	O
:	O
THouse	O
;	O
begin	O
h	O
:	O
=	O
THouse.Create	O
(	O
'My	O
house	O
'	O
)	O
;	O
...	O
Memory	O
layout	O
:	O
h	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
1234My	O
house	O
Copy	O
pointer	O
value	O
Just	O
write	O
the	O
address	O
on	O
a	O
new	O
piece	O
of	O
paper	O
.	O
You	O
now	O
have	O
two	O
pieces	O
of	O
paper	O
that	O
will	O
get	O
you	O
to	O
the	O
same	O
house	O
,	O
not	O
two	O
separate	O
houses	O
.	O
Any	O
attempts	O
to	O
follow	O
the	O
address	O
from	O
one	O
paper	O
and	O
rearrange	O
the	O
furniture	O
at	O
that	O
house	O
will	O
make	O
it	O
seem	O
that	O
the	O
other	O
house	O
has	O
been	O
modified	O
in	O
the	O
same	O
manner	O
,	O
unless	O
you	O
can	O
explicitly	O
detect	O
that	O
it	O
's	O
actually	O
just	O
one	O
house	O
.	O
Note	O
This	O
is	O
usually	O
the	O
concept	O
that	O
I	O
have	O
the	O
most	O
problem	O
explaining	O
to	O
people	O
,	O
two	O
pointers	O
does	O
not	O
mean	O
two	O
objects	O
or	O
memory	O
blocks	O
.	O
var	O
h1	O
,	O
h2	O
:	O
THouse	O
;	O
begin	O
h1	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
h2	O
:	O
=	O
h1	O
;	O
//	O
copies	O
the	O
address	O
,	O
not	O
the	O
house	O
...	O
h1	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
1234My	O
house	O
^	O
h2	O
Freeing	O
the	O
memory	O
Demolish	O
the	O
house	O
.	O
You	O
can	O
then	O
later	O
on	O
reuse	O
the	O
paper	O
for	O
a	O
new	O
address	O
if	O
you	O
so	O
wish	O
,	O
or	O
clear	O
it	O
to	O
forget	O
the	O
address	O
to	O
the	O
house	O
that	O
no	O
longer	O
exists	O
.	O
var	O
h	O
:	O
THouse	O
;	O
begin	O
h	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
...	O
h	O
;	O
:	O
=	O
nil	O
;	O
Here	O
I	O
first	O
construct	O
the	O
house	O
,	O
and	O
get	O
hold	O
of	O
its	O
address	O
.	O
Then	O
I	O
do	O
something	O
to	O
the	O
house	O
(	O
use	O
it	O
,	O
the	O
...	O
code	O
,	O
left	O
as	O
an	O
exercise	O
for	O
the	O
reader	O
)	O
,	O
and	O
then	O
I	O
free	O
it	O
.	O
Lastly	O
I	O
clear	O
the	O
address	O
from	O
my	O
variable	O
.	O
Memory	O
layout	O
:	O
h	O
--	O
+	O
v	O
+-	O
before	O
free	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
|	O
1234My	O
house	O
--	O
+	O
h	O
(	O
now	O
points	O
nowhere	O
)	O
--	O
+	O
+-	O
after	O
free	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
|	O
(	O
note	O
,	O
memory	O
might	O
still	O
xx34My	O
house	O
--	O
+	O
contain	O
some	O
data	O
)	O
Dangling	O
pointers	O
You	O
tell	O
your	O
entrepreneur	O
to	O
destroy	O
the	O
house	O
,	O
but	O
you	O
forget	O
to	O
erase	O
the	O
address	O
from	O
your	O
piece	O
of	O
paper	O
.	O
When	O
later	O
on	O
you	O
look	O
at	O
the	O
piece	O
of	O
paper	O
,	O
you	O
've	O
forgotten	O
that	O
the	O
house	O
is	O
no	O
longer	O
there	O
,	O
and	O
goes	O
to	O
visit	O
it	O
,	O
with	O
failed	O
results	O
(	O
see	O
also	O
the	O
part	O
about	O
an	O
invalid	O
reference	O
below	O
)	O
.	O
var	O
h	O
:	O
THouse	O
;	O
begin	O
h	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
...	O
h.Free	O
;	O
...	O
//	O
forgot	O
to	O
clear	O
h	O
here	O
h.OpenFrontDoor	B-API
;	O
//	O
will	O
most	O
likely	O
fail	O
Using	O
h	O
after	O
the	O
call	O
to	O
.Free	O
might	O
work	O
,	O
but	O
that	O
is	O
just	O
pure	O
luck	O
.	O
Most	O
likely	O
it	O
will	O
fail	O
,	O
at	O
a	O
customers	O
place	O
,	O
in	O
the	O
middle	O
of	O
a	O
critical	O
operation	O
.	O
h	O
--	O
+	O
v	O
+-	O
before	O
free	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
|	O
1234My	O
house	O
--	O
+	O
h	O
--	O
+	O
v	O
+-	O
after	O
free	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
|	O
xx34My	O
house	O
--	O
+	O
As	O
you	O
can	O
see	O
,	O
h	O
still	O
points	O
to	O
the	O
remnants	O
of	O
the	O
data	O
in	O
memory	O
,	O
but	O
since	O
it	O
might	O
not	O
be	O
complete	O
,	O
using	O
it	O
as	O
before	O
might	O
fail	O
.	O
Memory	O
leak	O
You	O
lose	O
the	O
piece	O
of	O
paper	O
and	O
can	O
not	O
find	O
the	O
house	O
.	O
The	O
house	O
is	O
still	O
standing	O
somewhere	O
though	O
,	O
and	O
when	O
you	O
later	O
on	O
want	O
to	O
construct	O
a	O
new	O
house	O
,	O
you	O
can	O
not	O
reuse	O
that	O
spot	O
.	O
var	O
h	O
:	O
THouse	O
;	O
begin	O
h	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
h	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
//	O
uh-oh	O
,	O
what	O
happened	O
to	O
our	O
first	O
house	O
?	O
...	O
h.Free	O
;	O
h	O
:	O
=	O
nil	O
;	O
Here	O
we	O
overwrote	O
the	O
contents	O
of	O
the	O
h	O
variable	O
with	O
the	O
address	O
of	O
a	O
new	O
house	O
,	O
but	O
the	O
old	O
one	O
is	O
still	O
standing	O
...	O
somewhere	O
.	O
After	O
this	O
code	O
,	O
there	O
is	O
no	O
way	O
to	O
reach	O
that	O
house	O
,	O
and	O
it	O
will	O
be	O
left	O
standing	O
.	O
In	O
other	O
words	O
,	O
the	O
allocated	O
memory	O
will	O
stay	O
allocated	O
until	O
the	O
application	O
closes	O
,	O
at	O
which	O
point	O
the	O
operating	O
system	O
will	O
tear	O
it	O
down	O
.	O
Memory	O
layout	O
after	O
first	O
allocation	O
:	O
h	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
1234My	O
house	O
Memory	O
layout	O
after	O
second	O
allocation	O
:	O
h	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
1234My	O
house	O
5678My	O
house	O
A	O
more	O
common	O
way	O
to	O
get	O
this	O
method	O
is	O
just	O
to	O
forget	O
to	O
free	O
something	O
,	O
instead	O
of	O
overwriting	O
it	O
as	O
above	O
.	O
In	O
Delphi	O
terms	O
,	O
this	O
will	O
occur	O
with	O
the	O
following	O
method	O
:	O
procedure	O
OpenTheFrontDoorOfANewHouse	O
;	O
var	O
h	O
:	O
THouse	O
;	O
begin	O
h	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
h.OpenFrontDoor	O
;	O
//	O
uh-oh	O
,	O
no	O
.Free	O
here	O
,	O
where	O
does	O
the	O
address	O
go	O
?	O
end	O
;	O
After	O
this	O
method	O
has	O
executed	O
,	O
there	O
's	O
no	O
place	O
in	O
our	O
variables	O
that	O
the	O
address	O
to	O
the	O
house	O
exists	O
,	O
but	O
the	O
house	O
is	O
still	O
out	O
there	O
.	O
Memory	O
layout	O
:	O
h	O
--	O
+	O
v	O
+-	O
before	O
losing	O
pointer	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
|	O
1234My	O
house	O
--	O
+	O
h	O
(	O
now	O
points	O
nowhere	O
)	O
--	O
+	O
+-	O
after	O
losing	O
pointer	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
|	O
1234My	O
house	O
--	O
+	O
As	O
you	O
can	O
see	O
,	O
the	O
old	O
data	O
is	O
left	O
intact	O
in	O
memory	O
,	O
and	O
will	O
not	O
be	O
reused	O
by	O
the	O
memory	O
allocator	O
.	O
The	O
allocator	O
keeps	O
track	O
of	O
which	O
areas	O
of	O
memory	O
has	O
been	O
used	O
,	O
and	O
will	O
not	O
reuse	O
them	O
unless	O
you	O
free	O
it	O
.	O
Freeing	O
the	O
memory	O
but	O
keeping	O
a	O
(	O
now	O
invalid	O
)	O
reference	O
Demolish	O
the	O
house	O
,	O
erase	O
one	O
of	O
the	O
pieces	O
of	O
paper	O
but	O
you	O
also	O
have	O
another	O
piece	O
of	O
paper	O
with	O
the	O
old	O
address	O
on	O
it	O
,	O
when	O
you	O
go	O
to	O
the	O
address	O
,	O
you	O
wo	O
n't	O
find	O
a	O
house	O
,	O
but	O
you	O
might	O
find	O
something	O
that	O
resembles	O
the	O
ruins	O
of	O
one	O
.	O
Perhaps	O
you	O
will	O
even	O
find	O
a	O
house	O
,	O
but	O
it	O
is	O
not	O
the	O
house	O
you	O
were	O
originally	O
given	O
the	O
address	O
to	O
,	O
and	O
thus	O
any	O
attempts	O
to	O
use	O
it	O
as	O
though	O
it	O
belongs	O
to	O
you	O
might	O
fail	O
horribly	O
.	O
Sometimes	O
you	O
might	O
even	O
find	O
that	O
a	O
neighbouring	O
address	O
has	O
a	O
rather	O
big	O
house	O
set	O
up	O
on	O
it	O
that	O
occupies	O
three	O
address	O
(	O
Main	O
Street	O
1-3	O
)	O
,	O
and	O
your	O
address	O
goes	O
to	O
the	O
middle	O
of	O
the	O
house	O
.	O
Any	O
attempts	O
to	O
treat	O
that	O
part	O
of	O
the	O
large	O
3-address	O
house	O
as	O
a	O
single	O
small	O
house	O
might	O
also	O
fail	O
horribly	O
.	O
var	O
,	O
h2	O
:	O
THouse	O
;	O
begin	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
:	O
=	O
h1	O
;	O
//	O
copies	O
the	O
address	O
,	O
not	O
the	O
house	O
...	O
h1.Free	O
;	O
h1	O
:	O
=	O
nil	O
;	O
h2.OpenFrontDoor	O
;	O
//	O
uh-oh	O
,	O
what	O
happened	O
to	O
our	O
house	O
?	O
Here	O
the	O
house	O
was	O
torn	O
down	O
,	O
through	O
the	O
reference	O
in	O
h1	O
,	O
and	O
while	O
h1	O
was	O
cleared	O
as	O
well	O
,	O
h2	O
still	O
has	O
the	O
old	O
,	O
out-of-date	O
,	O
address	O
.	O
Access	O
to	O
the	O
house	O
that	O
is	O
no	O
longer	O
standing	O
might	O
or	O
might	O
not	O
work	O
.	O
This	O
is	O
a	O
variation	O
of	O
the	O
dangling	O
pointer	O
above	O
.	O
See	O
its	O
memory	O
layout	O
.	O
Buffer	O
overrun	O
You	O
move	O
more	O
stuff	O
into	O
the	O
house	O
than	O
you	O
can	O
possibly	O
fit	O
,	O
spilling	O
into	O
the	O
neighbours	O
house	O
or	O
yard	O
.	O
When	O
the	O
owner	O
of	O
that	O
neighbouring	O
house	O
later	O
on	O
comes	O
home	O
,	O
he	O
'll	O
find	O
all	O
sorts	O
of	O
things	O
he	O
'll	O
consider	O
his	O
own	O
.	O
This	O
is	O
the	O
reason	O
I	O
chose	O
a	O
fixed-size	O
array	O
.	O
To	O
set	O
the	O
stage	O
,	O
assume	O
that	O
the	O
second	O
house	O
we	O
allocate	O
will	O
,	O
for	O
some	O
reason	O
,	O
be	O
placed	O
before	O
the	O
first	O
one	O
in	O
memory	O
.	O
In	O
other	O
words	O
,	O
the	O
second	O
house	O
will	O
have	O
a	O
lower	O
address	O
than	O
the	O
first	O
one	O
.	O
Also	O
,	O
they	O
're	O
allocated	O
right	O
next	O
to	O
each	O
other	O
.	O
Thus	O
,	O
this	O
code	O
:	O
var	O
h1	O
,	O
h2	O
:	O
THouse	O
;	O
begin	O
h1	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
house	I-API
'	I-API
)	I-API
;	O
h2	O
:	O
=	O
THouse.Create	B-API
(	I-API
'My	I-API
other	I-API
house	I-API
somewhere	I-API
'	I-API
)	I-API
;	O
^	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
-^	O
longer	O
than	O
10	O
characters	O
0123456789	O
--	O
10	O
characters	O
Memory	O
layout	O
after	O
first	O
allocation	O
:	O
h1	O
v	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
5678My	O
house	O
Memory	O
layout	O
after	O
second	O
allocation	O
:	O
h2	O
h1	O
v	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
--	O
[	O
ttttNNNNNNNNNN	O
]	O
1234My	O
other	O
house	O
somewhereouse	O
^	O
--	O
-+	O
--	O
^	O
|	O
+-	O
overwritten	O
The	O
part	O
that	O
will	O
most	O
often	O
cause	O
crash	O
is	O
when	O
you	O
overwrite	O
important	O
parts	O
of	O
the	O
data	O
you	O
stored	O
that	O
really	O
should	O
not	O
be	O
randomly	O
changed	O
.	O
For	O
instance	O
it	O
might	O
not	O
be	O
a	O
problem	O
that	O
parts	O
of	O
the	O
name	O
of	O
the	O
h1-house	O
was	O
changed	O
,	O
in	O
terms	O
of	O
crashing	O
the	O
program	O
,	O
but	O
overwriting	O
the	O
overhead	O
of	O
the	O
object	O
will	O
most	O
likely	O
crash	O
when	O
you	O
try	O
to	O
use	O
the	O
broken	O
object	O
,	O
as	O
will	O
overwriting	O
links	O
that	O
is	O
stored	O
to	O
other	O
objects	O
in	O
the	O
object	O
.	O
Linked	O
lists	O
When	O
you	O
follow	O
an	O
address	O
on	O
a	O
piece	O
of	O
paper	O
,	O
you	O
get	O
to	O
a	O
house	O
,	O
and	O
at	O
that	O
house	O
there	O
is	O
another	O
piece	O
of	O
paper	O
with	O
a	O
new	O
address	O
on	O
it	O
,	O
for	O
the	O
next	O
house	O
in	O
the	O
chain	O
,	O
and	O
so	O
on	O
.	O
var	O
h1	O
,	O
h2	O
:	O
THouse	O
;	O
begin	O
h1	O
:	O
=	O
THouse.Create	B-API
(	I-API
'Home	I-API
'	I-API
)	I-API
;	O
h2	O
:	O
=	O
THouse.Create	B-API
(	I-API
'Cabin	I-API
'	I-API
)	I-API
;	O
h1	O
.	O
:	O
=	O
h2	O
;	O
Here	O
we	O
create	O
a	O
link	O
from	O
our	O
home	O
house	O
to	O
our	O
cabin	O
.	O
We	O
can	O
follow	O
the	O
chain	O
until	O
a	O
house	O
has	O
no	O
NextHouse	O
reference	O
,	O
which	O
means	O
it	O
's	O
the	O
last	O
one	O
.	O
To	O
visit	O
all	O
our	O
houses	O
,	O
we	O
could	O
use	O
the	O
following	O
code	O
:	O
var	O
h1	O
,	O
h2	O
:	O
THouse	O
;	O
h	O
:	O
THouse	O
;	O
begin	O
h1	O
:	O
=	O
THouse.Create	B-API
(	I-API
'Home	I-API
'	I-API
)	I-API
;	O
h2	O
:	O
=	O
THouse.Create	B-API
(	I-API
'Cabin	I-API
'	I-API
)	I-API
;	O
h1.NextHouse	O
:	O
=	O
h2	O
;	O
...	O
h	O
:	O
=	O
h1	O
;	O
while	O
h	O
nil	O
do	O
begin	O
h.LockAllDoors	O
;	O
h.CloseAllWindows	O
;	O
h	O
:	O
=	O
h.NextHouse	O
;	O
end	O
;	O
Memory	O
layout	O
(	O
added	O
NextHouse	O
as	O
a	O
link	O
in	O
the	O
object	O
,	O
noted	O
with	O
the	O
four	O
LLLL	O
's	O
in	O
the	O
below	O
diagram	O
)	O
:	O
h1	O
h2	O
v	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNNLLLL	O
]	O
--	O
--	O
[	O
ttttNNNNNNNNNNLLLL	O
]	O
1234Home	O
+	O
5678Cabin	O
+	O
|	O
^	O
|	O
+	O
--	O
--	O
--	O
--	O
+	O
*	O
(	O
no	O
link	O
)	O
In	O
basic	O
terms	O
,	O
what	O
is	O
a	O
memory	O
address	O
?	O
A	O
memory	O
address	O
is	O
in	O
basic	O
terms	O
just	O
a	O
number	O
.	O
If	O
you	O
think	O
of	O
memory	O
as	O
a	O
big	O
array	O
of	O
bytes	O
,	O
the	O
very	O
first	O
byte	O
has	O
the	O
address	O
0	O
,	O
the	O
next	O
one	O
the	O
address	O
1	O
and	O
so	O
on	O
upwards	O
.	O
This	O
is	O
simplified	O
,	O
but	O
good	O
enough	O
.	O
So	O
this	O
memory	O
layout	O
:	O
h1	O
h2	O
v	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
--	O
-	O
[	O
ttttNNNNNNNNNN	O
]	O
1234My	O
house	O
5678My	O
house	O
Might	O
have	O
these	O
two	O
address	O
(	O
the	O
leftmost	O
-	O
is	O
address	O
0	O
)	O
:	O
h1	O
=	O
4	O
h2	O
=	O
23	O
Which	O
means	O
that	O
our	O
linked	O
list	O
above	O
might	O
actuall	O
look	O
like	O
this	O
:	O
h1	O
(	O
=4	O
)	O
h2	O
(	O
=28	O
)	O
v	O
v	O
--	O
-	O
[	O
ttttNNNNNNNNNNLLLL	O
]	O
--	O
--	O
[	O
ttttNNNNNNNNNNLLLL	O
]	O
1234Home	O
0028	O
5678Cabin	O
0000	O
|	O
^	O
|	O
+	O
--	O
--	O
--	O
--	O
+	O
*	O
(	O
no	O
link	O
)	O
It	O
is	O
typical	O
to	O
store	O
an	O
address	O
that	O
``	O
points	O
nowhere	O
''	O
as	O
a	O
zero-address	O
.	O
In	O
basic	O
terms	O
,	O
what	O
is	O
a	O
pointer	O
?	O
A	O
pointer	O
is	O
just	O
a	O
variable	O
holding	O
a	O
memory	O
address	O
.	O
You	O
can	O
typically	O
ask	O
the	O
programming	O
language	O
to	O
give	O
you	O
its	O
number	O
,	O
but	O
most	O
programming	O
languages	O
and	O
runtimes	O
tries	O
to	O
hide	O
the	O
fact	O
that	O
there	O
is	O
a	O
number	O
beneath	O
,	O
just	O
because	O
the	O
number	O
itself	O
does	O
not	O
really	O
hold	O
any	O
meaning	O
to	O
you	O
.	O
It	O
is	O
best	O
to	O
think	O
of	O
a	O
pointer	O
as	O
a	O
black	O
box	O
,	O
ie	O
.	O
you	O
do	O
n't	O
really	O
know	O
or	O
care	O
about	O
how	O
it	O
is	O
actually	O
implemented	O
,	O
just	O
as	O
long	O
as	O
it	O
works	O
.	O
An	O
example	O
of	O
a	O
tutorial	O
with	O
a	O
good	O
set	O
of	O
diagrams	O
helps	O
greatly	O
with	O
the	O
understanding	O
of	O
pointers	O
.	O
Joel	O
Spolsky	O
makes	O
some	O
good	O
points	O
about	O
understanding	O
pointers	O
in	O
his	O
Guerrilla	O
Guide	O
to	O
Interviewing	O
article	O
:	O
For	O
some	O
reason	O
most	O
people	O
seem	O
to	O
be	O
born	O
without	O
the	O
part	O
of	O
the	O
brain	O
that	O
understands	O
pointers	O
.	O
This	O
is	O
an	O
aptitude	O
thing	O
,	O
not	O
a	O
skill	O
thing	O
it	O
requires	O
a	O
complex	O
form	O
of	O
doubly-indirected	O
thinking	O
that	O
some	O
people	O
just	O
ca	O
n't	O
do	O
.	O
In	O
my	O
first	O
Comp	O
Sci	O
class	O
,	O
we	O
did	O
the	O
following	O
exercise	O
.	O
Granted	O
,	O
this	O
was	O
a	O
lecture	O
hall	O
with	O
roughly	O
200	O
students	O
in	O
it	O
...	O
Professor	O
writes	O
on	O
the	O
board	O
:	O
int	B-API
John	O
stands	O
up	O
Professor	O
writes	O
:	O
int	B-API
*sally	B-API
=	B-API
Sally	O
stands	O
up	O
,	O
points	O
at	O
john	O
Professor	O
:	O
int	B-API
*bill	B-API
=	B-API
Bill	O
stands	O
up	O
,	O
points	O
at	O
John	O
Professor	O
:	O
int	B-API
Sam	O
stands	O
up	O
Professor	O
:	O
bill	B-API
=	B-API
Bill	O
now	O
points	O
to	O
Sam	O
.	O
I	O
think	O
you	O
get	O
the	O
idea	O
.	O
I	O
think	O
we	O
spent	O
about	O
an	O
hour	O
doing	O
this	O
,	O
until	O
we	O
went	O
over	O
the	O
basics	O
of	O
pointer	O
assignment	O
.	O
I	O
've	O
been	O
successfully	O
using	O
it	O
on	O
Vista	O
x64	O
for	O
some	O
light	O
Java	O
work	O
.	O
Nothing	O
too	O
involved	O
and	O
no	O
extra	O
plugins	O
,	O
but	O
basic	O
Java	O
coding	O
has	O
been	O
working	O
without	O
any	O
issues	O
.	O
I	O
'm	O
using	O
the	O
3.4M7	O
build	O
but	O
it	O
looks	O
like	O
the	O
3.4	O
stable	O
build	O
supports	O
Vista	O
x64	O
now	O
.	O
Here	O
are	O
the	O
salient	O
points	O
:	O
You	O
ca	O
n't	O
make	O
UI	O
control	O
calls	O
from	O
a	O
different	O
thread	O
than	O
the	O
one	O
they	O
were	O
created	O
on	O
(	O
the	O
form	O
's	O
thread	O
)	O
.	O
Delegate	O
invocations	O
(	O
ie	O
,	O
event	O
hooks	O
)	O
are	O
triggered	O
on	O
the	O
same	O
thread	O
as	O
the	O
object	O
that	O
is	O
firing	O
the	O
event	O
.	O
So	O
,	O
if	O
you	O
have	O
a	O
separate	O
``	O
engine	O
''	O
thread	O
doing	O
some	O
work	O
and	O
have	O
some	O
UI	O
watching	O
for	O
state	O
changes	O
which	O
can	O
be	O
reflected	O
in	O
the	O
UI	O
(	O
such	O
as	O
a	O
progress	O
bar	O
or	O
whatever	O
)	O
,	O
you	O
have	O
a	O
problem	O
.	O
The	O
engine	O
fire	O
's	O
an	O
object	O
changed	O
event	O
which	O
has	O
been	O
hooked	O
by	O
the	O
Form	O
.	O
But	O
the	O
callback	O
delegate	O
that	O
the	O
Form	O
registered	O
with	O
the	O
engine	O
gets	O
called	O
on	O
the	O
engine	O
's	O
thread	O
not	O
on	O
the	O
Form	O
's	O
thread	O
.	O
And	O
so	O
you	O
ca	O
n't	O
update	O
any	O
controls	O
from	O
that	O
callback	O
.	O
Doh	O
!	O
BeginInvoke	O
comes	O
to	O
the	O
rescue	O
.	O
Just	O
use	O
this	O
simple	O
coding	O
model	O
in	O
all	O
your	O
callback	O
methods	O
and	O
you	O
can	O
be	O
sure	O
that	O
things	O
are	O
going	O
to	O
be	O
okay	O
:	O
private	O
delegate	O
void	O
;	O
void	O
{	O
//	O
//	O
Make	O
sure	O
this	O
callback	O
is	O
on	O
the	O
correct	O
thread	O
//	O
if	O
(	O
this.InvokeRequired	B-API
)	O
{	O
,	O
new	O
object	O
[	O
]	O
{	O
sender	O
,	O
ea	O
}	O
)	O
;	O
return	O
;	O
}	O
//	O
//	O
Do	O
something	O
with	O
the	O
event	O
such	O
as	O
update	O
a	O
control	O
//	O
textBox1.Text	B-API
=	O
``	O
Something	O
(	O
object	O
sender	O
,	O
EventArgs	O
ea	O
)	O
(	O
object	O
sender	O
,	O
EventArgs	O
ea	O
)	O
(	O
new	O
EventArgsDelegate	O
(	O
SomethingHappened	O
)	O
It	O
's	O
quite	O
simple	O
really	O
.	O
Use	O
InvokeRequired	B-API
to	O
find	O
out	O
if	O
this	O
callback	O
happened	O
on	O
the	O
correct	O
thread	O
.	O
If	O
not	O
,	O
then	O
reinvoke	O
the	O
callback	O
on	O
the	O
correct	O
thread	O
with	O
the	O
same	O
parameters	O
.	O
You	O
can	O
reinvoke	O
a	O
method	O
by	O
using	O
the	O
Invoke	B-API
(	I-API
blocking	I-API
)	I-API
or	O
BeginInvoke	B-API
(	I-API
non-blocking	I-API
)	I-API
methods	O
.	O
The	O
next	O
time	O
the	O
function	O
is	O
called	O
,	O
InvokeRequired	B-API
returns	O
false	O
because	O
we	O
are	O
now	O
on	O
the	O
correct	O
thread	O
and	O
everybody	O
is	O
happy	O
.	O
This	O
is	O
a	O
very	O
compact	O
way	O
of	O
addressing	O
this	O
problem	O
and	O
making	O
your	O
Forms	O
safe	O
from	O
multi-threaded	O
event	O
callbacks	O
.	O
In	O
many	O
simple	O
cases	O
,	O
you	O
can	O
use	O
the	O
MethodInvoker	B-API
delegate	O
and	O
avoid	O
the	O
need	O
to	O
create	O
your	O
own	O
delegate	O
type	O
.	O
To	O
simplify	O
Simon	O
's	O
code	O
a	O
bit	O
,	O
you	O
could	O
use	O
the	O
built	O
in	O
generic	O
Action	O
delegate	O
.	O
It	O
saves	O
peppering	O
your	O
code	O
with	O
a	O
bunch	O
of	O
delegate	O
types	O
you	O
do	O
n't	O
really	O
need	O
.	O
Also	O
,	O
in	O
.NET	O
3.5	O
they	O
added	O
a	O
params	O
parameter	O
to	O
the	O
Invoke	O
method	O
so	O
you	O
do	O
n't	O
have	O
to	O
define	O
a	O
temporary	O
array	O
.	O
void	O
SomethingHappened	O
(	O
object	O
sender	O
,	O
EventArgs	O
ea	O
)	O
{	O
if	O
(	O
InvokeRequired	B-API
)	O
{	O
Invoke	B-API
(	I-API
new	I-API
Actionobject	I-API
,	I-API
EventArgs	I-API
(	I-API
SomethingHappened	I-API
)	I-API
,	O
sender	O
,	O
ea	O
)	O
;	O
return	O
;	O
}	O
textBox1.Text	O
=	O
``	O
Something	O
happened	O
''	O
;	O
}	O
Take	O
a	O
look	O
at	O
the	O
BrowserPlus	O
project	O
at	O
Yahoo	O
.	O
It	O
looks	O
like	O
they	O
have	O
built	O
a	O
toolkit	O
so	O
that	O
you	O
do	O
n't	O
have	O
to	O
do	O
the	O
gritty	O
work	O
of	O
writing	O
the	O
browser	O
plugin	O
yourself	O
.	O
have	O
you	O
tried	O
watching	O
the	O
traffic	O
between	O
the	O
GUI	O
and	O
the	O
serial	O
port	O
to	O
see	O
if	O
there	O
is	O
some	O
kind	O
of	O
special	O
command	O
being	O
sent	O
across	O
?	O
Also	O
just	O
curious	O
,	O
Python	O
is	O
sending	O
ASCII	O
and	O
not	O
UTF-8	O
or	O
something	O
else	O
right	O
?	O
The	O
reason	O
I	O
ask	O
is	O
because	O
I	O
noticed	O
your	O
quote	O
changes	O
for	O
the	O
strings	O
and	O
in	O
some	O
languages	O
that	O
actually	O
is	O
the	O
difference	O
between	O
ASCII	O
and	O
UTF-8	O
.	O
is	O
the	O
``	O
callout	O
''	O
device	O
,	O
it	O
's	O
what	O
you	O
use	O
when	O
you	O
establish	O
a	O
connection	O
to	O
the	O
serial	O
device	O
and	O
start	O
talking	O
to	O
it	O
.	O
is	O
the	O
``	O
dialin	O
''	O
device	O
,	O
used	O
for	O
monitoring	O
a	O
port	O
for	O
incoming	O
calls	O
for	O
e.g	O
.	O
a	O
fax	O
listener	O
.	O
Many	O
years	O
ago	O
,	O
to	O
provide	O
an	O
age	O
calculator	O
gimmick	O
on	O
my	O
website	O
,	O
I	O
wrote	O
a	O
function	O
to	O
calculate	O
age	O
to	O
a	O
fraction	O
.	O
This	O
is	O
a	O
quick	O
port	O
of	O
that	O
function	O
to	O
C	O
#	O
(	O
from	O
the	O
PHP	O
version	O
)	O
.	O
I	O
'm	O
afraid	O
I	O
have	O
n't	O
been	O
able	O
to	O
test	O
the	O
C	O
#	O
version	O
,	O
but	O
hope	O
you	O
enjoy	O
all	O
the	O
same	O
!	O
(	O
Admittedly	O
this	O
is	O
a	O
bit	O
gimmicky	O
for	O
the	O
purposes	O
of	O
showing	O
user	O
profiles	O
on	O
Stack	O
Overflow	O
,	O
but	O
maybe	O
readers	O
will	O
find	O
some	O
use	O
for	O
it	O
.	O
:	O
-	O
)	O
)	O
double	O
AgeDiff	O
(	O
DateTime	B-API
date1	I-API
,	O
DateTime	B-API
date2	I-API
)	O
{	O
double	O
years	O
=	O
date2.Year	B-API
-	O
date1.Year	B-API
;	O
/*	O
*	O
If	O
date2	O
and	O
date1	O
+	O
round	O
(	O
date2	O
-	O
date1	O
)	O
are	O
on	O
different	O
sides	O
*	O
of	O
29	O
February	O
,	O
then	O
our	O
partial	O
year	O
is	O
considered	O
to	O
have	O
366	O
*	O
days	O
total	O
,	O
otherwise	O
it	O
's	O
365	O
.	O
Note	O
that	O
59	O
is	O
the	O
day	O
number	O
*	O
of	O
29	O
Feb.	O
*/	O
double	O
fraction	O
=	O
365	O
+	O
(	O
DateTime.IsLeapYear	B-API
(	I-API
date2.Year	I-API
)	I-API
date2.DayOfYear	B-API
=	O
59	O
(	O
date1.DayOfYear	B-API
59	O
||	O
date1.DayOfYear	B-API
date2.DayOfYear	B-API
)	O
?	O
1	O
:	O
0	O
)	O
;	O
/*	O
*	O
The	O
only	O
really	O
nontrivial	O
case	O
is	O
if	O
date1	O
is	O
in	O
a	O
leap	O
year	O
,	O
*	O
and	O
date2	O
is	O
not	O
.	O
So	O
let	O
's	O
handle	O
the	O
others	O
first	O
.	O
*/	O
if	O
(	O
DateTime.IsLeapYear	B-API
(	I-API
date2.Year	I-API
)	I-API
==	O
DateTime.IsLeapYear	B-API
(	I-API
date1.Year	I-API
)	I-API
)	O
return	O
years	O
+	O
(	O
date2.DayOfYear	B-API
-	O
date1.DayOfYear	B-API
)	O
/	O
fraction	O
;	O
/*	O
*	O
If	O
date2	O
is	O
in	O
a	O
leap	O
year	O
,	O
but	O
date1	O
is	O
not	O
and	O
is	O
March	O
or	O
*	O
beyond	O
,	O
shift	O
up	O
by	O
a	O
day	O
.	O
*/	O
if	O
(	O
DateTime.IsLeapYear	B-API
(	I-API
date2.Year	I-API
)	I-API
)	O
{	O
return	O
years	O
+	O
(	O
date2.DayOfYear	B-API
-	O
date1.DayOfYear	B-API
-	O
(	O
date1.DayOfYear	B-API
=	O
59	O
?	O
1	O
:	O
0	O
)	O
)	O
/	O
fraction	O
;	O
}	O
/*	O
*	O
If	O
date1	O
is	O
not	O
on	O
29	O
February	O
,	O
shift	O
down	O
date1	O
by	O
a	O
day	O
if	O
*	O
March	O
or	O
later	O
.	O
Proceed	O
normally	O
.	O
*/	O
if	O
(	O
date1.DayOfYear	B-API
!	O
=	O
59	O
)	O
{	O
return	O
years	O
+	O
(	O
date2.DayOfYear	B-API
-	O
date1.DayOfYear	B-API
+	O
(	O
date1.DayOfYear	B-API
59	O
?	O
1	O
:	O
0	O
)	O
)	O
/	O
fraction	O
;	O
}	O
/*	O
*	O
Okay	O
,	O
here	O
date1	O
is	O
on	O
29	O
February	O
,	O
and	O
date2	O
is	O
not	O
on	O
a	O
leap	O
*	O
year	O
.	O
What	O
to	O
do	O
now	O
?	O
On	O
28	O
Feb	O
in	O
date2	O
's	O
year	O
,	O
the	O
``	O
age	O
''	O
*	O
should	O
be	O
just	O
shy	O
of	O
a	O
whole	O
number	O
,	O
and	O
on	O
1	O
Mar	O
should	O
be	O
*	O
just	O
over	O
.	O
Perhaps	O
the	O
easiest	O
way	O
is	O
to	O
a	O
point	O
halfway	O
*	O
between	O
those	O
two	O
:	O
58.5	O
.	O
*/	O
return	O
years	O
+	O
(	O
date2.DayOfYear	B-API
-	O
58.5	O
)	O
/	O
fraction	O
;	O
}	O
The	O
best	O
way	O
that	O
I	O
know	O
of	O
because	O
of	O
leap	O
years	O
and	O
everything	O
is	O
:	O
DateTime	B-API
birthDate	I-API
=	I-API
new	I-API
;	O
int	O
age	O
=	O
.TotalDays	O
/	O
DateTime	B-API
(	I-API
2000,3,1	I-API
)	I-API
int	O
)	O
Math.Floor	B-API
(	O
(	O
DateTime.Now	B-API
-	O
birthDate	O
)	O
Hope	O
this	O
helps	O
.	O
Another	O
function	O
,	O
not	O
my	O
me	O
but	O
found	O
on	O
the	O
web	O
and	O
a	O
bit	O
refined	O
:	O
public	O
static	O
int	O
GetAge	O
(	O
DateTime	O
birthDate	O
)	O
{	O
DateTime	O
n	O
=	O
DateTime.Now	B-API
;	O
//	O
To	O
avoid	O
a	O
race	O
condition	O
around	O
midnight	O
int	O
age	O
=	O
n.Year	B-API
-	O
birthDate.Year	B-API
;	O
if	O
(	O
n.Month	B-API
birthDate.Month	B-API
||	O
(	O
n.Month	B-API
==	O
birthDate.Month	B-API
n.Day	B-API
birthDate.Day	B-API
)	O
)	O
age	O
--	O
;	O
return	O
age	O
;	O
}	O
Just	O
two	O
things	O
that	O
come	O
into	O
my	O
mind	O
:	O
What	O
about	O
people	O
from	O
countries	O
that	O
do	O
not	O
use	O
the	O
gregorian	O
calendar	O
?	O
DateTime.Now	B-API
is	O
in	O
the	O
server-specific	O
culture	O
i	O
think	O
.	O
I	O
have	O
absolutely	O
0	O
knowledge	O
about	O
actually	O
working	O
with	O
Asian	O
calendars	O
and	O
I	O
do	O
not	O
know	O
if	O
there	O
is	O
an	O
easy	O
way	O
to	O
convert	O
dates	O
between	O
calendars	O
,	O
but	O
just	O
in	O
case	O
you	O
're	O
wondering	O
about	O
those	O
chinese	O
guys	O
from	O
the	O
year	O
4660	O
:	O
-	O
)	O
For	O
some	O
reason	O
Jeff	O
's	O
code	O
did	O
n't	O
seem	O
simple	O
enough	O
.	O
To	O
me	O
this	O
seems	O
simpler	O
and	O
easier	O
to	O
understand	O
:	O
DateTime	O
today	O
=	O
DateTime.Today	B-API
;	O
int	O
age	O
=	O
today.Year	B-API
-	O
bday.Year	B-API
;	O
if	O
(	O
bday	O
today.AddYears	B-API
(	O
-age	O
)	O
)	O
age	O
--	O
;	O
However	O
,	O
this	O
assumes	O
you	O
are	O
looking	O
for	O
the	O
western	O
idea	O
of	O
age	O
and	O
not	O
using	O
East	O
Asian	O
reckoning	O
.	O
This	O
is	O
the	O
version	O
we	O
use	O
here	O
.	O
It	O
works	O
,	O
and	O
it	O
's	O
fairly	O
simple	O
.	O
It	O
's	O
the	O
same	O
idea	O
as	O
Jeff	O
's	O
but	O
I	O
think	O
it	O
's	O
a	O
little	O
clearer	O
because	O
it	O
separates	O
out	O
the	O
logic	O
for	O
subtracting	O
one	O
,	O
so	O
it	O
's	O
a	O
little	O
easier	O
to	O
understand	O
.	O
public	O
static	O
int	O
GetAge	O
(	O
this	O
dateOfBirth	O
,	O
DateTime	O
dateAsAt	O
)	O
{	O
return	O
dateAsAt.Year	B-API
-	O
dateOfBirth.Year	B-API
-	O
(	O
dateOfBirth.DayOfYear	B-API
dateAsAt.DayOfYear	B-API
?	O
0	O
:	O
1	O
)	O
;	O
}	O
You	O
could	O
expand	O
the	O
ternary	O
operator	O
to	O
make	O
it	O
even	O
clearer	O
,	O
if	O
you	O
think	O
that	O
sort	O
of	O
thing	O
is	O
unclear	O
.	O
Obviously	O
this	O
is	O
done	O
as	O
an	O
extension	O
method	O
on	O
DateTime	O
,	O
but	O
clearly	O
you	O
can	O
grab	O
that	O
one	O
line	O
of	O
code	O
that	O
does	O
the	O
work	O
and	O
put	O
it	O
anywhere	O
.	O
Here	O
we	O
have	O
another	O
overload	O
of	O
the	O
Extension	O
method	O
that	O
passes	O
in	O
,	O
just	O
for	O
completeness	O
.	O
Some	O
object	O
suppose	O
the	O
.dispose	B-API
(	I-API
)	I-API
method	O
which	O
forces	O
the	O
resource	O
to	O
be	O
removed	O
from	O
memory	O
.	O
No	O
do	O
n't	O
null	O
objects	O
.	O
You	O
can	O
check	O
out	O
http	O
:	O
//codebetter.com/blogs/karlseguin/archive/2008/04/27/foundations-of-programming-pt-7-back-to-basics-memory.aspx	O
for	O
more	O
information	O
,	O
but	O
setting	O
things	O
to	O
null	O
wo	O
n't	O
do	O
anything	O
,	O
except	O
dirty	O
your	O
code	O
.	O
The	O
only	O
time	O
you	O
should	O
set	O
a	O
variable	O
to	O
null	O
is	O
when	O
the	O
variable	O
does	O
not	O
go	O
out	O
of	O
scope	O
and	O
you	O
no	O
longer	O
need	O
the	O
data	O
associated	O
with	O
it	O
.	O
Otherwise	O
there	O
is	O
no	O
need	O
.	O
Also	O
:	O
using	O
(	O
SomeObject	O
object	O
=	O
new	O
SomeObject	O
(	O
)	O
)	O
{	O
//	O
do	O
stuff	O
with	O
the	O
object	O
}	O
//	O
the	O
object	O
will	O
be	O
disposed	O
of	O
There	O
are	O
some	O
cases	O
where	O
it	O
makes	O
sense	O
to	O
null	O
references	O
.	O
For	O
instance	O
,	O
when	O
you	O
're	O
writing	O
a	O
collection	O
--	O
like	O
a	O
priority	O
queue	O
--	O
and	O
by	O
your	O
contract	O
,	O
you	O
should	O
n't	O
be	O
keeping	O
those	O
objects	O
alive	O
for	O
the	O
client	O
after	O
the	O
client	O
has	O
removed	O
them	O
from	O
the	O
queue	O
.	O
But	O
this	O
sort	O
of	O
thing	O
only	O
matters	O
in	O
long	O
lived	O
collections	O
.	O
If	O
the	O
queue	O
's	O
not	O
going	O
to	O
survive	O
the	O
end	O
of	O
the	O
function	O
it	O
was	O
created	O
in	O
,	O
then	O
it	O
matters	O
a	O
whole	O
lot	O
less	O
.	O
On	O
a	O
whole	O
,	O
you	O
really	O
should	O
n't	O
bother	O
.	O
Let	O
the	O
compiler	O
and	O
GC	O
do	O
their	O
jobs	O
so	O
you	O
can	O
do	O
yours	O
.	O
Karl	O
is	O
absolutely	O
correct	O
,	O
there	O
is	O
no	O
need	O
to	O
set	O
objects	O
to	O
null	O
after	O
use	O
.	O
If	O
an	O
object	O
implements	O
,	O
just	O
make	O
sure	O
you	O
call	O
IDisposable.Dispose	B-API
(	I-API
)	I-API
when	O
you	O
're	O
done	O
with	O
that	O
object	O
(	O
wrapped	O
in	O
a	O
..	O
,	O
or	O
,	O
a	O
using	B-API
(	I-API
)	I-API
block	O
)	O
.	O
But	O
even	O
if	O
you	O
do	O
n't	O
remember	O
to	O
call	O
Dispose	B-API
(	I-API
)	I-API
,	O
the	O
finaliser	O
method	O
on	O
the	O
object	O
should	O
be	O
calling	O
Dispose	B-API
(	I-API
)	I-API
for	O
you	O
.	O
I	O
thought	O
this	O
was	O
a	O
good	O
treatment	O
:	O
Digging	O
into	O
IDisposable	O
and	O
this	O
Understanding	O
IDisposable	O
There	O
is	O
n't	O
any	O
point	O
in	O
trying	O
to	O
second	O
guess	O
the	O
GC	O
and	O
its	O
management	O
strategies	O
because	O
it	O
's	O
self	O
tuning	O
and	O
opaque	O
.	O
There	O
was	O
a	O
good	O
discussion	O
about	O
the	O
inner	O
workings	O
with	O
Jeffrey	O
Richter	O
on	O
Dot	O
Net	O
Rocks	O
here	O
:	O
Jeffrey	O
Richter	O
on	O
the	O
Windows	O
Memory	O
Model	O
and	O
Richters	O
book	O
CLR	O
via	O
C	O
#	O
chapter	O
20	O
has	O
a	O
great	O
treatment	O
:	O
If	O
you	O
have	O
a	O
byte	O
[	O
]	O
you	O
should	O
be	O
able	O
to	O
use	O
the	O
BinaryReader	O
class	O
and	O
set	O
values	O
on	O
NewStuff	O
using	O
the	O
available	O
ReadX	O
methods	O
.	O
From	O
what	O
I	O
can	O
see	O
in	O
that	O
context	O
,	O
you	O
do	O
n't	O
need	O
to	O
copy	O
SomeByteArray	O
into	O
a	O
buffer	O
.	O
You	O
simply	O
need	O
to	O
get	O
the	O
handle	O
from	O
SomeByteArray	O
,	O
pin	O
it	O
,	O
copy	O
the	O
IntPtr	O
data	O
using	O
PtrToStructure	B-API
and	O
then	O
release	O
.	O
No	O
need	O
for	O
a	O
copy	O
.	O
That	O
would	O
be	O
:	O
NewStuff	O
ByteArrayToNewStuff	O
(	O
byte	O
[	O
]	O
bytes	O
)	O
{	O
GCHandle	O
handle	O
=	O
GCHandle.Alloc	B-API
(	I-API
bytes	I-API
,	I-API
GCHandleType.Pinned	I-API
)	I-API
;	O
NewStuff	O
stuff	O
=	O
(	O
NewStuff	O
)	O
Marshal.PtrToStructure	B-API
(	I-API
handle.AddrOfPinnedObject	B-API
(	I-API
)	I-API
,	O
typeof	O
(	O
NewStuff	O
)	O
)	O
;	O
handle.Free	B-API
(	I-API
)	I-API
;	O
return	O
stuff	O
;	O
}	O
Generic	O
version	O
:	O
T	O
ByteArrayToStructureT	O
(	O
byte	O
[	O
]	O
bytes	O
)	O
where	O
T	O
:	O
struct	O
{	O
GCHandle	O
handle	O
=	O
GCHandle.Alloc	B-API
(	I-API
bytes	I-API
,	I-API
GCHandleType.Pinned	I-API
)	I-API
;	O
T	O
stuff	O
=	O
(	O
T	O
)	O
Marshal.PtrToStructure	O
(	O
handle.AddrOfPinnedObject	B-API
(	I-API
)	I-API
,	O
typeof	O
(	O
T	O
)	O
)	O
;	O
handle.Free	B-API
(	I-API
)	I-API
;	O
return	O
stuff	O
;	O
}	O
...	O
As	O
of	O
.Net	O
1.1	O
the	O
only	O
available	O
method	O
is	O
reaching	O
into	O
the	O
java	O
libraries	O
.	O
Using	O
the	O
Zip	O
Classes	O
in	O
the	O
J	O
#	O
Class	O
Libraries	O
to	O
Compress	O
Files	O
and	O
Data	O
with	O
C	O
#	O
Not	O
sure	O
if	O
this	O
has	O
changed	O
in	O
recent	O
versions	O
.	O
I	O
've	O
always	O
used	O
the	O
SharpZip	O
Library	O
.	O
Here	O
's	O
a	O
link	O
You	O
can	O
use	O
a	O
3rd-party	O
library	O
such	O
as	O
SharpZip	O
as	O
Tom	O
pointed	O
out	O
.	O
Another	O
way	O
(	O
without	O
going	O
3rd-party	O
)	O
is	O
to	O
use	O
the	O
Windows	B-API
Shell	I-API
API	I-API
.	O
You	O
'll	O
need	O
to	O
set	O
a	O
reference	O
to	O
the	O
Microsoft	O
Shell	O
Controls	O
and	O
Automation	O
COM	O
library	O
in	O
your	O
C	O
#	O
project	O
.	O
Gerald	O
Gibson	O
has	O
an	O
example	O
at	O
:	O
http	O
:	O
//geraldgibson.net/dnn/Home/CZipFileCompression/tabid/148/Default.aspx	O
Internet	O
Archive	O
's	O
copy	O
of	O
the	O
dead	O
page	O
This	O
is	O
very	O
easy	O
to	O
do	O
in	O
java	O
,	O
and	O
as	O
stated	O
above	O
you	O
can	O
reach	O
into	O
the	O
java.util.zip	B-API
libraries	O
from	O
C	O
#	O
.	O
For	O
references	O
see	O
:	O
java.util.zip	B-API
javadocs	O
sample	O
code	O
I	O
used	O
this	O
a	O
while	O
ago	O
to	O
do	O
a	O
deep	O
(	O
recursive	O
)	O
zip	O
of	O
a	O
folder	O
structure	O
,	O
but	O
I	O
do	O
n't	O
think	O
I	O
ever	O
used	O
the	O
unzipping	O
.	O
If	O
I	O
'm	O
so	O
motivated	O
I	O
may	O
pull	O
that	O
code	O
out	O
and	O
edit	O
it	O
into	O
here	O
later	O
.	O
The	O
.Net	O
2.0	O
framework	O
namespace	O
supports	O
GZip	O
and	O
Deflate	O
algorithms	O
.	O
Here	O
are	O
two	O
methods	O
that	O
compress	O
and	O
decompress	O
a	O
byte	O
stream	O
which	O
you	O
can	O
get	O
from	O
your	O
file	O
object	O
.	O
You	O
can	O
subsitute	O
for	O
in	O
the	O
methods	O
below	O
to	O
use	O
that	O
algorithm	O
.	O
This	O
still	O
leaves	O
the	O
problem	O
of	O
handling	O
files	O
compressed	O
with	O
different	O
algorithms	O
though	O
.	O
public	O
static	O
byte	O
[	O
]	O
Compress	O
(	O
byte	O
[	O
]	O
data	O
)	O
{	O
MemoryStream	O
output	O
=	O
new	O
MemoryStream	B-API
(	I-API
)	I-API
;	O
GZipStream	O
gzip	O
=	O
new	O
GZipStream	B-API
(	I-API
output	I-API
,	I-API
CompressionMode.Compress	I-API
,	I-API
true	I-API
)	I-API
;	O
gzip.Write	B-API
(	I-API
data	I-API
,	I-API
0	I-API
,	I-API
data.Length	I-API
)	I-API
;	O
gzip.Close	B-API
(	I-API
)	I-API
;	O
return	O
output.ToArray	B-API
(	I-API
)	I-API
;	O
}	O
public	O
static	O
byte	O
[	O
]	O
Decompress	B-API
(	I-API
byte	I-API
[	I-API
]	I-API
data	I-API
)	I-API
{	O
MemoryStream	O
input	O
=	O
new	O
MemoryStream	B-API
(	I-API
)	I-API
;	O
input.Write	 B-API
(	I-API
data	I-API
,	I-API
0	I-API
,	I-API
data.Length	I-API
)	I-API
;	O
input.Position	O
=	O
0	O
;	O
GZipStream	O
gzip	O
=	O
new	O
GZipStream	B-API
(	I-API
input	I-API
,	I-API
CompressionMode.Decompress	I-API
,	I-API
true	I-API
)	I-API
;	O
MemoryStream	O
output	O
=	O
new	O
MemoryStream	B-API
(	I-API
)	I-API
;	O
byte	O
[	O
]	O
buff	O
=	O
new	O
byte	O
[	O
64	O
]	O
;	O
int	O
read	O
=	O
-1	O
;	O
read	O
=	O
gzip.Read	B-API
(	I-API
buff	I-API
,	I-API
0	I-API
,	I-API
buff.Length	I-API
)	I-API
;	O
while	O
(	O
read	O
0	O
)	O
{	O
output.Write	B-API
(	I-API
buff	I-API
,	I-API
0	I-API
,	I-API
read	I-API
)	I-API
;	O
read	O
=	O
gzip.Read	B-API
(	I-API
buff	I-API
,	I-API
0	I-API
,	I-API
buff.Length	I-API
)	I-API
;	O
}	O
gzip.Close	B-API
(	I-API
)	I-API
;	O
return	O
output.ToArray	B-API
(	I-API
)	I-API
;	O
}	O
Can	O
you	O
show	O
us	O
your	O
code	O
?	O
The	O
example	O
on	O
the	O
Python	O
docs	O
is	O
quite	O
straightforward	O
:	O
groups	O
=	O
[	O
]	O
uniquekeys	O
=	O
[	O
]	O
for	O
k	O
,	O
g	O
in	O
groupby	B-API
(	I-API
data	I-API
,	I-API
keyfunc	I-API
)	I-API
:	O
groups.append	B-API
(	I-API
list	I-API
(	I-API
g	I-API
)	I-API
)	O
#	O
Store	O
group	O
iterator	O
as	O
a	O
list	O
uniquekeys.append	B-API
(	I-API
k	I-API
)	I-API
So	O
in	O
your	O
case	O
,	O
data	O
is	O
a	O
list	O
of	O
nodes	O
,	O
keyfunc	O
is	O
where	O
the	O
logic	O
of	O
your	O
criteria	O
function	O
goes	O
and	O
then	O
groupby	B-API
(	I-API
)	I-API
groups	O
the	O
data	O
.	O
You	O
must	O
be	O
careful	O
to	O
sort	O
the	O
data	O
by	O
the	O
criteria	O
before	O
you	O
call	O
or	O
it	O
wo	O
n't	O
work	O
.	O
method	O
actually	O
just	O
iterates	O
through	O
a	O
list	O
and	O
whenever	O
the	O
key	O
changes	O
it	O
creates	O
a	O
new	O
group	O
.	O
You	O
may	O
find	O
the	O
solution	O
in	O
SQL	O
User	O
Defined	O
Function	O
to	O
Parse	O
a	O
Delimited	O
String	O
helpful	O
(	O
from	O
The	O
Code	O
Project	O
)	O
.	O
You	O
can	O
use	O
this	O
simple	O
logic	O
:	O
Declare	O
@	O
products	O
varchar	O
(	O
200	O
)	O
=	O
'1|20|3|343|44|6|8765'	O
Declare	O
@	O
individual	O
varchar	O
(	O
20	O
)	O
=	O
null	O
WHILE	O
LEN	O
(	O
@	O
products	O
)	O
0	O
BEGIN	O
IF	O
PATINDEX	O
(	O
'	O
%	O
|	O
%	O
'	O
,	O
@	O
products	O
)	O
0	O
BEGIN	O
SET	O
@	O
individual	O
=	O
SUBSTRING	B-API
(	I-API
@	I-API
products	I-API
,	I-API
0	I-API
,	I-API
)	I-API
PATINDEX	B-API
(	I-API
'	I-API
%	I-API
|	I-API
%	I-API
'	I-API
,	I-API
@	I-API
)	I-API
products	O
)	O
)	O
SELECT	O
@	O
individual	O
SET	O
@	O
products	O
=	O
SUBSTRING	B-API
(	I-API
@	I-API
products	I-API
,	I-API
LEN	B-API
(	I-API
@	I-API
individual	I-API
+	I-API
'|	I-API
'	I-API
)	I-API
+	O
1	O
,	O
LEN	B-API
(	I-API
@	I-API
products	I-API
)	I-API
)	O
END	O
ELSE	O
BEGIN	O
SET	O
@	O
individual	O
=	O
@	O
products	O
SET	O
@	O
products	O
=	O
NULL	O
SELECT	O
@	O
individual	O
END	O
END	O
Well	O
,	O
mine	O
is	O
n't	O
all	O
that	O
simpler	O
,	O
but	O
here	O
is	O
the	O
code	O
I	O
use	O
to	O
split	O
a	O
comma-delimited	O
input	O
variable	O
into	O
individual	O
values	O
,	O
and	O
put	O
it	O
into	O
a	O
table	O
variable	O
.	O
I	O
'm	O
sure	O
you	O
could	O
modify	O
this	O
slightly	O
to	O
split	O
based	O
on	O
a	O
space	O
and	O
then	O
to	O
do	O
a	O
basic	O
SELECT	O
query	O
against	O
that	O
table	O
variable	O
to	O
get	O
your	O
results	O
.	O
--	O
Create	O
temporary	O
table	O
to	O
parse	O
the	O
list	O
of	O
accounting	O
cycles	O
.	O
DECLARE	O
@	O
tblAccountingCycles	O
table	O
(	O
AccountingCycle	O
varchar	O
(	O
10	O
)	O
)	O
DECLARE	O
@	O
vchAccountingCycle	O
varchar	O
(	O
10	O
)	O
DECLARE	O
@	O
intPosition	O
int	O
SET	O
@	O
vchAccountingCycleIDs	O
=	O
LTRIM	B-API
(	I-API
RTRIM	B-API
(	I-API
@	I-API
vchAccountingCycleIDs	I-API
)	I-API
)	I-API
+	O
'	O
,	O
'	O
SET	O
@	O
intPosition	O
=	O
CHARINDEX	B-API
(	I-API
'	I-API
,	I-API
'	I-API
,	I-API
@	I-API
vchAccountingCycleIDs	I-API
,	I-API
1	I-API
)	I-API
IF	O
REPLACE	B-API
(	I-API
@	I-API
vchAccountingCycleIDs	I-API
,	I-API
'	I-API
,	I-API
'	I-API
,	I-API
''	I-API
)	I-API
''	O
BEGIN	O
WHILE	O
@	O
intPosition	O
0	O
BEGIN	O
SET	O
@	O
vchAccountingCycle	O
=	O
LTRIM	O
(	O
RTRIM	B-API
(	I-API
LEFT	B-API
(	I-API
@	I-API
vchAccountingCycleIDs	I-API
,	I-API
@	I-API
intPosition	I-API
-	I-API
1	I-API
)	I-API
)	I-API
)	O
IF	O
@	O
vchAccountingCycle	O
''	O
BEGIN	O
INSERT	O
INTO	O
@	O
tblAccountingCycles	O
(	O
AccountingCycle	O
)	O
VALUES	O
(	O
@	O
vchAccountingCycle	O
)	O
END	O
SET	O
@	O
vchAccountingCycleIDs	O
=	O
RIGHT	O
(	O
@	O
vchAccountingCycleIDs	O
,	O
LEN	B-API
(	I-API
@	I-API
vchAccountingCycleIDs	I-API
)	I-API
-	O
@	O
intPosition	O
)	O
SET	O
@	O
intPosition	O
=	O
CHARINDEX	B-API
(	I-API
'	I-API
,	I-API
'	I-API
,	I-API
@	I-API
vchAccountingCycleIDs	I-API
,	I-API
1	I-API
)	I-API
END	O
END	O
The	O
concept	O
is	O
pretty	O
much	O
the	O
same	O
.	O
One	O
other	O
alternative	O
is	O
to	O
leverage	O
the	O
.NET	O
compatibility	O
within	O
SQL	O
Server	O
2005	O
itself	O
.	O
You	O
can	O
essentially	O
write	O
yourself	O
a	O
simple	O
method	O
in	O
.NET	O
that	O
would	O
split	O
the	O
string	O
and	O
then	O
expose	O
that	O
as	O
a	O
stored	O
procedure/function	O
.	O
Here	O
is	O
a	O
UDF	O
which	O
will	O
do	O
it	O
.	O
It	O
will	O
return	O
a	O
table	O
of	O
the	O
delimited	O
values	O
,	O
have	O
n't	O
tried	O
all	O
scenarios	O
on	O
it	O
but	O
your	O
example	O
works	O
fine	O
.	O
CREATE	O
FUNCTION	O
SplitString	O
(	O
--	O
Add	O
the	O
parameters	O
for	O
the	O
function	O
here	O
@	O
myString	O
,	O
@	O
deliminator	O
)	O
RETURNS	O
@	O
ReturnTable	O
TABLE	O
(	O
--	O
Add	O
the	O
column	O
definitions	O
for	O
the	O
TABLE	O
variable	O
here	O
[	O
id	O
]	O
[	O
int	O
]	O
NOT	O
NULL	O
,	O
[	O
part	O
]	O
NULL	O
)	O
ASBEGIN	O
Declare	O
@	O
iSpaces	O
int	O
Declare	O
@	O
part	O
--	O
initialize	O
spaces	O
Select	O
@	O
iSpaces	O
=	O
While	O
@	O
iSpaces	O
0	O
Begin	O
Select	O
@	O
part	O
=	O
)	O
Insert	O
Into	O
Select	O
@	O
part	O
Select	O
@	O
myString	O
=	O
+	O
-	O
)	O
Select	O
@	O
iSpaces	O
=	O
end	O
If	O
0	O
Insert	O
Into	O
@	O
ReturnTable	O
Select	O
@	O
myString	O
RETURN	O
varchar	O
(	O
500	O
)	O
varchar	O
(	O
10	O
)	O
IDENTITY	O
(	O
1,1	O
)	O
[	O
varchar	O
]	O
(	O
50	O
)	O
varchar	O
(	O
50	O
)	O
charindex	B-API
(	I-API
@	I-API
deliminator	I-API
,	I-API
@	I-API
myString,0	I-API
)	I-API
substring	B-API
(	I-API
@	I-API
myString,0	I-API
,	I-API
charindex	I-API
(	I-API
@	I-API
deliminator	I-API
,	I-API
@	I-API
myString,0	I-API
)	I-API
@	O
ReturnTable	O
(	O
part	O
)	O
substring	B-API
(	I-API
@	I-API
mystring	I-API
,	I-API
charindex	B-API
(	I-API
@	I-API
deliminator	I-API
,	I-API
@	I-API
myString,0	I-API
)	I-API
len	B-API
(	I-API
@	I-API
deliminator	I-API
)	I-API
,	O
len	B-API
(	I-API
@	I-API
myString	I-API
)	I-API
(	O
'	O
'	O
,	O
@	O
myString,0	O
)	O
charindex	B-API
(	I-API
@	I-API
deliminator	I-API
,	I-API
@	I-API
myString,0	I-API
)	I-API
len	B-API
(	I-API
@	I-API
myString	I-API
)	I-API
You	O
would	O
call	O
it	O
like	O
this	O
:	O
Select	O
*	O
From	O
(	O
'Hello	O
John	O
Smith	O
'	O
,	O
'	O
'	O
)	O
Edit	O
:	O
Updated	O
solution	O
to	O
handle	O
delimters	O
with	O
a	O
len1	O
as	O
in	O
:	O
select	O
*	O
From	O
SplitString	B-API
(	I-API
'Hello**John**Smith	I-API
'	I-API
,	I-API
'**	I-API
'	I-API
)	I-API
Try	O
this	O
:	O
CREATE	B-API
function	I-API
)	I-API
returns	I-API
@	I-API
t	I-API
table	I-API
(	I-API
Word	I-API
not	I-API
null	I-API
,	I-API
Position	I-API
int	I-API
not	I-API
null	I-API
)	I-API
as	O
begin	O
declare	O
@	O
pos	O
int	O
,	O
@	O
lpos	O
int	O
,	O
@	O
item	O
,	O
@	O
ignore	O
,	O
@	O
dl	O
int	O
,	O
@	O
a1	O
int	O
,	O
@	O
a2	O
int	O
,	O
@	O
z1	O
int	O
,	O
@	O
z2	O
int	O
,	O
@	O
n1	O
int	O
,	O
@	O
n2	O
int	O
,	O
@	O
c	O
,	O
@	O
a	O
smallin	O
select	O
@	O
a1	O
=	O
,	O
@	O
a2	O
=	O
,	O
@	O
z1	O
=	O
,	O
@	O
z2	O
=	O
,	O
@	O
n1	O
=	O
,	O
@	O
n2	O
=	O
set	O
@	O
ignore	O
=	O
'	O
''	O
''	O
'	O
set	O
@	O
pos	O
=	O
1	O
set	O
@	O
dl	O
=	O
set	O
@	O
lpos	O
=	O
1	O
set	O
@	O
item	O
=	O
''	O
while	O
(	O
@	O
pos	O
=	O
@	O
dl	O
)	O
begin	O
set	O
@	O
c	O
=	O
if	O
(	O
@	O
ignore	O
not	O
like	O
'	O
%	O
'	O
+	O
@	O
c	O
+	O
'	O
%	O
'	O
)	O
begin	O
set	O
@	O
a	O
=	O
if	O
and	O
(	O
@	O
a	O
=	O
@	O
z1	O
)	O
)	O
or	O
and	O
(	O
@	O
a	O
=	O
@	O
z2	O
)	O
)	O
or	O
and	O
(	O
@	O
a	O
=	O
@	O
n2	O
)	O
)	O
begin	O
set	O
@	O
item	O
=	O
@	O
item	O
+	O
@	O
c	O
end	O
else	O
if	O
(	O
@	O
item	O
''	O
)	O
begin	O
insert	O
into	O
@	O
t	O
values	O
(	O
@	O
item	O
)	O
set	O
@	O
item	O
=	O
''	O
end	O
end	O
set	O
@	O
pos	O
=	O
@	O
pos	O
+	O
1	O
end	O
if	O
(	O
@	O
item	O
''	O
)	O
begin	O
insert	O
into	O
@	O
t	O
values	O
(	O
@	O
item	O
)	O
end	O
SplitWordList	O
]	O
(	O
@	O
list	O
varchar	O
(	O
8000	O
)	O
varchar	O
(	O
50	O
)	O
identity	O
(	O
1,1	O
)	O
varchar	O
(	O
100	O
)	O
varchar	O
(	O
100	O
)	O
varchar	O
(	O
1	O
)	O
ascii	O
(	O
'a	O
'	O
)	O
ascii	B-API
(	I-API
'A	I-API
'	I-API
)	I-API
ascii	B-API
(	I-API
'z	I-API
'	I-API
)	I-API
ascii	B-API
(	I-API
'Z	I-API
'	I-API
)	I-API
ascii	B-API
(	I-API
'0	I-API
'	I-API
)	I-API
ascii	B-API
(	I-API
'9	I-API
'	I-API
)	I-API
datalength	B-API
(	I-API
@	I-API
list	I-API
)	I-API
(	O
@	O
list	O
,	O
@	O
pos	O
,	O
1	O
)	O
ascii	B-API
(	I-API
@	I-API
c	I-API
)	I-API
(	O
@	O
a	O
=	O
@	O
a1	O
)	O
(	O
@	O
a	O
=	O
@	O
a2	O
)	O
(	O
@	O
a	O
=	O
@	O
n1	O
)	O
Test	O
it	O
like	O
this	O
:	O
select	O
*	O
from	O
(	O
'Hello	O
John	O
Smith	O
'	O
)	O
I	O
do	O
n't	O
believe	O
SQL	O
Server	O
has	O
a	O
built-in	O
split	O
function	O
,	O
so	O
other	O
than	O
a	O
UDF	O
,	O
the	O
only	O
other	O
answer	O
I	O
know	O
is	O
to	O
hijack	O
the	O
PARSENAME	O
function	O
:	O
SELECT	B-API
PARSENAME	I-API
(	I-API
REPLACE	I-API
(	I-API
'Hello	I-API
John	I-API
Smith	I-API
'	I-API
,	I-API
'	I-API
'	I-API
,	I-API
'	I-API
.	I-API
'	I-API
)	I-API
,	O
2	O
)	O
PARSENAME	O
takes	O
a	O
string	O
and	O
splits	O
it	O
on	O
the	O
period	O
character	O
.	O
It	O
takes	O
a	O
number	O
as	O
its	O
second	O
argument	O
,	O
and	O
that	O
number	O
specifies	O
which	O
segment	O
of	O
the	O
string	O
to	O
return	O
(	O
working	O
from	O
back	O
to	O
front	O
)	O
.	O
SELECT	O
PARSENAME	O
(	O
REPLACE	O
(	O
'Hello	O
John	O
Smith	O
'	O
,	O
'	O
'	O
,	O
'	O
.	O
'	O
)	O
,	O
3	O
)	O
--	O
return	O
Hello	O
Obvious	O
problem	O
is	O
when	O
the	O
string	O
already	O
contains	O
a	O
period	O
.	O
I	O
still	O
think	O
using	O
a	O
UDF	O
is	O
the	O
best	O
way	O
...	O
any	O
other	O
suggestions	O
?	O
First	O
,	O
create	O
a	O
function	O
(	O
using	O
CTE	O
,	O
common	O
table	O
expression	O
does	O
away	O
with	O
the	O
need	O
for	O
a	O
temp	O
table	O
)	O
create	O
function	O
dbo.SplitString	O
(	O
@	O
str	O
nvarchar	B-API
(	I-API
4000	I-API
)	I-API
,	O
@	O
separator	O
char	B-API
(	I-API
1	I-API
)	I-API
)	O
returns	O
table	O
AS	O
return	O
(	O
with	O
tokens	O
(	O
p	O
,	O
a	O
,	O
b	O
)	O
AS	O
(	O
select	O
1	O
,	O
1	O
,	O
charindex	O
(	O
@	O
separator	O
,	O
@	O
str	O
)	O
union	O
all	O
select	O
p	O
+	O
1	O
,	O
b	O
+	O
1	O
,	O
charindex	O
(	O
@	O
separator	O
,	O
@	O
str	O
,	O
b	O
+	O
1	O
)	O
from	O
tokens	O
where	O
b	O
0	O
)	O
select	O
p-1	O
zeroBasedOccurance	O
,	O
substring	O
(	O
@	O
str	O
,	O
a	O
,	O
case	O
when	O
b	O
0	O
then	O
b-a	O
ELSE	O
4000	O
end	O
)	O
AS	O
s	O
from	O
tokens	O
)	O
GO	O
Then	O
,	O
use	O
it	O
as	O
any	O
table	O
(	O
or	O
modify	O
it	O
to	O
fit	O
within	O
your	O
existing	O
stored	O
proc	O
)	O
like	O
this	O
.	O
select	O
s	O
from	O
dbo.SplitString	O
(	O
'Hello	O
John	O
Smith	O
'	O
,	O
'	O
'	O
)	O
where	O
zeroBasedOccurance=1	O
Update	O
Previous	O
version	O
would	O
fail	O
for	O
input	O
string	O
longer	O
than	O
4000	O
chars	O
.	O
This	O
version	O
takes	O
care	O
of	O
the	O
limitation	O
:	O
create	O
function	O
dbo.SplitString	O
(	O
@	O
str	O
nvarchar	B-API
(	I-API
max	I-API
)	I-API
,	O
@	O
separator	O
char	B-API
(	I-API
1	I-API
)	I-API
)	O
returns	O
table	O
AS	O
return	O
(	O
with	O
tokens	O
(	O
p	O
,	O
a	O
,	O
b	O
)	O
AS	O
(	O
select	O
cast	B-API
(	I-API
1	I-API
as	I-API
bigint	I-API
)	I-API
,	O
cast	B-API
(	I-API
1	I-API
as	I-API
bigint	I-API
)	I-API
,	O
charindex	B-API
(	I-API
@	I-API
separator	I-API
,	I-API
@	I-API
str	I-API
)	I-API
union	O
all	O
select	O
p	O
+	O
1	O
,	O
b	O
+	O
1	O
,	O
charindex	B-API
(	I-API
@	I-API
separator	I-API
,	I-API
@	I-API
str	I-API
,	I-API
b	I-API
+	I-API
1	I-API
)	I-API
from	O
tokens	O
where	O
b	O
0	O
)	O
select	O
p-1	O
ItemIndex	O
,	O
substring	O
(	O
@	O
str	O
,	O
a	O
,	O
case	O
when	O
b	O
0	O
then	O
b-a	O
ELSE	O
LEN	B-API
(	I-API
@	I-API
str	I-API
)	I-API
end	O
)	O
AS	O
Item	O
from	O
tokens	O
)	O
;	O
GO	O
Usage	O
remains	O
the	O
same	O
.	O
The	O
reason	O
is	O
that	O
a	O
generic	O
class	O
like	O
is	O
,	O
for	O
most	O
purposes	O
,	O
treated	O
externally	O
as	O
a	O
normal	O
class	O
.	O
e.g	O
.	O
when	O
you	O
say	O
Liststring	B-API
(	I-API
)	I-API
the	O
compiler	O
says	O
ListString	B-API
(	I-API
)	I-API
(	O
which	O
contains	O
strings	O
)	O
.	O
[	O
Technical	O
folk	O
:	O
this	O
is	O
an	O
extremely	O
plain-English-ified	O
version	O
of	O
what	O
's	O
going	O
on	O
]	O
Consequently	O
,	O
obviously	O
the	O
compiler	O
ca	O
n't	O
be	O
smart	O
enough	O
to	O
convert	O
a	O
ListString	O
to	O
a	O
ListObject	O
by	O
casting	O
the	O
items	O
of	O
its	O
internal	O
collection	O
.	O
That	O
's	O
why	O
there	O
's	O
extension	O
methods	O
for	O
IEnumerable	O
like	O
Convert	B-API
(	I-API
)	I-API
that	O
allow	O
you	O
to	O
easily	O
supply	O
conversion	O
for	O
the	O
items	O
stored	O
inside	O
a	O
collection	O
,	O
which	O
could	O
be	O
as	O
simple	O
as	O
casting	O
from	O
one	O
to	O
another	O
.	O
Think	O
of	O
it	O
this	O
way	O
,	O
if	O
you	O
were	O
to	O
do	O
such	O
a	O
cast	O
,	O
and	O
then	O
add	O
an	O
object	O
of	O
type	O
Foo	O
to	O
the	O
list	O
,	O
the	O
list	O
of	O
strings	O
is	O
no	O
longer	O
consistent	O
.	O
If	O
you	O
were	O
to	O
iterate	O
the	O
first	O
reference	O
,	O
you	O
would	O
get	O
a	O
class	O
cast	O
exception	O
because	O
once	O
you	O
hit	O
the	O
Foo	O
instance	O
,	O
the	O
Foo	O
could	O
not	O
be	O
converted	O
to	O
string	O
!	O
As	O
a	O
side	O
note	O
,	O
I	O
think	O
it	O
would	O
be	O
more	O
significant	O
whether	O
or	O
not	O
you	O
can	O
do	O
the	O
reverse	O
cast	O
:	O
Listobject	O
ol	O
=	O
new	O
;	O
Liststring	O
sl	O
;	O
sl	O
=	O
Listobject	B-API
(	I-API
)	I-API
I	O
have	O
n't	O
used	O
C	O
#	O
in	O
a	O
while	O
,	O
so	O
I	O
do	O
n't	O
know	O
if	O
that	O
is	O
legal	O
,	O
but	O
that	O
sort	O
of	O
cast	O
is	O
actually	O
(	O
potentially	O
)	O
useful	O
.	O
In	O
this	O
case	O
,	O
you	O
are	O
going	O
from	O
a	O
more	O
general	O
class	O
(	O
object	O
)	O
to	O
a	O
more	O
specific	O
class	O
(	O
string	O
)	O
that	O
extends	O
from	O
the	O
general	O
one	O
.	O
In	O
this	O
way	O
,	O
if	O
you	O
add	O
to	O
the	O
list	O
of	O
strings	O
,	O
you	O
are	O
not	O
violating	O
the	O
list	O
of	O
objects	O
.	O
Does	O
anybody	O
know	O
or	O
can	O
test	O
if	O
such	O
a	O
cast	O
is	O
legal	O
in	O
C	O
#	O
?	O
Mike	O
-	O
I	O
believe	O
contravariance	O
is	O
n't	O
allowed	O
in	O
C	O
#	O
either	O
See	O
Generic	O
type	O
parameter	O
variance	O
in	O
the	O
CLR	O
for	O
some	O
more	O
info	O
.	O
This	O
has	O
a	O
lot	O
to	O
do	O
with	O
covariance	O
,	O
e.g.	O
,	O
generic	O
types	O
are	O
considered	O
as	O
parameters	O
,	O
and	O
if	O
the	O
parameters	O
do	O
not	O
resolve	O
properly	O
to	O
a	O
more	O
specific	O
type	O
then	O
the	O
operation	O
fails	O
.	O
The	O
implication	O
of	O
such	O
is	O
that	O
you	O
really	O
can	O
not	O
cast	O
to	O
a	O
more	O
general	O
type	O
like	O
object	O
.	O
And	O
as	O
stated	O
by	O
Rex	O
,	O
the	O
List	O
object	O
wo	O
n't	O
convert	O
each	O
object	O
for	O
you	O
.	O
You	O
might	O
want	O
to	O
try	O
the	O
ff	O
code	O
instead	O
:	O
Liststring	O
sl	O
=	O
new	O
;	O
//populate	O
slListobject	O
ol	O
=	O
new	O
Liststring	B-API
(	I-API
)	I-API
Listobject	B-API
(	I-API
sl	I-API
)	I-API
or	O
:	O
Listobject	O
ol	O
=	O
new	O
Listobject	B-API
(	I-API
)	I-API
;	I-API
ol.AddRange	B-API
(	I-API
sl	I-API
)	I-API
ol	O
will	O
(	O
theoretically	O
)	O
copy	O
all	O
the	O
contents	O
of	O
sl	O
without	O
problems	O
.	O
If	O
you	O
're	O
using	O
.NET	O
3.5	O
have	O
a	O
look	O
at	O
the	O
Enumerable.Cast	B-API
method	O
.	O
It	O
's	O
an	O
extension	O
method	O
so	O
you	O
can	O
call	O
it	O
directly	O
on	O
the	O
List	O
.	O
Liststring	O
sl	O
=	O
new	O
Liststring	B-API
(	I-API
)	I-API
;	O
IEnumerableobject	O
ol	O
;	O
ol	O
=	O
sl.Castobject	B-API
(	I-API
)	I-API
;	O
It	O
's	O
not	O
exactly	O
what	O
you	O
asked	O
for	O
but	O
should	O
do	O
the	O
trick	O
.	O
Edit	O
:	O
As	O
noted	O
by	O
Zooba	O
,	O
you	O
can	O
then	O
call	O
ol.ToList	B-API
(	I-API
)	I-API
to	O
get	O
a	O
List	O
This	O
has	O
to	O
do	O
with	O
how	O
data	O
bindings	O
are	O
set	O
up	O
in	O
the	O
dotnet	O
framework	O
,	O
especially	O
the	O
.	O
On	O
a	O
high	O
level	O
it	O
means	O
that	O
if	O
you	O
have	O
n't	O
specified	O
otherwise	O
each	O
form	O
and	O
all	O
the	O
controls	O
of	O
the	O
form	O
share	O
the	O
same	O
.	O
When	O
you	O
are	O
setting	O
the	O
property	O
the	O
will	O
use	O
the	O
to	O
get	O
a	O
that	O
wraps	O
the	O
list	O
.	O
The	O
keeps	O
track	O
of	O
such	O
things	O
as	O
the	O
current	O
selected	O
position	O
in	O
the	O
list	O
.	O
When	O
you	O
set	O
the	O
of	O
the	O
second	O
it	O
will	O
use	O
the	O
same	O
(	O
the	O
forms	O
)	O
which	O
will	O
yield	O
a	O
reference	O
to	O
the	O
same	O
as	O
above	O
used	O
to	O
set	O
up	O
the	O
data	O
bindings	O
.	O
To	O
get	O
a	O
more	O
detailed	O
explanation	O
see	O
BindingContext	O
.	O
It	O
's	O
called	O
alpha	O
blending	O
.	O
In	O
psuedocode	O
,	O
assuming	O
the	O
background	O
color	O
(	O
blend	O
)	O
always	O
has	O
255	O
alpha	O
.	O
Also	O
assumes	O
alpha	O
is	O
0-255	O
.	O
r	O
=	O
+	O
(	O
1	O
-	O
g	O
=	O
+	O
(	O
1	O
-	O
b	O
=	O
+	O
(	O
1	O
-	O
alpha=argb.alpha	B-API
(	I-API
)	I-API
(	O
alpha/255	O
)	O
*argb.r	B-API
(	I-API
)	I-API
alpha/255	O
)	O
*blend.r	O
(	O
)	O
(	O
alpha/255	O
)	O
*argb.g	O
(	O
)	O
alpha/255	O
)	O
*blend.g	O
(	O
)	O
(	O
alpha/255	O
)	O
*argb.b	O
(	O
)	O
alpha/255	O
)	O
*blend.b	O
(	O
)	O
note	O
:	O
you	O
probably	O
need	O
to	O
be	O
a	O
bit	O
(	O
more	O
)	O
careful	O
about	O
floating-point/int	O
math	O
and	O
rounding	O
issues	O
,	O
depending	O
on	O
language	O
.	O
Cast	O
intermediates	O
accordingly	O
Edited	O
to	O
add	O
:	O
If	O
you	O
do	O
n't	O
have	O
a	O
background	O
color	O
with	O
an	O
alpha	O
of	O
255	O
,	O
the	O
algebra	O
gets	O
alot	O
more	O
complicated	O
.	O
I	O
've	O
done	O
it	O
before	O
and	O
it	O
's	O
a	O
fun	O
exercise	O
left	O
to	O
the	O
reader	O
(	O
if	O
you	O
really	O
need	O
to	O
know	O
,	O
ask	O
another	O
question	O
:	O
)	O
.	O
In	O
other	O
words	O
,	O
what	O
color	O
C	O
blends	O
into	O
some	O
background	O
the	O
same	O
as	O
blending	O
A	O
,	O
then	O
blending	O
B	O
.	O
This	O
is	O
sort	O
of	O
like	O
calculating	O
A+B	O
(	O
which	O
is	O
n't	O
the	O
same	O
as	O
B+A	O
)	O
.	O
if	O
you	O
do	O
n't	O
need	O
to	O
know	O
this	O
pre-render	O
,	O
you	O
could	O
always	O
use	O
the	O
win32	O
method	O
of	O
getpixel	O
,	O
I	O
believe	O
.	O
Note	O
:	O
typing	O
on	O
iPhone	O
in	O
the	O
middle	O
of	O
Missouri	O
with	O
no	O
inet	O
access	O
.	O
Will	O
look	O
up	O
real	O
win32	O
example	O
and	O
see	O
if	O
there	O
is	O
a	O
.net	O
equivalent	O
.	O
In	O
case	O
anyone	O
cares	O
,	O
and	O
does	O
n't	O
want	O
to	O
use	O
the	O
(	O
excellent	O
)	O
answer	O
posted	O
above	O
,	O
you	O
can	O
get	O
the	O
color	O
value	O
of	O
a	O
pixel	O
in	O
.Net	O
via	O
this	O
link	O
MSDN	O
example	O
try	O
libpcre	O
If	O
you	O
're	O
stuck	O
on	O
windows	O
they	O
have	O
a	O
windows	O
port	O
which	O
should	O
work	O
.	O
I	O
know	O
e-texteditor	O
uses	O
it	O
,	O
so	O
at	O
least	O
that	O
's	O
proof	O
it	O
works	O
:	O
-	O
)	O
The	O
GNU	O
C	O
Library	O
supports	O
regular	O
expressions	O
.	O
It	O
's	O
open	O
,	O
and	O
the	O
RE	O
code	O
seems	O
to	O
be	O
easily	O
extractable	O
.	O
The	O
GNU	O
C	O
library	O
regular	O
expressions	O
facility	O
(	O
regcomp	B-API
(	I-API
)	I-API
,	O
regexec	B-API
(	I-API
)	I-API
and	O
friends	O
)	O
is	O
broken	O
.	O
Use	O
libetre	O
instead	O
;	O
the	O
function	O
signatures	O
match	O
the	O
ones	O
provided	O
by	O
glibc	O
.	O
http	O
:	O
//laurikari.net/tre/	O
If	O
you	O
use	O
Visual	O
Studio	O
you	O
can	O
use	O
Visual	O
C++	O
2008	O
Feature	O
Pack	O
Release	O
,	O
this	O
implements	O
some	O
of	O
TR1	O
,	O
and	O
includes	O
regular	O
expression	O
parsing	O
.	O
Get	O
it	O
You	O
can	O
use	O
this	O
program	O
,	O
Handle	O
,	O
to	O
find	O
which	O
process	O
has	O
the	O
lock	O
on	O
your	O
file	O
.	O
It	O
's	O
a	O
command-line	O
tool	O
,	O
so	O
I	O
guess	O
you	O
use	O
the	O
output	O
from	O
that	O
...	O
I	O
'm	O
not	O
sure	O
about	O
finding	O
it	O
programmatically	O
.	O
If	O
deleting	O
the	O
file	O
can	O
wait	O
,	O
you	O
could	O
specify	O
it	O
for	O
deletion	O
when	O
your	O
computer	O
next	O
starts	O
up	O
:	O
Start	O
REGEDT32	B-API
or	O
REGEDIT	B-API
and	O
navigate	O
to	O
:	O
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session	O
Manager	O
W2K	O
and	O
WXP	O
W2K	O
:	O
EditAdd	O
Value	O
...	O
Data	O
Type	O
:	O
Value	O
Name	O
:	O
OK	O
WXP	O
:	O
EditNewMulti-String	O
Valueenter	O
In	O
the	O
Data	O
area	O
,	O
enter	O
``	B-API
\	I-API
?	I-API
?	I-API
\	I-API
''	I-API
+	B-API
to	O
be	O
deleted	O
.	O
LFNs	O
may	O
be	O
entered	O
without	O
being	O
embedded	O
in	O
quotes	O
.	O
To	O
delete	O
C	B-API
:	I-API
\Long	I-API
Directory	B-API
Name\Long	B-API
File	B-API
,	O
enter	O
the	O
following	O
data	O
:	O
\	O
?	O
?	O
\C	O
:	O
\Long	O
Directory	O
Name\Long	O
File	O
Name.exe	O
Then	O
press	O
OK	O
.	O
The	O
``	O
destination	O
file	O
name	O
''	O
is	O
a	O
null	O
(	O
zero	O
)	O
string	O
.	O
It	O
is	O
entered	O
as	O
follows	O
:	O
W2K	O
:	O
EditBinaryselect	O
Data	O
Format	O
:	O
Hexclick	O
at	O
the	O
end	O
of	O
the	O
hex	O
stringenter	O
0000	O
(	O
four	O
zeros	O
)	O
OK	O
WXP	O
:	O
Right-click	O
the	O
valuechoose	O
``	O
Modify	O
Binary	O
Data	O
''	O
click	O
at	O
the	O
end	O
of	O
the	O
hex	O
stringenter	O
0000	O
(	O
four	O
zeros	O
)	O
OK	O
Close	O
and	O
reboot	O
to	O
delete	O
the	O
file	O
.	O
(	O
Shamelessly	O
stolen	O
from	O
some	O
random	O
forum	O
,	O
for	O
posterity	O
's	O
sake	O
.	O
)	O
Killing	O
other	O
processes	O
is	O
not	O
a	O
healthy	O
thing	O
to	O
do	O
.	O
If	O
your	O
scenario	O
involves	O
something	O
like	O
uninstallation	O
,	O
you	O
could	O
use	O
the	O
API	O
function	O
to	O
mark	O
the	O
file	O
for	O
deletion	O
upon	O
next	O
reboot	O
.	O
If	O
it	O
appears	O
that	O
you	O
really	O
need	O
to	O
delete	O
a	O
file	O
in	O
use	O
by	O
another	O
process	O
,	O
I	O
'd	O
recommend	O
re-considering	O
the	O
actual	O
problem	O
before	O
considering	O
any	O
solutions	O
.	O
If	O
you	O
want	O
to	O
do	O
it	O
programatically	O
.	O
I	O
'm	O
not	O
sure	O
...	O
and	O
I	O
'd	O
really	O
recommend	O
against	O
it	O
.	O
If	O
you	O
're	O
just	O
troubleshooting	O
stuff	O
on	O
your	O
own	O
machine	O
,	O
SysInternals	O
Process	O
Explorer	O
can	O
help	O
you	O
Run	O
it	O
,	O
use	O
the	O
Find	O
Handle	O
command	O
(	O
I	O
think	O
it	O
's	O
either	O
in	O
the	O
find	O
or	O
handle	O
menu	O
)	O
,	O
and	O
search	O
for	O
the	O
name	O
of	O
your	O
file	O
.	O
Once	O
the	O
handle	B-API
(	I-API
s	I-API
)	O
is	O
found	O
,	O
you	O
can	O
forcibly	O
close	O
them	O
.	O
You	O
can	O
then	O
delete	O
the	O
file	O
and	O
so	O
on	O
.	O
Beware	O
,	O
doing	O
this	O
may	O
cause	O
the	O
program	O
which	O
owns	O
the	O
handles	O
to	O
behave	O
strangely	O
,	O
as	O
you	O
've	O
just	O
pulled	O
the	O
proverbial	O
rug	O
out	O
from	O
under	O
it	O
,	O
but	O
it	O
works	O
well	O
when	O
you	O
are	O
debugging	O
your	O
own	O
errant	O
code	O
,	O
or	O
when	O
visual	O
studio	O
/	O
windows	O
explorer	O
is	O
being	O
crap	O
and	O
not	O
releasing	O
file	O
handles	O
even	O
though	O
you	O
told	O
them	O
to	O
close	O
the	O
file	O
ages	O
ago	O
...	O
sigh	O
:	O
-	O
)	O
Oh	O
,	O
one	O
big	O
hack	O
I	O
employed	O
years	O
ago	O
,	O
is	O
that	O
Windows	O
wo	O
n't	O
let	O
you	O
delete	O
files	O
,	O
but	O
it	O
does	O
let	O
you	O
move	O
them	O
.	O
Pseudo-sort-of-code	O
:	O
mv	O
%	O
WINDIR	O
%	O
\System32\	O
%	O
WINDIR\System32\mfc42.dll.old	O
Install	O
new	O
mfc42.dll	O
Tell	O
user	O
to	O
save	O
work	O
and	O
restart	O
applications	O
When	O
the	O
applications	O
restarted	O
(	O
note	O
we	O
did	O
n't	O
need	O
to	O
reboot	O
the	O
machine	O
)	O
,	O
they	O
loaded	O
the	O
new	O
mfc42.dll	O
,	O
and	O
all	O
was	O
well	O
.	O
That	O
,	O
coupled	O
with	O
to	O
delete	O
the	O
old	O
one	O
the	O
next	O
time	O
the	O
whole	O
system	O
restarted	O
,	O
worked	O
pretty	O
well	O
.	O
The	O
typical	O
method	O
is	O
as	O
follows	O
.	O
You	O
've	O
said	O
you	O
want	O
to	O
do	O
this	O
in	O
C	O
#	O
so	O
here	O
goes	O
...	O
If	O
you	O
do	O
n't	O
know	O
which	O
process	O
has	O
the	O
file	O
locked	O
,	O
you	O
'll	O
need	O
to	O
examine	O
each	O
process	O
's	O
handle	O
list	O
,	O
and	O
query	O
each	O
handle	O
to	O
determine	O
if	O
it	O
identifies	O
the	O
locked	O
file	O
.	O
Doing	O
this	O
in	O
C	O
#	O
will	O
likely	O
require	O
P/Invoke	O
or	O
an	O
intermediary	O
C++/CLI	O
to	O
call	O
the	O
native	O
APIs	O
you	O
'll	O
need	O
.	O
Once	O
you	O
've	O
figured	O
out	O
which	O
process	O
(	O
es	O
)	O
have	O
the	O
file	O
locked	O
,	O
you	O
'll	O
need	O
to	O
safely	O
inject	O
a	O
small	O
native	O
DLL	O
into	O
the	O
process	O
(	O
you	O
can	O
also	O
inject	O
a	O
managed	O
DLL	O
,	O
but	O
this	O
is	O
messier	O
,	O
as	O
you	O
then	O
have	O
to	O
start	O
or	O
attach	O
to	O
the	O
.NET	O
runtime	O
)	O
.	O
That	O
bootstrap	O
DLL	O
then	O
closes	O
the	O
handle	O
using	O
CloseHandle	O
etc	O
.	O
Essentially	O
:	O
the	O
way	O
to	O
unlock	O
a	O
``	O
locked	O
''	O
file	O
is	O
to	O
inject	O
a	O
DLL	O
into	O
the	O
offending	O
process	O
's	O
address	O
space	O
and	O
close	O
it	O
yourself	O
.	O
You	O
can	O
do	O
this	O
using	O
native	O
or	O
managed	O
code	O
.	O
No	O
matter	O
what	O
,	O
you	O
're	O
going	O
to	O
need	O
a	O
small	O
amount	O
of	O
native	O
code	O
or	O
at	O
least	O
P/Invoke	O
into	O
the	O
same	O
.	O
Helpful	O
links	O
:	O
http	O
:	O
//www.codeproject.com/KB/threads/winspy.aspx	O
http	O
:	O
//damianblog.com/2008/07/02/net-code-injection/	O
Good	O
luck	O
!	O
Someone	O
correct	O
me	O
if	O
I	O
'm	O
wrong	O
,	O
but	O
I	O
do	O
n't	O
think	O
that	O
AppSettings	O
is	O
typically	O
meant	O
to	O
be	O
used	O
for	O
these	O
type	O
of	O
configuration	O
settings	O
.	O
Normally	O
you	O
would	O
only	O
put	O
in	O
settings	O
that	O
remain	O
fairly	O
static	O
(	O
database	O
connection	O
strings	O
,	O
file	O
paths	O
,	O
etc.	O
)	O
.	O
If	O
you	O
want	O
to	O
store	O
customizable	O
user	O
settings	O
,	O
it	O
would	O
be	O
better	O
to	O
create	O
a	O
separate	O
preferences	O
file	O
,	O
or	O
ideally	O
store	O
those	O
settings	O
in	O
a	O
database	O
.	O
Could	O
I	O
ask	O
why	O
you	O
're	O
not	O
saving	O
the	O
user	O
's	O
settings	O
in	O
a	O
database	O
?	O
Generally	O
,	O
I	O
save	O
application	O
settings	O
that	O
are	O
changed	O
very	O
infrequently	O
in	O
the	O
appSettings	O
section	O
(	O
the	O
default	O
email	O
address	O
error	O
logs	O
are	O
sent	O
to	O
,	O
the	O
number	O
of	O
minutes	O
after	O
which	O
you	O
are	O
automatically	O
logged	O
out	O
,	O
etc	O
.	O
)	O
The	O
scope	O
of	O
this	O
really	O
is	O
at	O
the	O
application	O
,	O
not	O
at	O
the	O
user	O
,	O
and	O
is	O
generally	O
used	O
for	O
deployment	O
settings	O
.	O
one	O
thing	O
I	O
would	O
look	O
at	O
doing	O
is	O
caching	O
the	O
appsettings	O
on	O
a	O
read	O
,	O
then	O
flushing	O
the	O
settings	O
from	O
the	O
cache	O
on	O
the	O
write	O
which	O
should	O
minimize	O
the	O
amount	O
of	O
actual	O
load	O
the	O
server	O
has	O
to	O
deal	O
with	O
for	O
processing	O
the	O
appSettings	O
.	O
Also	O
,	O
if	O
possible	O
,	O
look	O
at	O
breaking	O
the	O
appSettings	O
up	O
into	O
configSections	O
so	O
you	O
can	O
read	O
write	O
and	O
cache	O
related	O
settings	O
.	O
Having	O
said	O
all	O
that	O
,	O
I	O
would	O
seriously	O
consider	O
looking	O
at	O
storing	O
these	O
values	O
in	O
a	O
database	O
as	O
you	O
seem	O
to	O
actually	O
be	O
storing	O
user	O
preferences	O
,	O
and	O
not	O
application	O
settings	O
.	O
I	O
should	O
probably	O
clarify	O
a	O
few	O
points	O
.	O
This	O
is	O
not	O
a	O
web	O
application	O
,	O
so	O
connecting	O
a	O
database	O
to	O
the	O
application	O
might	O
be	O
overkill	O
simply	O
for	O
storing	O
configuration	O
settings	O
.	O
This	O
is	O
a	O
Windows	O
Forms	O
application	O
.	O
According	O
to	O
the	O
MSDN	O
documention	O
,	O
the	O
ConfigurationManager	O
is	O
for	O
storing	O
not	O
just	O
application	O
level	O
settings	O
,	O
but	O
user	O
settings	O
as	O
well	O
.	O
(	O
Especially	O
important	O
if	O
,	O
for	O
instance	O
,	O
the	O
application	O
is	O
installed	O
as	O
a	O
partial-trust	O
application	O
.	O
)	O
Check	O
out	O
SQLite	O
,	O
it	O
seems	O
like	O
a	O
good	O
option	O
for	O
this	O
particular	O
scenario	O
.	O
I	O
would	O
not	O
use	O
config	O
files	O
for	O
storing	O
user	O
data	O
.	O
Use	O
a	O
db	O
.	O
since	O
you	O
're	O
using	O
a	O
winforms	O
app	O
,	O
if	O
it	O
's	O
in	O
.net	O
2.0	O
there	O
's	O
actually	O
a	O
user	O
settings	O
system	O
(	O
called	O
Properties	O
)	O
that	O
is	O
designed	O
for	O
this	O
purpose	O
.	O
This	O
article	O
on	O
MSDN	O
has	O
a	O
pretty	O
good	O
introduction	O
into	O
this	O
If	O
you	O
're	O
still	O
worried	O
about	O
performance	O
then	O
take	O
a	O
look	O
at	O
SQL	O
Compact	O
Edition	O
which	O
is	O
similar	O
to	O
SQLite	O
but	O
is	O
the	O
Microsoft	O
offering	O
which	O
I	O
've	O
found	O
plays	O
very	O
nicely	O
with	O
winforms	O
and	O
there	O
's	O
even	O
the	O
ability	O
to	O
make	O
it	O
work	O
with	O
Linq	O
Dylan	O
,	O
Do	O
n't	O
use	O
the	O
application	O
config	O
file	O
for	O
this	O
purpose	O
,	O
use	O
a	O
SQL	O
DB	O
(	O
SQLite	O
,	O
MySQL	O
,	O
MSSQL	O
,	O
whatever	O
)	O
because	O
you	O
'll	O
have	O
to	O
worry	O
less	O
about	O
concurrency	O
issues	O
during	O
reads	O
and	O
writes	O
to	O
the	O
config	O
file	O
.	O
You	O
'll	O
also	O
have	O
better	O
flexibility	O
in	O
the	O
type	O
of	O
data	O
you	O
want	O
to	O
store	O
.	O
The	O
appSettings	O
section	O
is	O
just	O
a	O
key/value	O
list	O
which	O
you	O
may	O
outgrow	O
as	O
time	O
passes	O
and	O
as	O
the	O
app	O
matures	O
.	O
You	O
could	O
use	O
custom	O
config	O
sections	O
but	O
then	O
you	O
're	O
into	O
a	O
new	O
problem	O
area	O
when	O
it	O
comes	O
to	O
the	O
design	O
.	O
The	O
appSettings	O
is	O
n't	O
really	O
meant	O
for	O
what	O
you	O
are	O
trying	O
to	O
do	O
.	O
When	O
your	O
.NET	O
application	O
starts	O
,	O
it	O
reads	O
in	O
the	O
app.config	O
file	O
,	O
and	O
caches	O
its	O
contents	O
in	O
memory	O
.	O
For	O
that	O
reason	O
,	O
after	O
you	O
write	O
to	O
the	O
app.config	O
file	O
,	O
you	O
'll	O
have	O
to	O
somehow	O
force	O
the	O
runtime	O
to	O
re-parse	O
the	O
app.config	O
file	O
so	O
it	O
can	O
cache	O
the	O
settings	O
again	O
.	O
This	O
is	O
unnecessary	O
The	O
best	O
approach	O
would	O
be	O
to	O
use	O
a	O
database	O
to	O
store	O
your	O
configuration	O
settings	O
.	O
Barring	O
the	O
use	O
of	O
a	O
database	O
,	O
you	O
could	O
easily	O
setup	O
an	O
external	O
XML	O
configuration	O
file	O
.	O
When	O
your	O
application	O
starts	O
,	O
you	O
could	O
cache	O
its	O
contents	O
in	O
a	O
NameValueCollection	O
object	O
or	O
HashTable	O
object	O
.	O
As	O
you	O
change/add	O
settings	O
,	O
you	O
would	O
do	O
it	O
to	O
that	O
cached	O
copy	O
.	O
When	O
your	O
application	O
shuts	O
down	O
,	O
or	O
at	O
an	O
appropriate	O
time	O
interval	O
,	O
you	O
can	O
write	O
the	O
cache	O
contents	O
back	O
out	O
to	O
file	O
.	O
It	O
might	O
be	O
worth	O
checking	O
out	O
what	O
some	O
of	O
the	O
other	O
guys	O
are	O
doing	O
in	O
this	O
space	O
and	O
not	O
necessarily	O
in	O
the	O
C	O
#	O
arena	O
either	O
.	O
This	O
is	O
a	O
library	O
written	O
in	O
c	O
#	O
SVN	O
also	O
has	O
a	O
binary	O
diff	O
algorithm	O
and	O
I	O
know	O
there	O
's	O
an	O
implementation	O
in	O
python	O
although	O
I	O
could	O
n't	O
find	O
it	O
with	O
a	O
quick	O
search	O
.	O
They	O
might	O
give	O
you	O
some	O
ideas	O
on	O
where	O
to	O
improve	O
your	O
own	O
algorithm	O
Sorry	O
I	O
could	O
n't	O
be	O
more	O
help	O
.	O
I	O
would	O
definately	O
keep	O
looking	O
at	O
xdelta	O
because	O
I	O
have	O
used	O
it	O
a	O
number	O
of	O
times	O
to	O
produce	O
quality	O
diffs	O
on	O
600MB+	O
ISO	O
files	O
we	O
have	O
generated	O
for	O
distributing	O
our	O
products	O
and	O
it	O
performs	O
very	O
well	O
.	O
If	O
this	O
is	O
for	O
installation	O
or	O
distribution	O
,	O
have	O
you	O
considered	O
using	O
the	O
Windows	O
Installer	O
SDK	O
?	O
It	O
has	O
the	O
ability	O
to	O
patch	O
binary	O
files	O
.	O
http	O
:	O
//msdn.microsoft.com/en-us/library/aa370578	O
(	O
VS.85	O
)	O
.aspx	O
Yes	O
they	O
should	O
,	O
only	O
leads	O
to	O
confusion	O
otherwise	O
.	O
I	O
'd	O
say	O
yes	O
.	O
First	O
,	O
it	O
will	O
be	O
easier	O
to	O
find	O
the	O
actual	O
code	O
files	O
by	O
following	O
down	O
the	O
namespaces	O
(	O
say	O
,	O
when	O
somebody	O
e-mails	O
you	O
a	O
naked	O
exception	O
call	O
stack	O
)	O
.	O
If	O
you	O
let	O
your	O
folders	O
go	O
out	O
of	O
sync	O
with	O
namespaces	O
,	O
finding	O
files	O
in	O
big	O
codebases	O
becomes	O
getting	O
tiring	O
.	O
Second	O
,	O
VS	O
will	O
generate	O
new	O
classes	O
you	O
create	O
in	O
folders	O
with	O
the	O
same	O
namespace	O
of	O
its	O
parent	O
folder	O
structure	O
.	O
If	O
you	O
decide	O
to	O
swim	O
against	O
this	O
,	O
it	O
will	O
be	O
just	O
one	O
more	O
plumbing	O
job	O
to	O
do	O
daily	O
when	O
adding	O
new	O
files	O
.	O
Of	O
course	O
,	O
this	O
goes	O
without	O
saying	O
that	O
one	O
should	O
be	O
conservative	O
about	O
how	O
deep	O
xis	O
folder/namespace	O
hierarchy	O
goes	O
.	O
I	O
think	O
the	O
standard	O
,	O
within	O
.NET	O
,	O
is	O
to	O
try	O
to	O
do	O
it	O
when	O
possible	O
,	O
but	O
not	O
to	O
create	O
unnecessarily	O
deep	O
structures	O
just	O
to	O
adhere	O
to	O
it	O
as	O
a	O
hard	O
rule	O
.	O
None	O
of	O
my	O
projects	O
follow	O
the	O
namespace	O
==	O
structure	O
rule	O
100	O
%	O
of	O
the	O
time	O
,	O
sometimes	O
its	O
just	O
cleaner/better	O
to	O
break	O
out	O
from	O
such	O
rules	O
.	O
In	O
Java	O
you	O
do	O
n't	O
have	O
a	O
choice	O
.	O
I	O
'd	O
call	O
that	O
a	O
classic	O
case	O
of	O
what	O
works	O
in	O
theory	O
vs	O
what	O
works	O
in	O
practice	O
.	O
Also	O
,	O
note	O
that	O
if	O
you	O
use	O
the	O
built-in	O
templates	O
to	O
add	O
classes	O
to	O
a	O
folder	O
,	O
it	O
will	O
by	O
default	O
be	O
put	O
in	O
a	O
namespace	O
that	O
reflects	O
the	O
folder	O
hierarchy	O
.	O
The	O
classes	O
will	O
be	O
easier	O
to	O
find	O
and	O
that	O
alone	O
should	O
be	O
reasons	O
good	O
enough	O
.	O
The	O
rules	O
we	O
follow	O
are	O
:	O
Project/assembly	O
name	O
is	O
the	O
same	O
as	O
the	O
root	O
namespace	O
,	O
except	O
for	O
the	O
.dll	O
ending	O
Only	O
exception	O
to	O
the	O
above	O
rule	O
is	O
a	O
project	O
with	O
a	O
.Core	O
ending	O
,	O
the	O
.Core	O
is	O
stripped	O
off	O
Folders	O
equals	O
namespaces	O
One	O
type	O
per	O
file	O
(	O
class	O
,	O
struct	O
,	O
enum	O
,	O
delegate	O
,	O
etc	O
.	O
)	O
makes	O
it	O
easy	O
to	O
find	O
the	O
right	O
file	O
I	O
found	O
that	O
if	O
you	O
append	O
the	O
last	O
modified	O
timestamp	O
of	O
the	O
file	O
onto	O
the	O
end	O
of	O
the	O
URL	O
the	O
browser	O
will	O
request	O
the	O
files	O
when	O
it	O
is	O
modified	O
.	O
For	O
example	O
in	O
PHP	O
:	O
function	O
urlmtime	B-API
(	I-API
$	I-API
url	I-API
)	I-API
{	O
$	O
parsed_url	O
=	O
parse_url	B-API
(	I-API
$	I-API
url	I-API
)	I-API
;	O
$	O
path	O
=	O
$	O
parsed_url	O
[	O
'path	O
'	O
]	O
;	O
if	O
(	O
$	O
path	O
[	O
0	O
]	O
==	O
``	O
/	O
''	O
)	O
{	O
$	O
filename	O
=	O
$	O
_SERVER	O
[	O
'DOCUMENT_ROOT	O
'	O
]	O
.	O
``	O
/	O
''	O
.	O
$	O
path	O
;	O
}	O
else	O
{	O
$	O
filename	O
=	O
$	O
path	O
;	O
}	O
if	O
(	O
!	O
file_exists	B-API
(	I-API
$	I-API
filename	I-API
)	I-API
)	O
{	O
//	O
If	O
not	O
a	O
file	O
then	O
use	O
the	O
current	O
time	O
$	O
lastModified	O
=	O
date	B-API
(	I-API
'YmdHis	I-API
'	I-API
)	I-API
;	O
}	O
else	O
{	O
$	O
lastModified	O
=	O
date	B-API
(	I-API
'YmdHis	I-API
'	I-API
,	I-API
filemtime	I-API
(	I-API
$	I-API
filename	I-API
)	I-API
)	I-API
;	O
}	O
if	O
(	O
strpos	B-API
(	I-API
$	I-API
url	I-API
,	I-API
'	I-API
?	I-API
'	I-API
)	I-API
===	O
false	O
)	O
{	O
$	O
url	O
.=	O
'	O
?	O
ts=	O
'	O
.	O
$	O
lastModified	O
;	O
}	O
else	O
{	O
$	O
url	O
.=	O
'ts=	O
'	O
.	O
$	O
lastModified	O
;	O
}	O
return	O
$	O
url	O
;	O
}	O
function	O
include_css	B-API
(	I-API
$	I-API
css_url	I-API
,	I-API
$	I-API
media='all	I-API
'	I-API
)	I-API
{	O
//	O
According	O
to	O
Yahoo	O
,	O
using	O
link	O
allows	O
for	O
progressive	O
//	O
rendering	O
in	O
IE	O
where	O
as	O
@	O
import	O
url	B-API
(	I-API
$	I-API
css_url	I-API
)	I-API
does	O
not	O
echo	O
'link	O
rel=	O
''	O
stylesheet	O
''	O
type=	O
''	O
text/css	O
''	O
media=	O
''	O
'	O
.	O
$	O
media	O
.	O
'	O
''	O
href=	O
''	O
'	O
.	O
urlmtime	B-API
(	I-API
$	I-API
css_url	I-API
)	I-API
.	O
'	O
''	O
'	O
.	O
``	O
\n	O
''	O
;	O
}	O
function	O
include_javascript	B-API
(	I-API
$	I-API
javascript_url	I-API
)	I-API
{	O
echo	O
'script	O
type=	O
''	O
text/javascript	O
''	O
src=	O
''	O
'	O
.	O
urlmtime	B-API
(	I-API
$	I-API
javascript_url	I-API
)	I-API
.	O
'	O
''	O
/script	O
'	O
.	O
``	O
\n	O
''	O
;	O
}	O
Some	O
solutions	O
I	O
have	O
seen	O
involve	O
adding	O
a	O
version	O
number	O
to	O
the	O
end	O
of	O
the	O
file	O
in	O
the	O
form	O
of	O
a	O
query	O
string	O
.	O
script	O
type=	O
''	O
text/javascript	O
''	O
src=	O
''	O
funkycode.js	O
?	O
v1	O
''	O
You	O
could	O
use	O
the	O
SVN	O
revision	O
number	O
to	O
automate	O
this	O
for	O
you	O
by	O
including	O
the	O
word	O
LastChangedRevision	O
in	O
your	O
html	O
file	O
after	O
where	O
v1	O
appears	O
above	O
.	O
You	O
must	O
also	O
setup	O
your	O
repository	O
to	O
do	O
this	O
.	O
I	O
hope	O
this	O
further	O
clarifies	O
my	O
answer	O
?	O
Firefox	O
also	O
allows	O
pressing	O
CTRL	O
+	O
R	O
to	O
reload	O
everything	O
on	O
a	O
particular	O
page	O
.	O
In	O
my	O
opinion	O
,	O
it	O
is	O
better	O
to	O
make	O
the	O
version	O
number	O
part	O
of	O
the	O
file	O
itself	O
.	O
e.g	O
.	O
myscript.1.2.3.js	O
You	O
can	O
set	O
your	O
webserver	O
to	O
cache	O
this	O
file	O
forever	O
,	O
and	O
just	O
add	O
a	O
new	O
js	O
file	O
when	O
you	O
have	O
a	O
new	O
version	O
.	O
is	O
this	O
a	O
console	O
app	O
or	O
a	O
winforms	O
app	O
?	O
If	O
it	O
's	O
a	O
.NET	O
1.1	O
console	O
app	O
this	O
is	O
,	O
sadly	O
,	O
by	O
design	O
--	O
it	O
's	O
confirmed	O
by	O
a	O
MSFT	O
dev	O
in	O
the	O
second	O
blog	O
post	O
you	O
referenced	O
:	O
BTW	O
,	O
on	O
my	O
1.1	O
machine	O
the	O
example	O
from	O
MSDN	O
does	O
have	O
the	O
expected	O
output	O
;	O
it	O
's	O
just	O
that	O
the	O
second	O
line	O
does	O
n't	O
show	O
up	O
until	O
after	O
you	O
've	O
attached	O
a	O
debugger	O
(	O
or	O
not	O
)	O
.	O
In	O
v2	O
we	O
've	O
flipped	O
things	O
around	O
so	O
that	O
the	O
UnhandledException	B-API
event	O
fires	O
before	O
the	O
debugger	O
attaches	O
,	O
which	O
seems	O
to	O
be	O
what	O
most	O
people	O
expect	O
.	O
Sounds	O
like	O
.NET	O
2.0	O
does	O
this	O
better	O
(	O
thank	O
goodness	O
)	O
,	O
but	O
honestly	O
,	O
I	O
never	O
had	O
time	O
to	O
go	O
back	O
and	O
check	O
.	O
It	O
's	O
a	O
WinForms	O
app	O
.	O
The	O
exceptions	O
that	O
are	O
caught	O
by	O
Application.ThreadException	B-API
work	O
fine	O
,	O
and	O
I	O
do	O
n't	O
get	O
the	O
ugly	O
.NET	O
exception	O
box	B-API
(	I-API
OK	I-API
to	I-API
terminate	I-API
,	I-API
cancel	I-API
to	I-API
debug	I-API
?	I-API
who	I-API
came	I-API
up	I-API
with	I-API
that	I-API
?	I-API
?	I-API
)	I-API
.	O
I	O
was	O
getting	O
some	O
exceptions	O
that	O
were	O
n't	O
being	O
caught	O
by	O
that	O
and	O
ended	O
up	O
going	O
to	O
the	O
AppDomain.UnhandledException	B-API
event	O
that	O
were	O
causing	O
problems	O
.	O
I	O
think	O
I	O
've	O
caught	O
most	O
of	O
those	O
exceptions	O
and	O
I	O
am	O
displaying	O
them	O
in	O
our	O
nice	O
error	O
box	O
now	O
.	O
So	O
I	O
'll	O
just	O
have	O
to	O
hope	O
there	O
are	O
not	O
some	O
other	O
circumstances	O
that	O
would	O
cause	O
exceptions	O
to	O
not	O
be	O
caught	O
by	O
the	O
Application.ThreadException	B-API
handler	O
.	O
Oh	O
,	O
in	O
WinForms	O
you	O
definitely	O
should	O
be	O
able	O
to	O
get	O
it	O
to	O
work	O
.	O
The	O
only	O
thing	O
you	O
have	O
to	O
watch	O
out	O
for	O
is	O
things	O
happening	O
on	O
different	O
threads	O
.	O
I	O
have	O
an	O
old	O
CodeProject	O
article	O
here	O
which	O
should	O
help	O
:	O
http	O
:	O
//www.codeproject.com/KB/exception/ExceptionHandling.aspx	O
AppDomain.UnhandledException	B-API
is	O
an	O
event	O
,	O
not	O
a	O
global	O
exception	O
handler	O
.	O
This	O
means	O
,	O
by	O
the	O
time	O
it	O
is	O
raised	O
,	O
your	O
application	O
is	O
already	O
on	O
its	O
way	O
down	O
the	O
drain	O
,	O
and	O
there	O
is	O
nothing	O
you	O
can	O
do	O
about	O
it	O
,	O
except	O
for	O
doing	O
cleanup	O
and	O
error	O
logging	O
.	O
What	O
happened	O
behind	O
the	O
scenes	O
is	O
this	O
:	O
The	O
framework	O
detected	O
the	O
exception	O
,	O
walked	O
up	O
the	O
call	O
stack	O
to	O
the	O
very	O
top	O
,	O
found	O
no	O
handlers	O
that	O
would	O
recover	O
from	O
the	O
error	O
,	O
so	O
was	O
unable	O
to	O
determine	O
if	O
it	O
was	O
safe	O
to	O
continue	O
execution	O
.	O
So	O
,	O
it	O
started	O
the	O
shutdown	O
sequence	O
,	O
and	O
fired	O
up	O
this	O
event	O
as	O
a	O
courtesy	O
to	O
you	O
so	O
you	O
can	O
pay	O
your	O
respects	O
to	O
your	O
already-doomed	O
process	O
.	O
This	O
happens	O
when	O
an	O
exception	O
is	O
left	O
unhandled	O
in	O
the	O
main	O
thread	O
.	O
There	O
is	O
no	O
single-point	O
solution	O
to	O
this	O
kind	O
of	O
error	O
.	O
You	O
need	O
to	O
put	O
a	O
real	O
exception	O
handler	O
(	O
a	O
catch	O
block	O
)	O
upstream	O
of	O
all	O
places	O
where	O
this	O
error	O
occurs	O
and	O
forward	O
it	O
to	O
(	O
for	O
example	O
)	O
a	O
global	O
handler	O
method/class	O
that	O
will	O
determine	O
if	O
it	O
is	O
safe	O
to	O
simply	O
report	O
and	O
continue	O
,	O
based	O
on	O
exception	O
type	O
and/or	O
content	O
.	O
Edit	O
:	O
It	O
is	O
possible	O
to	O
disable	O
(	O
=hack	O
)	O
the	O
error-reporting	O
mechanism	O
built	O
into	O
Windows	O
so	O
the	O
mandatory	O
``	O
crash	O
and	O
burn	O
''	O
dialog	O
does	O
not	O
get	O
displayed	O
when	O
your	O
app	O
goes	O
down	O
.	O
However	O
,	O
this	O
becomes	O
effective	O
for	O
all	O
the	O
applications	O
in	O
the	O
system	O
,	O
not	O
just	O
your	O
own	O
.	O
One	O
method	O
you	O
can	O
used	O
to	O
obtain	O
this	O
option	O
is	O
by	O
placing	O
a	O
``	O
CheckBox	O
''	O
object	O
and	O
changing	O
its	O
``	O
Appearance	O
''	O
from	O
``	O
Normal	O
''	O
to	O
``	O
Button	O
''	O
this	O
will	O
give	O
you	O
the	O
same	O
functionality	O
that	O
I	O
believe	O
you	O
are	O
looking	O
for	O
.	O
Yes	O
,	O
I	O
thought	O
about	O
that	O
,	O
but	O
I	O
soon	O
figured	O
out	O
that	O
another	O
Domain-Specific-Language	O
(	O
DSL	O
)	O
would	O
be	O
a	O
bit	O
too	O
much	O
.	O
Essentially	O
,	O
they	O
need	O
to	O
interact	O
with	O
my	O
gamestate	O
in	O
possibly	O
unpredictable	O
ways	O
.	O
For	O
example	O
,	O
a	O
card	O
could	O
have	O
a	O
rule	O
``	O
When	O
this	O
cards	O
enter	O
play	O
,	O
all	O
your	O
undead	O
minions	O
gain	O
+3	O
attack	O
against	O
flying	O
enemies	O
,	O
except	O
when	O
the	O
enemy	O
is	O
blessed	O
''	O
.	O
As	O
trading	O
card	O
games	O
are	O
turn	O
based	O
,	O
the	O
GameState	O
Manager	O
will	O
fire	O
OnStageX	O
events	O
and	O
let	O
the	O
cards	O
modify	O
other	O
cards	O
or	O
the	O
GameState	O
in	O
whatever	O
way	O
the	O
card	O
needs	O
.	O
If	O
I	O
try	O
to	O
create	O
a	O
DSL	O
,	O
I	O
have	O
to	O
implement	O
a	O
rather	O
large	O
feature	O
set	O
and	O
possibly	O
constantly	O
update	O
it	O
,	O
which	O
shifts	O
the	O
maintenance	O
work	O
to	O
another	O
part	O
without	O
actually	O
removing	O
it	O
.	O
That	O
's	O
why	O
I	O
wanted	O
to	O
stay	O
with	O
a	O
``	O
real	O
''	O
.NET	O
language	O
to	O
essentially	O
be	O
able	O
to	O
just	O
fire	O
the	O
event	O
and	O
let	O
the	O
card	O
manipulate	O
the	O
gamestate	O
in	O
whatever	O
way	O
(	O
within	O
the	O
limits	O
of	O
the	O
code	O
access	O
security	O
)	O
.	O
Oleg	O
Shilo	O
's	O
C	O
#	O
Script	O
solution	O
(	O
at	O
The	O
Code	O
Project	O
)	O
really	O
is	O
a	O
great	O
introduction	O
to	O
providing	O
script	O
abilities	O
in	O
your	O
application	O
.	O
A	O
different	O
approach	O
would	O
be	O
to	O
consider	O
a	O
language	O
that	O
is	O
specifically	O
built	O
for	O
scripting	O
,	O
such	O
as	O
IronRuby	O
,	O
IronPython	O
,	O
or	O
Lua	O
.	O
IronPython	O
and	O
IronRuby	O
are	O
both	O
available	O
today	O
.	O
For	O
a	O
guide	O
to	O
embedding	O
IronPython	O
read	O
How	O
to	O
embed	O
IronPython	O
script	O
support	O
in	O
your	O
existing	O
app	O
in	O
10	O
easy	O
steps	O
.	O
Lua	O
is	O
a	O
scripting	O
language	O
commonly	O
used	O
in	O
games	O
.	O
There	O
is	O
a	O
Lua	O
compiler	O
for	O
.NET	O
,	O
available	O
from	O
CodePlex	O
--	O
http	O
:	O
//www.codeplex.com/Nua	O
That	O
codebase	O
is	O
a	O
great	O
read	O
if	O
you	O
want	O
to	O
learn	O
about	O
building	O
a	O
compiler	O
in	O
.NET	O
.	O
A	O
different	O
angle	O
altogether	O
is	O
to	O
try	O
PowerShell	O
.	O
There	O
are	O
numerous	O
examples	O
of	O
embedding	O
PowerShell	O
into	O
an	O
application	O
--	O
here	O
's	O
a	O
thorough	O
project	O
on	O
the	O
topic	O
:	O
Powershell	O
Tunnel	O
You	O
might	O
be	O
able	O
to	O
use	O
IronRuby	O
for	O
that	O
.	O
Otherwise	O
I	O
'd	O
suggest	O
you	O
have	O
a	O
directory	O
where	O
you	O
place	O
precompiled	O
assemblies	O
.	O
Then	O
you	O
could	O
have	O
a	O
reference	O
in	O
the	O
DB	O
to	O
the	O
assembly	O
and	O
class	O
,	O
and	O
use	O
reflection	O
to	O
load	O
the	O
proper	O
assemblies	O
at	O
runtime	O
.	O
If	O
you	O
really	O
want	O
to	O
compile	O
at	O
run-time	O
you	O
could	O
use	O
the	O
CodeDOM	O
,	O
then	O
you	O
could	O
use	O
reflection	O
to	O
load	O
the	O
dynamic	O
assembly	O
.	O
MSDN	O
article	O
which	O
might	O
help	O
.	O
You	O
could	O
use	O
any	O
of	O
the	O
DLR	O
languages	O
,	O
which	O
provide	O
a	O
way	O
to	O
really	O
easily	O
host	O
your	O
own	O
scripting	O
platform	O
.	O
However	O
,	O
you	O
do	O
n't	O
have	O
to	O
use	O
a	O
scripting	O
language	O
for	O
this	O
.	O
You	O
could	O
use	O
C	O
#	O
and	O
compile	O
it	O
with	O
the	O
C	O
#	O
code	O
provider	O
.	O
As	O
long	O
as	O
you	O
load	O
it	O
in	O
its	O
own	O
AppDomain	O
,	O
you	O
can	O
load	O
and	O
unload	O
it	O
to	O
your	O
heart	O
's	O
content	O
.	O
If	O
you	O
do	O
n't	O
want	O
to	O
use	O
the	O
DLR	O
you	O
can	O
use	O
Boo	O
(	O
which	O
has	O
an	O
interpreter	O
)	O
or	O
you	O
could	O
consider	O
the	O
Script.NET	B-API
(	I-API
S	I-API
#	I-API
)	I-API
project	O
on	O
CodePlex	O
.	O
With	O
the	O
Boo	O
solution	O
you	O
can	O
choose	O
between	O
compiled	O
scripts	O
or	O
using	O
the	O
interpreter	O
,	O
and	O
Boo	O
makes	O
a	O
nice	O
scripting	O
language	O
,	O
has	O
a	O
flexible	O
syntax	O
and	O
an	O
extensible	O
language	O
via	O
its	O
open	O
compiler	O
architecture	O
.	O
Script.NET	O
looks	O
nice	O
too	O
,	O
though	O
,	O
and	O
you	O
could	O
easily	O
extend	O
that	O
language	O
as	O
well	O
as	O
its	O
an	O
open	O
source	O
project	O
and	O
uses	O
a	O
very	O
friendly	O
Compiler	O
Generator	B-API
(	I-API
Irony.net	I-API
)	I-API
.	O
As	O
far	O
as	O
I	O
can	O
tell	O
Python	O
,	O
up	O
through	O
2.5	O
,	O
only	O
supports	O
hexadecimal	O
octal	O
literals	O
.	O
I	O
did	O
find	O
some	O
discussions	O
about	O
adding	O
binary	O
to	O
future	O
versions	O
but	O
nothing	O
definite	O
.	O
I	O
am	O
pretty	O
sure	O
this	O
is	O
one	O
of	O
the	O
things	O
due	O
to	O
change	O
in	O
Python	O
3.0	O
with	O
perhaps	O
bin	O
(	O
)	O
to	O
go	O
with	O
hex	B-API
(	I-API
)	I-API
and	O
oct	B-API
(	I-API
)	I-API
.	O
EDIT	O
:	O
lbrandy	O
's	O
answer	O
is	O
correct	O
in	O
all	O
cases	O
.	O
print	O
int	B-API
(	I-API
'01010101111',2	I-API
)	I-API
687	O
print	O
int	B-API
(	I-API
'11111111',2	I-API
)	I-API
255	O
Another	O
way	O
.	O
break	O
would	O
stop	O
the	O
foreach	O
loop	O
completely	O
,	O
continue	O
would	O
skip	O
to	O
the	O
next	O
DataRow	O
will	O
exit	O
the	O
loop	O
completely	O
,	O
will	O
just	O
skip	O
the	O
current	O
iteration	O
.	O
For	O
example	O
:	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
10	O
;	O
i++	O
)	O
{	O
if	O
(	O
i	O
==	O
0	O
)	O
break	O
;	O
(	O
i	O
)	O
;	O
}	O
The	O
break	O
will	O
cause	O
the	O
loop	O
to	O
exit	O
on	O
the	O
first	O
iteration	O
-	O
will	O
never	O
be	O
executed	O
.	O
This	O
here	O
:	O
for	O
(	O
int	O
i	B-API
=	B-API
;	O
i	O
10	O
;	O
i++	O
)	O
{	O
if	O
(	O
i	O
==	O
0	O
)	O
continue	O
;	O
(	O
i	O
)	O
;	O
}	O
Will	O
not	O
execute	O
DoSomeThingWith	O
for	O
i	O
=	O
0	O
,	O
but	O
the	O
loop	O
will	O
continue	O
and	O
DoSomeThingWith	O
will	O
be	O
executed	O
for	O
i	B-API
=	B-API
to	O
i	B-API
=	B-API
.	O
A	O
really	O
easy	O
way	O
to	O
understand	O
this	O
is	O
to	O
place	O
the	O
word	O
``	O
loop	O
''	O
after	O
each	O
of	O
the	O
keywords	O
.	O
The	O
terms	O
now	O
make	O
sense	O
if	O
they	O
are	O
just	O
read	O
like	O
everyday	O
phrases	O
.	O
break	O
loop	O
-	O
looping	O
is	O
broken	O
and	O
stops	O
continue	O
loop	O
-	O
loop	O
continues	O
to	O
execute	O
with	O
the	O
next	O
iteration	O
There	O
are	O
more	O
than	O
a	O
few	O
people	O
who	O
do	O
n't	O
like	O
and	O
.	O
The	O
latest	O
complaint	O
I	O
saw	O
about	O
them	O
was	O
in	O
JavaScript	O
:	O
The	O
Good	O
Parts	O
by	O
Douglas	O
Crockford	O
.	O
But	O
I	O
find	O
that	O
sometimes	O
using	O
one	O
of	O
them	O
really	O
simplifies	O
things	O
,	O
especially	O
if	O
your	O
language	O
does	O
n't	O
include	O
a	O
or	O
style	O
of	O
loop	O
.	O
I	O
tend	O
to	O
use	O
in	O
loops	O
that	O
are	O
searching	O
a	O
list	O
for	O
something	O
.	O
Once	O
found	O
,	O
there	O
's	O
no	O
point	O
in	O
continuing	O
,	O
so	O
you	O
might	O
as	O
well	O
quit	O
.	O
I	O
use	O
when	O
doing	O
something	O
with	O
most	O
elements	O
of	O
a	O
list	O
,	O
but	O
still	O
want	O
to	O
skip	O
over	O
a	O
few	O
.	O
The	O
statement	O
also	O
comes	O
in	O
handy	O
when	O
polling	O
for	O
a	O
valid	O
response	O
from	O
somebody	O
or	O
something	O
.	O
Instead	O
of	O
:	O
Ask	O
a	O
questionWhile	O
the	O
answer	O
is	O
invalid	O
:	O
Ask	O
the	O
You	O
could	O
eliminate	O
some	O
duplication	O
and	O
use	O
:	O
While	O
True	O
:	O
Ask	O
a	O
question	O
If	O
the	O
answer	O
is	O
valid	O
:	O
The	O
loop	O
that	O
I	O
mentioned	O
before	O
is	O
the	O
more	O
elegant	O
solution	O
for	O
that	O
particular	O
problem	O
:	O
Do	O
:	O
Ask	O
a	O
question	O
Until	O
the	O
answer	O
is	O
No	O
duplication	O
,	O
and	O
no	O
needed	O
either	O
.	O
Ruby	O
unfortunately	O
is	O
a	O
bit	O
different	O
.	O
PS	O
:	O
My	O
memory	O
is	O
a	O
bit	O
hazy	O
on	O
this	O
so	O
apologies	O
if	O
I	O
'm	O
wrong	O
instead	O
of	O
break/continue	O
,	O
it	O
has	O
break/next	O
,	O
which	O
behave	O
the	O
same	O
in	O
terms	O
of	O
loops	O
Loops	O
(	O
like	O
everything	O
else	O
)	O
are	O
expressions	O
,	O
and	O
``	O
return	O
''	O
the	O
last	O
thing	O
that	O
they	O
did	O
.	O
Most	O
of	O
the	O
time	O
,	O
getting	O
the	O
return	O
value	O
from	O
a	O
loop	O
is	O
pointless	O
,	O
so	O
everyone	O
just	O
does	O
this	O
a	B-API
=	B-API
5while	B-API
a	B-API
10	B-API
a	B-API
+	B-API
You	O
can	O
however	O
do	O
this	O
a	B-API
=	B-API
5b	B-API
=	B-API
while	B-API
a	B-API
10	B-API
a	B-API
+	B-API
1end	B-API
#	B-API
b	B-API
is	B-API
now	B-API
HOWEVER	O
,	O
a	O
lot	O
of	O
ruby	O
code	O
'emulates	O
'	O
a	O
loop	O
by	O
using	O
a	O
block	O
.	O
The	O
canonical	O
example	O
is	O
10.times	B-API
do	B-API
|x|	B-API
puts	B-API
As	O
it	O
is	O
much	O
more	O
common	O
for	O
people	O
to	O
want	O
to	O
do	O
things	O
with	O
the	O
result	O
of	O
a	O
block	O
,	O
this	O
is	O
where	O
it	O
gets	O
messy	O
.	O
break/next	O
mean	O
different	O
things	O
in	O
the	O
context	O
of	O
a	O
block	O
.	O
break	O
will	O
jump	O
out	O
of	O
the	O
code	O
that	O
called	O
the	O
block	O
next	O
will	O
skip	O
the	O
rest	O
of	O
the	O
code	O
in	O
the	O
block	O
,	O
and	O
'return	O
'	O
what	O
you	O
specify	O
to	O
the	O
caller	O
of	O
the	O
block	O
.	O
This	O
does	O
n't	O
make	O
any	O
sense	O
without	O
examples	O
.	O
def	O
timesten	O
10.times	O
{	O
|t|	O
puts	O
yield	O
t	O
}	O
endtimesten	O
do	O
|x|	O
x	O
*	O
2end	O
#	O
will	O
print2468	O
...	O
and	O
so	O
ontimesten	O
do	O
|x|	O
break	O
x	O
*	O
2end	O
#	O
wo	O
n't	O
print	O
anything	O
.	O
The	O
break	O
jumps	O
out	O
of	O
the	O
timesten	O
function	O
entirely	O
,	O
and	O
the	O
call	O
to	O
`puts`	O
inside	O
it	O
gets	O
skippedtimesten	O
do	O
|x|	O
break	O
5	O
x	O
*	O
2end	O
#	O
This	O
is	O
the	O
same	O
as	O
above	O
.	O
it	O
's	O
``	O
returning	O
''	O
5	O
,	O
but	O
nobody	O
is	O
catching	O
it	O
.	O
If	O
you	O
did	O
a	O
=	O
timesten	O
...	O
then	O
a	O
would	O
get	O
assigned	O
to	O
5timeste	O
do	O
|x|	O
next	O
5	O
x	O
*	O
2end	O
#	O
this	O
would	O
print555	O
...	O
and	O
so	O
on	O
,	O
because	O
'next	O
5	O
'	O
skips	O
the	O
'x	O
*	O
2	O
'	O
and	O
'returns	O
'	O
So	O
yeah	O
.	O
Ruby	O
is	O
awesome	O
,	O
but	O
it	O
has	O
some	O
awful	O
corner-cases	O
.	O
This	O
is	O
the	O
second	O
worst	O
one	O
I	O
've	O
seen	O
in	O
my	O
years	O
of	O
using	O
it	O
:	O
-	O
)	O
I	O
like	O
MbUnit	O
,	O
er	O
,	O
Gallio	O
.	O
Most	O
importantly	O
to	O
me	O
is	O
having	O
good	O
tools	O
support	O
inside	O
Visual	O
Studio	O
.	O
For	O
that	O
I	O
use	O
Resharper	O
,	O
which	O
has	O
an	O
MbUnit	O
test	O
runner	O
.	O
A	O
lot	O
of	O
folks	O
seem	O
to	O
like	O
TestDriven.NET	B-API
as	O
their	O
test	O
runner	O
as	O
well	O
.	O
I	O
like	O
TestDriven.NET	B-API
(	O
even	O
though	O
I	O
use	O
ReSharper	O
)	O
and	O
I	O
'm	O
pretty	O
happy	O
with	O
XUnit.net	B-API
.	O
It	O
uses	O
Facts	O
instead	O
of	O
Tests	O
which	O
many	O
people	O
dislike	O
but	O
I	O
like	O
the	O
difference	O
in	O
terminology	O
.	O
It	O
's	O
useful	O
to	O
think	O
of	O
a	O
collection	O
of	O
automatically	O
provable	O
Facts	O
about	O
your	O
software	O
and	O
see	O
which	O
ones	O
you	O
violate	O
when	O
you	O
make	O
a	O
change	O
.	O
Be	O
aware	O
that	O
Visual	O
Studio	O
2008	O
Professional	O
(	O
and	O
above	O
)	O
now	O
comes	O
with	O
integrated	O
Unit	O
Testing	O
(	O
it	O
used	O
to	O
be	O
available	O
only	O
with	O
the	O
Team	O
System	O
Editions	O
)	O
and	O
may	O
be	O
suitable	O
for	O
your	O
needs	O
.	O
There	O
are	O
so	O
many	O
it	O
's	O
crazy	O
.	O
Crazy	O
good	O
,	O
I	O
guess	O
.	O
For	O
the	O
conservative	O
types	O
(	O
me	O
)	O
,	O
NUnit	O
is	O
still	O
available	O
and	O
still	O
more	O
than	O
capable	O
.	O
For	O
the	O
Microsoft-types	O
,	O
MSTest	O
is	O
adequate	O
,	O
but	O
slow	O
and	O
clunky	O
compared	O
to	O
Nunit	O
.	O
It	O
also	O
lacks	O
code	O
coverage	O
without	O
paying	O
the	O
big	O
bucks	O
for	O
the	O
pricey	O
versions	O
of	O
Visual	O
Studio	O
.	O
There	O
's	O
also	O
MbUnit	O
.	O
It	O
's	O
like	O
NUnit	O
,	O
but	O
has	O
nifty	O
features	O
like	O
RowTest	B-API
(	O
run	O
the	O
same	O
test	O
with	O
different	O
parameters	O
)	O
and	O
Rollback	B-API
(	O
put	O
the	O
database	O
back	O
like	O
you	O
found	O
it	O
after	O
a	O
test	O
)	O
And	O
finally	O
,	O
xUnit.net	B-API
is	O
the	O
trendy	O
option	O
with	O
some	O
attitude	O
.	O
Oh	O
,	O
and	O
TestDriven.NET	B-API
will	O
give	O
you	O
IDE	O
integration	O
for	O
both	O
Nunit	O
and	O
MBunit	O
.	O
I	O
'm	O
sure	O
they	O
're	O
all	O
just	O
fine	O
.	O
I	O
'd	O
steer	O
away	O
from	O
MSTest	O
though	O
,	O
unless	O
you	O
just	O
enjoy	O
the	O
convenience	O
of	O
having	O
everything	O
in	O
one	O
IDE	O
out	O
of	O
the	O
box	O
.	O
Scott	O
Hanselman	O
has	O
a	O
podcast	O
on	O
this	O
very	O
topic	O
.	O
xUnit.net	B-API
looks	O
like	O
it	O
provides	O
a	O
slightly	O
different	O
approach	O
to	O
N/MB/MS/Unit	O
,	O
which	O
is	O
interesting	O
.	O
In	O
my	O
search	O
for	O
an	O
rspec-like	O
solution	O
(	O
because	O
I	O
LOVE	O
the	O
rspec	O
)	O
,	O
I	O
also	O
came	O
across	O
NSpec	O
,	O
which	O
looks	O
a	O
bit	O
wordy	O
,	O
but	O
combined	O
with	O
the	O
NSpec	O
Extensions	O
addon	O
to	O
use	O
C	O
#	O
3	O
extension	O
methods	O
,	O
it	O
looks	O
pretty	O
nice	O
.	O
We	O
use	O
NUnit	O
and	O
MBUnit	O
here	O
.	O
We	O
use	O
TestDriven.NET	B-API
to	O
run	O
the	O
unit	O
tests	O
from	O
within	O
Visual	O
Studio	O
.	O
We	O
use	O
the	O
excellent	O
,	O
highly	O
recommended	O
RhinoMocks	O
as	O
a	O
mock	O
framework	O
.	O
I	O
used	O
to	O
use	O
NUnit	O
,	O
but	O
I	O
switched	O
to	O
MbUnit	O
since	O
it	O
has	O
more	O
features	O
.	O
I	O
love	O
RowTest	O
.	O
It	O
lets	O
you	O
parametrize	O
your	O
tests	O
.	O
NUnit	O
does	O
have	O
a	O
litter	O
bit	O
better	O
tool	O
support	O
though	O
.	O
I	O
am	O
using	O
ReSharper	O
to	O
run	O
MbUnit	O
Tests	O
.	O
I	O
've	O
had	O
problems	O
with	O
TestDriven.NET	B-API
running	O
my	O
SetUp	O
methods	O
for	O
MbUnit	O
.	O
No	O
,	O
you	O
were	O
not	O
dreaming	O
.	O
Python	O
has	O
a	O
pretty	O
excellent	O
list	O
comprehension	O
system	O
that	O
lets	O
you	O
manipulate	O
lists	O
pretty	O
elegantly	O
,	O
and	O
depending	O
on	O
exactly	O
what	O
you	O
want	O
to	O
accomplish	O
,	O
this	O
can	O
be	O
done	O
a	O
couple	O
of	O
ways	O
.	O
In	O
essence	O
,	O
what	O
you	O
're	O
doing	O
is	O
saying	O
``	O
For	O
item	O
in	O
list	O
if	O
criteria.matches	O
''	O
,	O
and	O
from	O
that	O
you	O
can	O
just	O
iterate	O
through	O
the	O
results	O
or	O
dump	O
the	O
results	O
into	O
a	O
new	O
list	O
.	O
I	O
'm	O
going	O
to	O
crib	O
an	O
example	O
from	O
Dive	O
Into	O
Python	O
here	O
,	O
because	O
it	O
's	O
pretty	O
elegant	O
and	O
they	O
're	O
smarter	O
than	O
I	O
am	O
.	O
Here	O
they	O
're	O
getting	O
a	O
list	O
of	O
files	O
in	O
a	O
directory	O
,	O
then	O
filtering	O
the	O
list	O
for	O
all	O
files	O
that	O
match	O
a	O
regular	O
expression	O
criteria	O
.	O
files	O
=	O
os.listdir	B-API
(	I-API
path	I-API
)	I-API
test	O
=	O
re.compile	B-API
(	I-API
``	I-API
test\.py	I-API
$	I-API
''	I-API
,	I-API
re.IGNORCASE	I-API
)	I-API
files	O
=	O
[	O
f	O
for	O
f	O
in	O
files	O
if	O
test.search	B-API
(	I-API
f	I-API
)	I-API
]	O
You	O
could	O
do	O
this	O
without	O
regular	O
expressions	O
,	O
for	O
your	O
example	O
,	O
for	O
anything	O
where	O
your	O
expression	O
at	O
the	O
end	O
returns	O
true	O
for	O
a	O
match	O
.	O
There	O
are	O
other	O
options	O
like	O
using	O
the	O
filter	B-API
(	I-API
)	I-API
function	O
,	O
but	O
if	O
I	O
were	O
going	O
to	O
choose	O
,	O
I	O
'd	O
go	O
with	O
this	O
.	O
Eric	O
Sipple	O
I	O
think	O
:	O
#	O
!	O
/bin/pythonbar	O
in	O
dict	B-API
(	I-API
Foo	I-API
)	I-API
Is	O
what	O
you	O
are	O
thinking	O
of	O
.	O
When	O
trying	O
to	O
see	O
if	O
a	O
certain	O
key	O
exists	O
within	O
a	O
dictionary	O
in	O
python	O
(	O
python	O
's	O
version	O
of	O
a	O
hash	O
table	O
)	O
there	O
are	O
two	O
ways	O
to	O
check	O
.	O
First	O
is	O
the	O
has_key	B-API
(	I-API
)	I-API
method	O
attached	O
to	O
the	O
dictionary	O
and	O
second	O
is	O
the	O
example	O
given	O
above	O
.	O
It	O
will	O
return	O
a	O
boolean	O
value	O
.	O
That	O
should	O
answer	O
your	O
question	O
.	O
And	O
now	O
a	O
little	O
off	O
topic	O
to	O
tie	O
this	O
in	O
to	O
the	O
list	O
comprehension	O
answer	O
previously	O
given	O
(	O
for	O
a	O
bit	O
more	O
clarity	O
)	O
.	O
List	O
Comprehensions	O
construct	O
a	O
list	O
from	O
a	O
basic	O
for	O
loop	O
with	O
modifiers	O
.	O
As	O
an	O
example	O
(	O
to	O
clarify	O
slightly	O
)	O
,	O
a	O
way	O
to	O
use	O
the	O
in	O
language	O
construct	O
in	O
a	O
_list	O
comprehension_	O
:	O
Say	O
you	O
have	O
a	O
two	O
dimensional	O
dictionary	O
and	O
you	O
only	O
want	O
the	O
second	O
dimension	O
dictionaries	O
which	O
contain	O
the	O
key	O
.	O
A	O
relatively	O
straightforward	O
way	O
to	O
do	O
so	O
would	O
be	O
to	O
use	O
a	O
list	O
comprehension	O
with	O
a	O
conditional	O
as	O
follows	O
:	O
#	O
!	O
/bin/pythonbaz	O
=	O
for	O
key	O
,	O
value	O
in	O
foo	O
if	O
bar	O
in	O
(	O
[	O
(	O
key	O
,	O
value	O
)	O
Note	O
the	O
if	O
bar	O
in	O
at	O
the	O
end	O
of	O
the	O
statement	O
,	O
this	O
is	O
a	O
modifying	O
clause	O
which	O
tells	O
the	O
list	O
comprehension	O
to	O
only	O
keep	O
those	O
key-value	O
pairs	O
which	O
meet	O
the	O
conditional	O
.	O
In	O
this	O
case	O
is	O
a	O
new	O
dictionary	O
which	O
contains	O
only	O
the	O
dictionaries	O
from	O
foo	O
which	O
contain	O
bar	O
(	O
Hopefully	O
I	O
did	O
n't	O
miss	O
anything	O
in	O
that	O
code	O
example	O
...	O
you	O
may	O
have	O
to	O
take	O
a	O
look	O
at	O
the	O
list	O
comprehension	O
documentation	O
found	O
in	O
docs.python.org	O
tutorials	O
and	O
at	O
secnetix.de	O
,	O
both	O
sites	O
are	O
good	O
references	O
if	O
you	O
have	O
questions	O
in	O
the	O
future	O
.	O
)	O
.	O
Are	O
you	O
looking	O
to	O
get	O
a	O
list	O
of	O
objects	O
that	O
have	O
a	O
certain	O
attribute	O
?	O
If	O
so	O
,	O
a	O
list	O
comprehension	O
is	O
the	O
right	O
way	O
to	O
do	O
this	O
.	O
result	O
=	O
[	O
obj	O
for	O
obj	O
in	O
listOfObjs	O
if	O
(	O
obj	O
,	O
'attributeName	O
'	O
)	O
